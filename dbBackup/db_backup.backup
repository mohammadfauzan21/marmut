--
-- PostgreSQL database cluster dump
--

SET default_transaction_read_only = off;

SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;

--
-- Roles
--

CREATE ROLE anon;
ALTER ROLE anon WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE authenticated;
ALTER ROLE authenticated WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE authenticator;
ALTER ROLE authenticator WITH NOSUPERUSER NOINHERIT NOCREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE dashboard_user;
ALTER ROLE dashboard_user WITH NOSUPERUSER INHERIT CREATEROLE CREATEDB NOLOGIN REPLICATION NOBYPASSRLS;
CREATE ROLE pgbouncer;
ALTER ROLE pgbouncer WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE pgsodium_keyholder;
ALTER ROLE pgsodium_keyholder WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE pgsodium_keyiduser;
ALTER ROLE pgsodium_keyiduser WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE pgsodium_keymaker;
ALTER ROLE pgsodium_keymaker WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE postgres;
ALTER ROLE postgres WITH NOSUPERUSER INHERIT CREATEROLE CREATEDB LOGIN REPLICATION BYPASSRLS;
CREATE ROLE service_role;
ALTER ROLE service_role WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION BYPASSRLS;
CREATE ROLE supabase_admin;
ALTER ROLE supabase_admin WITH SUPERUSER INHERIT CREATEROLE CREATEDB LOGIN REPLICATION BYPASSRLS;
CREATE ROLE supabase_auth_admin;
ALTER ROLE supabase_auth_admin WITH NOSUPERUSER NOINHERIT CREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE supabase_read_only_user;
ALTER ROLE supabase_read_only_user WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB LOGIN NOREPLICATION BYPASSRLS;
CREATE ROLE supabase_realtime_admin;
ALTER ROLE supabase_realtime_admin WITH NOSUPERUSER NOINHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE supabase_replication_admin;
ALTER ROLE supabase_replication_admin WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB LOGIN REPLICATION NOBYPASSRLS;
CREATE ROLE supabase_storage_admin;
ALTER ROLE supabase_storage_admin WITH NOSUPERUSER NOINHERIT CREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;

--
-- User Configurations
--

--
-- User Config "anon"
--

ALTER ROLE anon SET statement_timeout TO '3s';

--
-- User Config "authenticated"
--

ALTER ROLE authenticated SET statement_timeout TO '8s';

--
-- User Config "authenticator"
--

ALTER ROLE authenticator SET session_preload_libraries TO 'safeupdate';
ALTER ROLE authenticator SET statement_timeout TO '8s';
ALTER ROLE authenticator SET lock_timeout TO '8s';

--
-- User Config "postgres"
--

ALTER ROLE postgres SET search_path TO E'\\$user', 'public', 'extensions';

--
-- User Config "supabase_admin"
--

ALTER ROLE supabase_admin SET search_path TO '$user', 'public', 'auth', 'extensions';

--
-- User Config "supabase_auth_admin"
--

ALTER ROLE supabase_auth_admin SET search_path TO 'auth';
ALTER ROLE supabase_auth_admin SET idle_in_transaction_session_timeout TO '60000';

--
-- User Config "supabase_storage_admin"
--

ALTER ROLE supabase_storage_admin SET search_path TO 'storage';


--
-- Role memberships
--

GRANT anon TO authenticator GRANTED BY postgres;
GRANT anon TO postgres GRANTED BY supabase_admin;
GRANT authenticated TO authenticator GRANTED BY postgres;
GRANT authenticated TO postgres GRANTED BY supabase_admin;
GRANT authenticator TO supabase_storage_admin GRANTED BY supabase_admin;
GRANT pg_monitor TO postgres GRANTED BY supabase_admin;
GRANT pg_read_all_data TO supabase_read_only_user GRANTED BY postgres;
GRANT pgsodium_keyholder TO pgsodium_keymaker GRANTED BY supabase_admin;
GRANT pgsodium_keyholder TO postgres WITH ADMIN OPTION GRANTED BY supabase_admin;
GRANT pgsodium_keyholder TO service_role GRANTED BY supabase_admin;
GRANT pgsodium_keyiduser TO pgsodium_keyholder GRANTED BY supabase_admin;
GRANT pgsodium_keyiduser TO pgsodium_keymaker GRANTED BY supabase_admin;
GRANT pgsodium_keyiduser TO postgres WITH ADMIN OPTION GRANTED BY supabase_admin;
GRANT pgsodium_keymaker TO postgres WITH ADMIN OPTION GRANTED BY supabase_admin;
GRANT service_role TO authenticator GRANTED BY postgres;
GRANT service_role TO postgres GRANTED BY supabase_admin;
GRANT supabase_auth_admin TO postgres GRANTED BY supabase_admin;
GRANT supabase_realtime_admin TO postgres GRANTED BY supabase_admin;
GRANT supabase_storage_admin TO postgres GRANTED BY supabase_admin;






--
-- Databases
--

--
-- Database "template1" dump
--

\connect template1

--
-- PostgreSQL database dump
--

-- Dumped from database version 15.1 (Ubuntu 15.1-1.pgdg20.04+1)
-- Dumped by pg_dump version 15.7 (Debian 15.7-1.pgdg110+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- PostgreSQL database dump complete
--

--
-- Database "postgres" dump
--

\connect postgres

--
-- PostgreSQL database dump
--

-- Dumped from database version 15.1 (Ubuntu 15.1-1.pgdg20.04+1)
-- Dumped by pg_dump version 15.7 (Debian 15.7-1.pgdg110+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: auth; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA auth;


ALTER SCHEMA auth OWNER TO supabase_admin;

--
-- Name: extensions; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA extensions;


ALTER SCHEMA extensions OWNER TO postgres;

--
-- Name: graphql; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA graphql;


ALTER SCHEMA graphql OWNER TO supabase_admin;

--
-- Name: graphql_public; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA graphql_public;


ALTER SCHEMA graphql_public OWNER TO supabase_admin;

--
-- Name: marmut; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA marmut;


ALTER SCHEMA marmut OWNER TO postgres;

--
-- Name: pgbouncer; Type: SCHEMA; Schema: -; Owner: pgbouncer
--

CREATE SCHEMA pgbouncer;


ALTER SCHEMA pgbouncer OWNER TO pgbouncer;

--
-- Name: pgsodium; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA pgsodium;


ALTER SCHEMA pgsodium OWNER TO supabase_admin;

--
-- Name: pgsodium; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgsodium WITH SCHEMA pgsodium;


--
-- Name: EXTENSION pgsodium; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgsodium IS 'Pgsodium is a modern cryptography library for Postgres.';


--
-- Name: realtime; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA realtime;


ALTER SCHEMA realtime OWNER TO supabase_admin;

--
-- Name: storage; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA storage;


ALTER SCHEMA storage OWNER TO supabase_admin;

--
-- Name: vault; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA vault;


ALTER SCHEMA vault OWNER TO supabase_admin;

--
-- Name: pg_graphql; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pg_graphql WITH SCHEMA graphql;


--
-- Name: EXTENSION pg_graphql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pg_graphql IS 'pg_graphql: GraphQL support';


--
-- Name: pg_stat_statements; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pg_stat_statements WITH SCHEMA extensions;


--
-- Name: EXTENSION pg_stat_statements; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pg_stat_statements IS 'track planning and execution statistics of all SQL statements executed';


--
-- Name: pgcrypto; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA extensions;


--
-- Name: EXTENSION pgcrypto; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgcrypto IS 'cryptographic functions';


--
-- Name: pgjwt; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgjwt WITH SCHEMA extensions;


--
-- Name: EXTENSION pgjwt; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgjwt IS 'JSON Web Token API for Postgresql';


--
-- Name: supabase_vault; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS supabase_vault WITH SCHEMA vault;


--
-- Name: EXTENSION supabase_vault; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION supabase_vault IS 'Supabase Vault Extension';


--
-- Name: uuid-ossp; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA extensions;


--
-- Name: EXTENSION "uuid-ossp"; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION "uuid-ossp" IS 'generate universally unique identifiers (UUIDs)';


--
-- Name: aal_level; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.aal_level AS ENUM (
    'aal1',
    'aal2',
    'aal3'
);


ALTER TYPE auth.aal_level OWNER TO supabase_auth_admin;

--
-- Name: code_challenge_method; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.code_challenge_method AS ENUM (
    's256',
    'plain'
);


ALTER TYPE auth.code_challenge_method OWNER TO supabase_auth_admin;

--
-- Name: factor_status; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.factor_status AS ENUM (
    'unverified',
    'verified'
);


ALTER TYPE auth.factor_status OWNER TO supabase_auth_admin;

--
-- Name: factor_type; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.factor_type AS ENUM (
    'totp',
    'webauthn'
);


ALTER TYPE auth.factor_type OWNER TO supabase_auth_admin;

--
-- Name: one_time_token_type; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.one_time_token_type AS ENUM (
    'confirmation_token',
    'reauthentication_token',
    'recovery_token',
    'email_change_token_new',
    'email_change_token_current',
    'phone_change_token'
);


ALTER TYPE auth.one_time_token_type OWNER TO supabase_auth_admin;

--
-- Name: action; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.action AS ENUM (
    'INSERT',
    'UPDATE',
    'DELETE',
    'TRUNCATE',
    'ERROR'
);


ALTER TYPE realtime.action OWNER TO supabase_admin;

--
-- Name: equality_op; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.equality_op AS ENUM (
    'eq',
    'neq',
    'lt',
    'lte',
    'gt',
    'gte',
    'in'
);


ALTER TYPE realtime.equality_op OWNER TO supabase_admin;

--
-- Name: user_defined_filter; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.user_defined_filter AS (
	column_name text,
	op realtime.equality_op,
	value text
);


ALTER TYPE realtime.user_defined_filter OWNER TO supabase_admin;

--
-- Name: wal_column; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.wal_column AS (
	name text,
	type_name text,
	type_oid oid,
	value jsonb,
	is_pkey boolean,
	is_selectable boolean
);


ALTER TYPE realtime.wal_column OWNER TO supabase_admin;

--
-- Name: wal_rls; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.wal_rls AS (
	wal jsonb,
	is_rls_enabled boolean,
	subscription_ids uuid[],
	errors text[]
);


ALTER TYPE realtime.wal_rls OWNER TO supabase_admin;

--
-- Name: email(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.email() RETURNS text
    LANGUAGE sql STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.email', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'email')
  )::text
$$;


ALTER FUNCTION auth.email() OWNER TO supabase_auth_admin;

--
-- Name: FUNCTION email(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.email() IS 'Deprecated. Use auth.jwt() -> ''email'' instead.';


--
-- Name: jwt(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.jwt() RETURNS jsonb
    LANGUAGE sql STABLE
    AS $$
  select 
    coalesce(
        nullif(current_setting('request.jwt.claim', true), ''),
        nullif(current_setting('request.jwt.claims', true), '')
    )::jsonb
$$;


ALTER FUNCTION auth.jwt() OWNER TO supabase_auth_admin;

--
-- Name: role(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.role() RETURNS text
    LANGUAGE sql STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.role', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'role')
  )::text
$$;


ALTER FUNCTION auth.role() OWNER TO supabase_auth_admin;

--
-- Name: FUNCTION role(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.role() IS 'Deprecated. Use auth.jwt() -> ''role'' instead.';


--
-- Name: uid(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.uid() RETURNS uuid
    LANGUAGE sql STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.sub', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'sub')
  )::uuid
$$;


ALTER FUNCTION auth.uid() OWNER TO supabase_auth_admin;

--
-- Name: FUNCTION uid(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.uid() IS 'Deprecated. Use auth.jwt() -> ''sub'' instead.';


--
-- Name: grant_pg_cron_access(); Type: FUNCTION; Schema: extensions; Owner: postgres
--

CREATE FUNCTION extensions.grant_pg_cron_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF EXISTS (
    SELECT
    FROM pg_event_trigger_ddl_commands() AS ev
    JOIN pg_extension AS ext
    ON ev.objid = ext.oid
    WHERE ext.extname = 'pg_cron'
  )
  THEN
    grant usage on schema cron to postgres with grant option;

    alter default privileges in schema cron grant all on tables to postgres with grant option;
    alter default privileges in schema cron grant all on functions to postgres with grant option;
    alter default privileges in schema cron grant all on sequences to postgres with grant option;

    alter default privileges for user supabase_admin in schema cron grant all
        on sequences to postgres with grant option;
    alter default privileges for user supabase_admin in schema cron grant all
        on tables to postgres with grant option;
    alter default privileges for user supabase_admin in schema cron grant all
        on functions to postgres with grant option;

    grant all privileges on all tables in schema cron to postgres with grant option;
    revoke all on table cron.job from postgres;
    grant select on table cron.job to postgres with grant option;
  END IF;
END;
$$;


ALTER FUNCTION extensions.grant_pg_cron_access() OWNER TO postgres;

--
-- Name: FUNCTION grant_pg_cron_access(); Type: COMMENT; Schema: extensions; Owner: postgres
--

COMMENT ON FUNCTION extensions.grant_pg_cron_access() IS 'Grants access to pg_cron';


--
-- Name: grant_pg_graphql_access(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.grant_pg_graphql_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $_$
DECLARE
    func_is_graphql_resolve bool;
BEGIN
    func_is_graphql_resolve = (
        SELECT n.proname = 'resolve'
        FROM pg_event_trigger_ddl_commands() AS ev
        LEFT JOIN pg_catalog.pg_proc AS n
        ON ev.objid = n.oid
    );

    IF func_is_graphql_resolve
    THEN
        -- Update public wrapper to pass all arguments through to the pg_graphql resolve func
        DROP FUNCTION IF EXISTS graphql_public.graphql;
        create or replace function graphql_public.graphql(
            "operationName" text default null,
            query text default null,
            variables jsonb default null,
            extensions jsonb default null
        )
            returns jsonb
            language sql
        as $$
            select graphql.resolve(
                query := query,
                variables := coalesce(variables, '{}'),
                "operationName" := "operationName",
                extensions := extensions
            );
        $$;

        -- This hook executes when `graphql.resolve` is created. That is not necessarily the last
        -- function in the extension so we need to grant permissions on existing entities AND
        -- update default permissions to any others that are created after `graphql.resolve`
        grant usage on schema graphql to postgres, anon, authenticated, service_role;
        grant select on all tables in schema graphql to postgres, anon, authenticated, service_role;
        grant execute on all functions in schema graphql to postgres, anon, authenticated, service_role;
        grant all on all sequences in schema graphql to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on tables to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on functions to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on sequences to postgres, anon, authenticated, service_role;

        -- Allow postgres role to allow granting usage on graphql and graphql_public schemas to custom roles
        grant usage on schema graphql_public to postgres with grant option;
        grant usage on schema graphql to postgres with grant option;
    END IF;

END;
$_$;


ALTER FUNCTION extensions.grant_pg_graphql_access() OWNER TO supabase_admin;

--
-- Name: FUNCTION grant_pg_graphql_access(); Type: COMMENT; Schema: extensions; Owner: supabase_admin
--

COMMENT ON FUNCTION extensions.grant_pg_graphql_access() IS 'Grants access to pg_graphql';


--
-- Name: grant_pg_net_access(); Type: FUNCTION; Schema: extensions; Owner: postgres
--

CREATE FUNCTION extensions.grant_pg_net_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF EXISTS (
    SELECT 1
    FROM pg_event_trigger_ddl_commands() AS ev
    JOIN pg_extension AS ext
    ON ev.objid = ext.oid
    WHERE ext.extname = 'pg_net'
  )
  THEN
    IF NOT EXISTS (
      SELECT 1
      FROM pg_roles
      WHERE rolname = 'supabase_functions_admin'
    )
    THEN
      CREATE USER supabase_functions_admin NOINHERIT CREATEROLE LOGIN NOREPLICATION;
    END IF;

    GRANT USAGE ON SCHEMA net TO supabase_functions_admin, postgres, anon, authenticated, service_role;

    ALTER function net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) SECURITY DEFINER;
    ALTER function net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) SECURITY DEFINER;

    ALTER function net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) SET search_path = net;
    ALTER function net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) SET search_path = net;

    REVOKE ALL ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;
    REVOKE ALL ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;

    GRANT EXECUTE ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin, postgres, anon, authenticated, service_role;
    GRANT EXECUTE ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin, postgres, anon, authenticated, service_role;
  END IF;
END;
$$;


ALTER FUNCTION extensions.grant_pg_net_access() OWNER TO postgres;

--
-- Name: FUNCTION grant_pg_net_access(); Type: COMMENT; Schema: extensions; Owner: postgres
--

COMMENT ON FUNCTION extensions.grant_pg_net_access() IS 'Grants access to pg_net';


--
-- Name: pgrst_ddl_watch(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.pgrst_ddl_watch() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  cmd record;
BEGIN
  FOR cmd IN SELECT * FROM pg_event_trigger_ddl_commands()
  LOOP
    IF cmd.command_tag IN (
      'CREATE SCHEMA', 'ALTER SCHEMA'
    , 'CREATE TABLE', 'CREATE TABLE AS', 'SELECT INTO', 'ALTER TABLE'
    , 'CREATE FOREIGN TABLE', 'ALTER FOREIGN TABLE'
    , 'CREATE VIEW', 'ALTER VIEW'
    , 'CREATE MATERIALIZED VIEW', 'ALTER MATERIALIZED VIEW'
    , 'CREATE FUNCTION', 'ALTER FUNCTION'
    , 'CREATE TRIGGER'
    , 'CREATE TYPE', 'ALTER TYPE'
    , 'CREATE RULE'
    , 'COMMENT'
    )
    -- don't notify in case of CREATE TEMP table or other objects created on pg_temp
    AND cmd.schema_name is distinct from 'pg_temp'
    THEN
      NOTIFY pgrst, 'reload schema';
    END IF;
  END LOOP;
END; $$;


ALTER FUNCTION extensions.pgrst_ddl_watch() OWNER TO supabase_admin;

--
-- Name: pgrst_drop_watch(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.pgrst_drop_watch() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  obj record;
BEGIN
  FOR obj IN SELECT * FROM pg_event_trigger_dropped_objects()
  LOOP
    IF obj.object_type IN (
      'schema'
    , 'table'
    , 'foreign table'
    , 'view'
    , 'materialized view'
    , 'function'
    , 'trigger'
    , 'type'
    , 'rule'
    )
    AND obj.is_temporary IS false -- no pg_temp objects
    THEN
      NOTIFY pgrst, 'reload schema';
    END IF;
  END LOOP;
END; $$;


ALTER FUNCTION extensions.pgrst_drop_watch() OWNER TO supabase_admin;

--
-- Name: set_graphql_placeholder(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.set_graphql_placeholder() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $_$
    DECLARE
    graphql_is_dropped bool;
    BEGIN
    graphql_is_dropped = (
        SELECT ev.schema_name = 'graphql_public'
        FROM pg_event_trigger_dropped_objects() AS ev
        WHERE ev.schema_name = 'graphql_public'
    );

    IF graphql_is_dropped
    THEN
        create or replace function graphql_public.graphql(
            "operationName" text default null,
            query text default null,
            variables jsonb default null,
            extensions jsonb default null
        )
            returns jsonb
            language plpgsql
        as $$
            DECLARE
                server_version float;
            BEGIN
                server_version = (SELECT (SPLIT_PART((select version()), ' ', 2))::float);

                IF server_version >= 14 THEN
                    RETURN jsonb_build_object(
                        'errors', jsonb_build_array(
                            jsonb_build_object(
                                'message', 'pg_graphql extension is not enabled.'
                            )
                        )
                    );
                ELSE
                    RETURN jsonb_build_object(
                        'errors', jsonb_build_array(
                            jsonb_build_object(
                                'message', 'pg_graphql is only available on projects running Postgres 14 onwards.'
                            )
                        )
                    );
                END IF;
            END;
        $$;
    END IF;

    END;
$_$;


ALTER FUNCTION extensions.set_graphql_placeholder() OWNER TO supabase_admin;

--
-- Name: FUNCTION set_graphql_placeholder(); Type: COMMENT; Schema: extensions; Owner: supabase_admin
--

COMMENT ON FUNCTION extensions.set_graphql_placeholder() IS 'Reintroduces placeholder function for graphql_public.graphql';


--
-- Name: get_auth(text); Type: FUNCTION; Schema: pgbouncer; Owner: postgres
--

CREATE FUNCTION pgbouncer.get_auth(p_usename text) RETURNS TABLE(username text, password text)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    RAISE WARNING 'PgBouncer auth request: %', p_usename;

    RETURN QUERY
    SELECT usename::TEXT, passwd::TEXT FROM pg_catalog.pg_shadow
    WHERE usename = p_usename;
END;
$$;


ALTER FUNCTION pgbouncer.get_auth(p_usename text) OWNER TO postgres;

--
-- Name: check_duplicate_downloaded_song(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.check_duplicate_downloaded_song() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    IF EXISTS (
        SELECT 1
        FROM downloaded_song
        WHERE id_user = NEW.id_user
        AND id_song = NEW.id_song
    ) THEN
        RAISE EXCEPTION 'Lagu sudah diunduh sebelumnya!';
    END IF;
    RETURN NEW;
END;
$$;


ALTER FUNCTION public.check_duplicate_downloaded_song() OWNER TO postgres;

--
-- Name: update_album_details(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.update_album_details() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    -- Perbarui jumlah_lagu dan total_durasi di album berdasarkan id_album
    UPDATE album
    SET jumlah_lagu = (
        SELECT COUNT(*)
        FROM song
        WHERE id_album = COALESCE(NEW.id_album, OLD.id_album)
    ),
    total_durasi = (
        SELECT COALESCE(SUM(k.durasi), 0)
        FROM song s
        JOIN konten k ON s.id_konten = k.id
        WHERE s.id_album = COALESCE(NEW.id_album, OLD.id_album)
    )
    WHERE id = COALESCE(NEW.id_album, OLD.id_album);

    RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_album_details() OWNER TO postgres;

--
-- Name: update_podcast_duration(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.update_podcast_duration() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    -- Update the total duration of the podcast
    UPDATE konten
    SET durasi = COALESCE((SELECT SUM(durasi) FROM episode WHERE id_konten_podcast = COALESCE(NEW.id_konten_podcast, OLD.id_konten_podcast)), 0)
    WHERE id = COALESCE(NEW.id_konten_podcast, OLD.id_konten_podcast);

    RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_podcast_duration() OWNER TO postgres;

--
-- Name: update_total_download(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.update_total_download() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    IF TG_OP = 'INSERT' THEN
        UPDATE song
        SET total_download = total_download + 1
        WHERE id_song = NEW.id_song;
    ELSIF TG_OP = 'DELETE' THEN
        UPDATE song
        SET total_download = total_download - 1
        WHERE id_song = OLD.id_song;
    END IF;
    RETURN NULL;
END;
$$;


ALTER FUNCTION public.update_total_download() OWNER TO postgres;

--
-- Name: update_total_durasi_playlist(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.update_total_durasi_playlist() RETURNS trigger
    LANGUAGE plpgsql
    AS $$BEGIN
    -- Perbarui total_durasi di user_playlist berdasarkan id_playlist
    UPDATE user_playlist
    SET total_durasi = (
        SELECT COALESCE(SUM(k.durasi), 0)
        FROM playlist_song ps
        JOIN song s ON ps.id_song = s.id_konten
        JOIN konten k ON s.id_konten = k.id
        WHERE ps.id_playlist = COALESCE(NEW.id_playlist, OLD.id_playlist)
    ),
     jumlah_lagu = (
        SELECT COUNT(ps.id_song)
        FROM playlist_song ps
        WHERE ps.id_playlist = COALESCE(NEW.id_playlist, OLD.id_playlist)
    )
    WHERE id_playlist = COALESCE(NEW.id_playlist, OLD.id_playlist);

    RETURN NEW;
END;$$;


ALTER FUNCTION public.update_total_durasi_playlist() OWNER TO postgres;

--
-- Name: update_year(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.update_year() RETURNS trigger
    LANGUAGE plpgsql
    AS $$BEGIN
    -- Update the "tahun" field based on the "tanggal_dibuat" field
    NEW.tahun := EXTRACT(YEAR FROM NEW.tanggal_rilis);
    RETURN NEW;
END;$$;


ALTER FUNCTION public.update_year() OWNER TO postgres;

--
-- Name: apply_rls(jsonb, integer); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer DEFAULT (1024 * 1024)) RETURNS SETOF realtime.wal_rls
    LANGUAGE plpgsql
    AS $$
    declare
        -- Regclass of the table e.g. public.notes
        entity_ regclass = (quote_ident(wal ->> 'schema') || '.' || quote_ident(wal ->> 'table'))::regclass;

        -- I, U, D, T: insert, update ...
        action realtime.action = (
            case wal ->> 'action'
                when 'I' then 'INSERT'
                when 'U' then 'UPDATE'
                when 'D' then 'DELETE'
                else 'ERROR'
            end
        );

        -- Is row level security enabled for the table
        is_rls_enabled bool = relrowsecurity from pg_class where oid = entity_;

        subscriptions realtime.subscription[] = array_agg(subs)
            from
                realtime.subscription subs
            where
                subs.entity = entity_;

        -- Subscription vars
        roles regrole[] = array_agg(distinct us.claims_role)
            from
                unnest(subscriptions) us;

        working_role regrole;
        claimed_role regrole;
        claims jsonb;

        subscription_id uuid;
        subscription_has_access bool;
        visible_to_subscription_ids uuid[] = '{}';

        -- structured info for wal's columns
        columns realtime.wal_column[];
        -- previous identity values for update/delete
        old_columns realtime.wal_column[];

        error_record_exceeds_max_size boolean = octet_length(wal::text) > max_record_bytes;

        -- Primary jsonb output for record
        output jsonb;

    begin
        perform set_config('role', null, true);

        columns =
            array_agg(
                (
                    x->>'name',
                    x->>'type',
                    x->>'typeoid',
                    realtime.cast(
                        (x->'value') #>> '{}',
                        coalesce(
                            (x->>'typeoid')::regtype, -- null when wal2json version <= 2.4
                            (x->>'type')::regtype
                        )
                    ),
                    (pks ->> 'name') is not null,
                    true
                )::realtime.wal_column
            )
            from
                jsonb_array_elements(wal -> 'columns') x
                left join jsonb_array_elements(wal -> 'pk') pks
                    on (x ->> 'name') = (pks ->> 'name');

        old_columns =
            array_agg(
                (
                    x->>'name',
                    x->>'type',
                    x->>'typeoid',
                    realtime.cast(
                        (x->'value') #>> '{}',
                        coalesce(
                            (x->>'typeoid')::regtype, -- null when wal2json version <= 2.4
                            (x->>'type')::regtype
                        )
                    ),
                    (pks ->> 'name') is not null,
                    true
                )::realtime.wal_column
            )
            from
                jsonb_array_elements(wal -> 'identity') x
                left join jsonb_array_elements(wal -> 'pk') pks
                    on (x ->> 'name') = (pks ->> 'name');

        for working_role in select * from unnest(roles) loop

            -- Update `is_selectable` for columns and old_columns
            columns =
                array_agg(
                    (
                        c.name,
                        c.type_name,
                        c.type_oid,
                        c.value,
                        c.is_pkey,
                        pg_catalog.has_column_privilege(working_role, entity_, c.name, 'SELECT')
                    )::realtime.wal_column
                )
                from
                    unnest(columns) c;

            old_columns =
                    array_agg(
                        (
                            c.name,
                            c.type_name,
                            c.type_oid,
                            c.value,
                            c.is_pkey,
                            pg_catalog.has_column_privilege(working_role, entity_, c.name, 'SELECT')
                        )::realtime.wal_column
                    )
                    from
                        unnest(old_columns) c;

            if action <> 'DELETE' and count(1) = 0 from unnest(columns) c where c.is_pkey then
                return next (
                    jsonb_build_object(
                        'schema', wal ->> 'schema',
                        'table', wal ->> 'table',
                        'type', action
                    ),
                    is_rls_enabled,
                    -- subscriptions is already filtered by entity
                    (select array_agg(s.subscription_id) from unnest(subscriptions) as s where claims_role = working_role),
                    array['Error 400: Bad Request, no primary key']
                )::realtime.wal_rls;

            -- The claims role does not have SELECT permission to the primary key of entity
            elsif action <> 'DELETE' and sum(c.is_selectable::int) <> count(1) from unnest(columns) c where c.is_pkey then
                return next (
                    jsonb_build_object(
                        'schema', wal ->> 'schema',
                        'table', wal ->> 'table',
                        'type', action
                    ),
                    is_rls_enabled,
                    (select array_agg(s.subscription_id) from unnest(subscriptions) as s where claims_role = working_role),
                    array['Error 401: Unauthorized']
                )::realtime.wal_rls;

            else
                output = jsonb_build_object(
                    'schema', wal ->> 'schema',
                    'table', wal ->> 'table',
                    'type', action,
                    'commit_timestamp', to_char(
                        ((wal ->> 'timestamp')::timestamptz at time zone 'utc'),
                        'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"'
                    ),
                    'columns', (
                        select
                            jsonb_agg(
                                jsonb_build_object(
                                    'name', pa.attname,
                                    'type', pt.typname
                                )
                                order by pa.attnum asc
                            )
                        from
                            pg_attribute pa
                            join pg_type pt
                                on pa.atttypid = pt.oid
                        where
                            attrelid = entity_
                            and attnum > 0
                            and pg_catalog.has_column_privilege(working_role, entity_, pa.attname, 'SELECT')
                    )
                )
                -- Add "record" key for insert and update
                || case
                    when action in ('INSERT', 'UPDATE') then
                        jsonb_build_object(
                            'record',
                            (
                                select
                                    jsonb_object_agg(
                                        -- if unchanged toast, get column name and value from old record
                                        coalesce((c).name, (oc).name),
                                        case
                                            when (c).name is null then (oc).value
                                            else (c).value
                                        end
                                    )
                                from
                                    unnest(columns) c
                                    full outer join unnest(old_columns) oc
                                        on (c).name = (oc).name
                                where
                                    coalesce((c).is_selectable, (oc).is_selectable)
                                    and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                            )
                        )
                    else '{}'::jsonb
                end
                -- Add "old_record" key for update and delete
                || case
                    when action = 'UPDATE' then
                        jsonb_build_object(
                                'old_record',
                                (
                                    select jsonb_object_agg((c).name, (c).value)
                                    from unnest(old_columns) c
                                    where
                                        (c).is_selectable
                                        and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                                )
                            )
                    when action = 'DELETE' then
                        jsonb_build_object(
                            'old_record',
                            (
                                select jsonb_object_agg((c).name, (c).value)
                                from unnest(old_columns) c
                                where
                                    (c).is_selectable
                                    and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                                    and ( not is_rls_enabled or (c).is_pkey ) -- if RLS enabled, we can't secure deletes so filter to pkey
                            )
                        )
                    else '{}'::jsonb
                end;

                -- Create the prepared statement
                if is_rls_enabled and action <> 'DELETE' then
                    if (select 1 from pg_prepared_statements where name = 'walrus_rls_stmt' limit 1) > 0 then
                        deallocate walrus_rls_stmt;
                    end if;
                    execute realtime.build_prepared_statement_sql('walrus_rls_stmt', entity_, columns);
                end if;

                visible_to_subscription_ids = '{}';

                for subscription_id, claims in (
                        select
                            subs.subscription_id,
                            subs.claims
                        from
                            unnest(subscriptions) subs
                        where
                            subs.entity = entity_
                            and subs.claims_role = working_role
                            and (
                                realtime.is_visible_through_filters(columns, subs.filters)
                                or action = 'DELETE'
                            )
                ) loop

                    if not is_rls_enabled or action = 'DELETE' then
                        visible_to_subscription_ids = visible_to_subscription_ids || subscription_id;
                    else
                        -- Check if RLS allows the role to see the record
                        perform
                            set_config('role', working_role::text, true),
                            set_config('request.jwt.claims', claims::text, true);

                        execute 'execute walrus_rls_stmt' into subscription_has_access;

                        if subscription_has_access then
                            visible_to_subscription_ids = visible_to_subscription_ids || subscription_id;
                        end if;
                    end if;
                end loop;

                perform set_config('role', null, true);

                return next (
                    output,
                    is_rls_enabled,
                    visible_to_subscription_ids,
                    case
                        when error_record_exceeds_max_size then array['Error 413: Payload Too Large']
                        else '{}'
                    end
                )::realtime.wal_rls;

            end if;
        end loop;

        perform set_config('role', null, true);
    end;
    $$;


ALTER FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) OWNER TO supabase_admin;

--
-- Name: build_prepared_statement_sql(text, regclass, realtime.wal_column[]); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) RETURNS text
    LANGUAGE sql
    AS $$
      /*
      Builds a sql string that, if executed, creates a prepared statement to
      tests retrive a row from *entity* by its primary key columns.
      Example
          select realtime.build_prepared_statement_sql('public.notes', '{"id"}'::text[], '{"bigint"}'::text[])
      */
          select
      'prepare ' || prepared_statement_name || ' as
          select
              exists(
                  select
                      1
                  from
                      ' || entity || '
                  where
                      ' || string_agg(quote_ident(pkc.name) || '=' || quote_nullable(pkc.value #>> '{}') , ' and ') || '
              )'
          from
              unnest(columns) pkc
          where
              pkc.is_pkey
          group by
              entity
      $$;


ALTER FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) OWNER TO supabase_admin;

--
-- Name: cast(text, regtype); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime."cast"(val text, type_ regtype) RETURNS jsonb
    LANGUAGE plpgsql IMMUTABLE
    AS $$
    declare
      res jsonb;
    begin
      execute format('select to_jsonb(%L::'|| type_::text || ')', val)  into res;
      return res;
    end
    $$;


ALTER FUNCTION realtime."cast"(val text, type_ regtype) OWNER TO supabase_admin;

--
-- Name: check_equality_op(realtime.equality_op, regtype, text, text); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) RETURNS boolean
    LANGUAGE plpgsql IMMUTABLE
    AS $$
      /*
      Casts *val_1* and *val_2* as type *type_* and check the *op* condition for truthiness
      */
      declare
          op_symbol text = (
              case
                  when op = 'eq' then '='
                  when op = 'neq' then '!='
                  when op = 'lt' then '<'
                  when op = 'lte' then '<='
                  when op = 'gt' then '>'
                  when op = 'gte' then '>='
                  when op = 'in' then '= any'
                  else 'UNKNOWN OP'
              end
          );
          res boolean;
      begin
          execute format(
              'select %L::'|| type_::text || ' ' || op_symbol
              || ' ( %L::'
              || (
                  case
                      when op = 'in' then type_::text || '[]'
                      else type_::text end
              )
              || ')', val_1, val_2) into res;
          return res;
      end;
      $$;


ALTER FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) OWNER TO supabase_admin;

--
-- Name: is_visible_through_filters(realtime.wal_column[], realtime.user_defined_filter[]); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$
    /*
    Should the record be visible (true) or filtered out (false) after *filters* are applied
    */
        select
            -- Default to allowed when no filters present
            $2 is null -- no filters. this should not happen because subscriptions has a default
            or array_length($2, 1) is null -- array length of an empty array is null
            or bool_and(
                coalesce(
                    realtime.check_equality_op(
                        op:=f.op,
                        type_:=coalesce(
                            col.type_oid::regtype, -- null when wal2json version <= 2.4
                            col.type_name::regtype
                        ),
                        -- cast jsonb to text
                        val_1:=col.value #>> '{}',
                        val_2:=f.value
                    ),
                    false -- if null, filter does not match
                )
            )
        from
            unnest(filters) f
            join unnest(columns) col
                on f.column_name = col.name;
    $_$;


ALTER FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) OWNER TO supabase_admin;

--
-- Name: list_changes(name, name, integer, integer); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) RETURNS SETOF realtime.wal_rls
    LANGUAGE sql
    SET log_min_messages TO 'fatal'
    AS $$
      with pub as (
        select
          concat_ws(
            ',',
            case when bool_or(pubinsert) then 'insert' else null end,
            case when bool_or(pubupdate) then 'update' else null end,
            case when bool_or(pubdelete) then 'delete' else null end
          ) as w2j_actions,
          coalesce(
            string_agg(
              realtime.quote_wal2json(format('%I.%I', schemaname, tablename)::regclass),
              ','
            ) filter (where ppt.tablename is not null and ppt.tablename not like '% %'),
            ''
          ) w2j_add_tables
        from
          pg_publication pp
          left join pg_publication_tables ppt
            on pp.pubname = ppt.pubname
        where
          pp.pubname = publication
        group by
          pp.pubname
        limit 1
      ),
      w2j as (
        select
          x.*, pub.w2j_add_tables
        from
          pub,
          pg_logical_slot_get_changes(
            slot_name, null, max_changes,
            'include-pk', 'true',
            'include-transaction', 'false',
            'include-timestamp', 'true',
            'include-type-oids', 'true',
            'format-version', '2',
            'actions', pub.w2j_actions,
            'add-tables', pub.w2j_add_tables
          ) x
      )
      select
        xyz.wal,
        xyz.is_rls_enabled,
        xyz.subscription_ids,
        xyz.errors
      from
        w2j,
        realtime.apply_rls(
          wal := w2j.data::jsonb,
          max_record_bytes := max_record_bytes
        ) xyz(wal, is_rls_enabled, subscription_ids, errors)
      where
        w2j.w2j_add_tables <> ''
        and xyz.subscription_ids[1] is not null
    $$;


ALTER FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) OWNER TO supabase_admin;

--
-- Name: quote_wal2json(regclass); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.quote_wal2json(entity regclass) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $$
      select
        (
          select string_agg('' || ch,'')
          from unnest(string_to_array(nsp.nspname::text, null)) with ordinality x(ch, idx)
          where
            not (x.idx = 1 and x.ch = '"')
            and not (
              x.idx = array_length(string_to_array(nsp.nspname::text, null), 1)
              and x.ch = '"'
            )
        )
        || '.'
        || (
          select string_agg('' || ch,'')
          from unnest(string_to_array(pc.relname::text, null)) with ordinality x(ch, idx)
          where
            not (x.idx = 1 and x.ch = '"')
            and not (
              x.idx = array_length(string_to_array(nsp.nspname::text, null), 1)
              and x.ch = '"'
            )
          )
      from
        pg_class pc
        join pg_namespace nsp
          on pc.relnamespace = nsp.oid
      where
        pc.oid = entity
    $$;


ALTER FUNCTION realtime.quote_wal2json(entity regclass) OWNER TO supabase_admin;

--
-- Name: subscription_check_filters(); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.subscription_check_filters() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    /*
    Validates that the user defined filters for a subscription:
    - refer to valid columns that the claimed role may access
    - values are coercable to the correct column type
    */
    declare
        col_names text[] = coalesce(
                array_agg(c.column_name order by c.ordinal_position),
                '{}'::text[]
            )
            from
                information_schema.columns c
            where
                format('%I.%I', c.table_schema, c.table_name)::regclass = new.entity
                and pg_catalog.has_column_privilege(
                    (new.claims ->> 'role'),
                    format('%I.%I', c.table_schema, c.table_name)::regclass,
                    c.column_name,
                    'SELECT'
                );
        filter realtime.user_defined_filter;
        col_type regtype;

        in_val jsonb;
    begin
        for filter in select * from unnest(new.filters) loop
            -- Filtered column is valid
            if not filter.column_name = any(col_names) then
                raise exception 'invalid column for filter %', filter.column_name;
            end if;

            -- Type is sanitized and safe for string interpolation
            col_type = (
                select atttypid::regtype
                from pg_catalog.pg_attribute
                where attrelid = new.entity
                      and attname = filter.column_name
            );
            if col_type is null then
                raise exception 'failed to lookup type for column %', filter.column_name;
            end if;

            -- Set maximum number of entries for in filter
            if filter.op = 'in'::realtime.equality_op then
                in_val = realtime.cast(filter.value, (col_type::text || '[]')::regtype);
                if coalesce(jsonb_array_length(in_val), 0) > 100 then
                    raise exception 'too many values for `in` filter. Maximum 100';
                end if;
            else
                -- raises an exception if value is not coercable to type
                perform realtime.cast(filter.value, col_type);
            end if;

        end loop;

        -- Apply consistent order to filters so the unique constraint on
        -- (subscription_id, entity, filters) can't be tricked by a different filter order
        new.filters = coalesce(
            array_agg(f order by f.column_name, f.op, f.value),
            '{}'
        ) from unnest(new.filters) f;

        return new;
    end;
    $$;


ALTER FUNCTION realtime.subscription_check_filters() OWNER TO supabase_admin;

--
-- Name: to_regrole(text); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.to_regrole(role_name text) RETURNS regrole
    LANGUAGE sql IMMUTABLE
    AS $$ select role_name::regrole $$;


ALTER FUNCTION realtime.to_regrole(role_name text) OWNER TO supabase_admin;

--
-- Name: topic(); Type: FUNCTION; Schema: realtime; Owner: supabase_realtime_admin
--

CREATE FUNCTION realtime.topic() RETURNS text
    LANGUAGE sql STABLE
    AS $$
select nullif(current_setting('realtime.topic', true), '')::text;
$$;


ALTER FUNCTION realtime.topic() OWNER TO supabase_realtime_admin;

--
-- Name: can_insert_object(text, text, uuid, jsonb); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.can_insert_object(bucketid text, name text, owner uuid, metadata jsonb) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  INSERT INTO "storage"."objects" ("bucket_id", "name", "owner", "metadata") VALUES (bucketid, name, owner, metadata);
  -- hack to rollback the successful insert
  RAISE sqlstate 'PT200' using
  message = 'ROLLBACK',
  detail = 'rollback successful insert';
END
$$;


ALTER FUNCTION storage.can_insert_object(bucketid text, name text, owner uuid, metadata jsonb) OWNER TO supabase_storage_admin;

--
-- Name: extension(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.extension(name text) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
_filename text;
BEGIN
	select string_to_array(name, '/') into _parts;
	select _parts[array_length(_parts,1)] into _filename;
	-- @todo return the last part instead of 2
	return reverse(split_part(reverse(_filename), '.', 1));
END
$$;


ALTER FUNCTION storage.extension(name text) OWNER TO supabase_storage_admin;

--
-- Name: filename(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.filename(name text) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
BEGIN
	select string_to_array(name, '/') into _parts;
	return _parts[array_length(_parts,1)];
END
$$;


ALTER FUNCTION storage.filename(name text) OWNER TO supabase_storage_admin;

--
-- Name: foldername(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.foldername(name text) RETURNS text[]
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
BEGIN
	select string_to_array(name, '/') into _parts;
	return _parts[1:array_length(_parts,1)-1];
END
$$;


ALTER FUNCTION storage.foldername(name text) OWNER TO supabase_storage_admin;

--
-- Name: get_size_by_bucket(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.get_size_by_bucket() RETURNS TABLE(size bigint, bucket_id text)
    LANGUAGE plpgsql
    AS $$
BEGIN
    return query
        select sum((metadata->>'size')::int) as size, obj.bucket_id
        from "storage".objects as obj
        group by obj.bucket_id;
END
$$;


ALTER FUNCTION storage.get_size_by_bucket() OWNER TO supabase_storage_admin;

--
-- Name: list_multipart_uploads_with_delimiter(text, text, text, integer, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.list_multipart_uploads_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer DEFAULT 100, next_key_token text DEFAULT ''::text, next_upload_token text DEFAULT ''::text) RETURNS TABLE(key text, id text, created_at timestamp with time zone)
    LANGUAGE plpgsql
    AS $_$
BEGIN
    RETURN QUERY EXECUTE
        'SELECT DISTINCT ON(key COLLATE "C") * from (
            SELECT
                CASE
                    WHEN position($2 IN substring(key from length($1) + 1)) > 0 THEN
                        substring(key from 1 for length($1) + position($2 IN substring(key from length($1) + 1)))
                    ELSE
                        key
                END AS key, id, created_at
            FROM
                storage.s3_multipart_uploads
            WHERE
                bucket_id = $5 AND
                key ILIKE $1 || ''%'' AND
                CASE
                    WHEN $4 != '''' AND $6 = '''' THEN
                        CASE
                            WHEN position($2 IN substring(key from length($1) + 1)) > 0 THEN
                                substring(key from 1 for length($1) + position($2 IN substring(key from length($1) + 1))) COLLATE "C" > $4
                            ELSE
                                key COLLATE "C" > $4
                            END
                    ELSE
                        true
                END AND
                CASE
                    WHEN $6 != '''' THEN
                        id COLLATE "C" > $6
                    ELSE
                        true
                    END
            ORDER BY
                key COLLATE "C" ASC, created_at ASC) as e order by key COLLATE "C" LIMIT $3'
        USING prefix_param, delimiter_param, max_keys, next_key_token, bucket_id, next_upload_token;
END;
$_$;


ALTER FUNCTION storage.list_multipart_uploads_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, next_key_token text, next_upload_token text) OWNER TO supabase_storage_admin;

--
-- Name: list_objects_with_delimiter(text, text, text, integer, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.list_objects_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer DEFAULT 100, start_after text DEFAULT ''::text, next_token text DEFAULT ''::text) RETURNS TABLE(name text, id uuid, metadata jsonb, updated_at timestamp with time zone)
    LANGUAGE plpgsql
    AS $_$
BEGIN
    RETURN QUERY EXECUTE
        'SELECT DISTINCT ON(name COLLATE "C") * from (
            SELECT
                CASE
                    WHEN position($2 IN substring(name from length($1) + 1)) > 0 THEN
                        substring(name from 1 for length($1) + position($2 IN substring(name from length($1) + 1)))
                    ELSE
                        name
                END AS name, id, metadata, updated_at
            FROM
                storage.objects
            WHERE
                bucket_id = $5 AND
                name ILIKE $1 || ''%'' AND
                CASE
                    WHEN $6 != '''' THEN
                    name COLLATE "C" > $6
                ELSE true END
                AND CASE
                    WHEN $4 != '''' THEN
                        CASE
                            WHEN position($2 IN substring(name from length($1) + 1)) > 0 THEN
                                substring(name from 1 for length($1) + position($2 IN substring(name from length($1) + 1))) COLLATE "C" > $4
                            ELSE
                                name COLLATE "C" > $4
                            END
                    ELSE
                        true
                END
            ORDER BY
                name COLLATE "C" ASC) as e order by name COLLATE "C" LIMIT $3'
        USING prefix_param, delimiter_param, max_keys, next_token, bucket_id, start_after;
END;
$_$;


ALTER FUNCTION storage.list_objects_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, start_after text, next_token text) OWNER TO supabase_storage_admin;

--
-- Name: search(text, text, integer, integer, integer, text, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.search(prefix text, bucketname text, limits integer DEFAULT 100, levels integer DEFAULT 1, offsets integer DEFAULT 0, search text DEFAULT ''::text, sortcolumn text DEFAULT 'name'::text, sortorder text DEFAULT 'asc'::text) RETURNS TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)
    LANGUAGE plpgsql STABLE
    AS $_$
declare
  v_order_by text;
  v_sort_order text;
begin
  case
    when sortcolumn = 'name' then
      v_order_by = 'name';
    when sortcolumn = 'updated_at' then
      v_order_by = 'updated_at';
    when sortcolumn = 'created_at' then
      v_order_by = 'created_at';
    when sortcolumn = 'last_accessed_at' then
      v_order_by = 'last_accessed_at';
    else
      v_order_by = 'name';
  end case;

  case
    when sortorder = 'asc' then
      v_sort_order = 'asc';
    when sortorder = 'desc' then
      v_sort_order = 'desc';
    else
      v_sort_order = 'asc';
  end case;

  v_order_by = v_order_by || ' ' || v_sort_order;

  return query execute
    'with folders as (
       select path_tokens[$1] as folder
       from storage.objects
         where objects.name ilike $2 || $3 || ''%''
           and bucket_id = $4
           and array_length(objects.path_tokens, 1) <> $1
       group by folder
       order by folder ' || v_sort_order || '
     )
     (select folder as "name",
            null as id,
            null as updated_at,
            null as created_at,
            null as last_accessed_at,
            null as metadata from folders)
     union all
     (select path_tokens[$1] as "name",
            id,
            updated_at,
            created_at,
            last_accessed_at,
            metadata
     from storage.objects
     where objects.name ilike $2 || $3 || ''%''
       and bucket_id = $4
       and array_length(objects.path_tokens, 1) = $1
     order by ' || v_order_by || ')
     limit $5
     offset $6' using levels, prefix, search, bucketname, limits, offsets;
end;
$_$;


ALTER FUNCTION storage.search(prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text) OWNER TO supabase_storage_admin;

--
-- Name: update_updated_at_column(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.update_updated_at_column() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW; 
END;
$$;


ALTER FUNCTION storage.update_updated_at_column() OWNER TO supabase_storage_admin;

--
-- Name: secrets_encrypt_secret_secret(); Type: FUNCTION; Schema: vault; Owner: supabase_admin
--

CREATE FUNCTION vault.secrets_encrypt_secret_secret() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
		BEGIN
		        new.secret = CASE WHEN new.secret IS NULL THEN NULL ELSE
			CASE WHEN new.key_id IS NULL THEN NULL ELSE pg_catalog.encode(
			  pgsodium.crypto_aead_det_encrypt(
				pg_catalog.convert_to(new.secret, 'utf8'),
				pg_catalog.convert_to((new.id::text || new.description::text || new.created_at::text || new.updated_at::text)::text, 'utf8'),
				new.key_id::uuid,
				new.nonce
			  ),
				'base64') END END;
		RETURN new;
		END;
		$$;


ALTER FUNCTION vault.secrets_encrypt_secret_secret() OWNER TO supabase_admin;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: audit_log_entries; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.audit_log_entries (
    instance_id uuid,
    id uuid NOT NULL,
    payload json,
    created_at timestamp with time zone,
    ip_address character varying(64) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE auth.audit_log_entries OWNER TO supabase_auth_admin;

--
-- Name: TABLE audit_log_entries; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.audit_log_entries IS 'Auth: Audit trail for user actions.';


--
-- Name: flow_state; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.flow_state (
    id uuid NOT NULL,
    user_id uuid,
    auth_code text NOT NULL,
    code_challenge_method auth.code_challenge_method NOT NULL,
    code_challenge text NOT NULL,
    provider_type text NOT NULL,
    provider_access_token text,
    provider_refresh_token text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    authentication_method text NOT NULL,
    auth_code_issued_at timestamp with time zone
);


ALTER TABLE auth.flow_state OWNER TO supabase_auth_admin;

--
-- Name: TABLE flow_state; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.flow_state IS 'stores metadata for pkce logins';


--
-- Name: identities; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.identities (
    provider_id text NOT NULL,
    user_id uuid NOT NULL,
    identity_data jsonb NOT NULL,
    provider text NOT NULL,
    last_sign_in_at timestamp with time zone,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    email text GENERATED ALWAYS AS (lower((identity_data ->> 'email'::text))) STORED,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE auth.identities OWNER TO supabase_auth_admin;

--
-- Name: TABLE identities; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.identities IS 'Auth: Stores identities associated to a user.';


--
-- Name: COLUMN identities.email; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.identities.email IS 'Auth: Email is a generated column that references the optional email property in the identity_data';


--
-- Name: instances; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.instances (
    id uuid NOT NULL,
    uuid uuid,
    raw_base_config text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone
);


ALTER TABLE auth.instances OWNER TO supabase_auth_admin;

--
-- Name: TABLE instances; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.instances IS 'Auth: Manages users across multiple sites.';


--
-- Name: mfa_amr_claims; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_amr_claims (
    session_id uuid NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    authentication_method text NOT NULL,
    id uuid NOT NULL
);


ALTER TABLE auth.mfa_amr_claims OWNER TO supabase_auth_admin;

--
-- Name: TABLE mfa_amr_claims; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_amr_claims IS 'auth: stores authenticator method reference claims for multi factor authentication';


--
-- Name: mfa_challenges; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_challenges (
    id uuid NOT NULL,
    factor_id uuid NOT NULL,
    created_at timestamp with time zone NOT NULL,
    verified_at timestamp with time zone,
    ip_address inet NOT NULL
);


ALTER TABLE auth.mfa_challenges OWNER TO supabase_auth_admin;

--
-- Name: TABLE mfa_challenges; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_challenges IS 'auth: stores metadata about challenge requests made';


--
-- Name: mfa_factors; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_factors (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    friendly_name text,
    factor_type auth.factor_type NOT NULL,
    status auth.factor_status NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    secret text
);


ALTER TABLE auth.mfa_factors OWNER TO supabase_auth_admin;

--
-- Name: TABLE mfa_factors; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_factors IS 'auth: stores metadata about factors';


--
-- Name: one_time_tokens; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.one_time_tokens (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    token_type auth.one_time_token_type NOT NULL,
    token_hash text NOT NULL,
    relates_to text NOT NULL,
    created_at timestamp without time zone DEFAULT now() NOT NULL,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    CONSTRAINT one_time_tokens_token_hash_check CHECK ((char_length(token_hash) > 0))
);


ALTER TABLE auth.one_time_tokens OWNER TO supabase_auth_admin;

--
-- Name: refresh_tokens; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.refresh_tokens (
    instance_id uuid,
    id bigint NOT NULL,
    token character varying(255),
    user_id character varying(255),
    revoked boolean,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    parent character varying(255),
    session_id uuid
);


ALTER TABLE auth.refresh_tokens OWNER TO supabase_auth_admin;

--
-- Name: TABLE refresh_tokens; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.refresh_tokens IS 'Auth: Store of tokens used to refresh JWT tokens once they expire.';


--
-- Name: refresh_tokens_id_seq; Type: SEQUENCE; Schema: auth; Owner: supabase_auth_admin
--

CREATE SEQUENCE auth.refresh_tokens_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE auth.refresh_tokens_id_seq OWNER TO supabase_auth_admin;

--
-- Name: refresh_tokens_id_seq; Type: SEQUENCE OWNED BY; Schema: auth; Owner: supabase_auth_admin
--

ALTER SEQUENCE auth.refresh_tokens_id_seq OWNED BY auth.refresh_tokens.id;


--
-- Name: saml_providers; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.saml_providers (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    entity_id text NOT NULL,
    metadata_xml text NOT NULL,
    metadata_url text,
    attribute_mapping jsonb,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    name_id_format text,
    CONSTRAINT "entity_id not empty" CHECK ((char_length(entity_id) > 0)),
    CONSTRAINT "metadata_url not empty" CHECK (((metadata_url = NULL::text) OR (char_length(metadata_url) > 0))),
    CONSTRAINT "metadata_xml not empty" CHECK ((char_length(metadata_xml) > 0))
);


ALTER TABLE auth.saml_providers OWNER TO supabase_auth_admin;

--
-- Name: TABLE saml_providers; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.saml_providers IS 'Auth: Manages SAML Identity Provider connections.';


--
-- Name: saml_relay_states; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.saml_relay_states (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    request_id text NOT NULL,
    for_email text,
    redirect_to text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    flow_state_id uuid,
    CONSTRAINT "request_id not empty" CHECK ((char_length(request_id) > 0))
);


ALTER TABLE auth.saml_relay_states OWNER TO supabase_auth_admin;

--
-- Name: TABLE saml_relay_states; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.saml_relay_states IS 'Auth: Contains SAML Relay State information for each Service Provider initiated login.';


--
-- Name: schema_migrations; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.schema_migrations (
    version character varying(255) NOT NULL
);


ALTER TABLE auth.schema_migrations OWNER TO supabase_auth_admin;

--
-- Name: TABLE schema_migrations; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.schema_migrations IS 'Auth: Manages updates to the auth system.';


--
-- Name: sessions; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sessions (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    factor_id uuid,
    aal auth.aal_level,
    not_after timestamp with time zone,
    refreshed_at timestamp without time zone,
    user_agent text,
    ip inet,
    tag text
);


ALTER TABLE auth.sessions OWNER TO supabase_auth_admin;

--
-- Name: TABLE sessions; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sessions IS 'Auth: Stores session data associated to a user.';


--
-- Name: COLUMN sessions.not_after; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.sessions.not_after IS 'Auth: Not after is a nullable column that contains a timestamp after which the session should be regarded as expired.';


--
-- Name: sso_domains; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sso_domains (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    domain text NOT NULL,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    CONSTRAINT "domain not empty" CHECK ((char_length(domain) > 0))
);


ALTER TABLE auth.sso_domains OWNER TO supabase_auth_admin;

--
-- Name: TABLE sso_domains; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sso_domains IS 'Auth: Manages SSO email address domain mapping to an SSO Identity Provider.';


--
-- Name: sso_providers; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sso_providers (
    id uuid NOT NULL,
    resource_id text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    CONSTRAINT "resource_id not empty" CHECK (((resource_id = NULL::text) OR (char_length(resource_id) > 0)))
);


ALTER TABLE auth.sso_providers OWNER TO supabase_auth_admin;

--
-- Name: TABLE sso_providers; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sso_providers IS 'Auth: Manages SSO identity provider information; see saml_providers for SAML.';


--
-- Name: COLUMN sso_providers.resource_id; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.sso_providers.resource_id IS 'Auth: Uniquely identifies a SSO provider according to a user-chosen resource ID (case insensitive), useful in infrastructure as code.';


--
-- Name: users; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.users (
    instance_id uuid,
    id uuid NOT NULL,
    aud character varying(255),
    role character varying(255),
    email character varying(255),
    encrypted_password character varying(255),
    email_confirmed_at timestamp with time zone,
    invited_at timestamp with time zone,
    confirmation_token character varying(255),
    confirmation_sent_at timestamp with time zone,
    recovery_token character varying(255),
    recovery_sent_at timestamp with time zone,
    email_change_token_new character varying(255),
    email_change character varying(255),
    email_change_sent_at timestamp with time zone,
    last_sign_in_at timestamp with time zone,
    raw_app_meta_data jsonb,
    raw_user_meta_data jsonb,
    is_super_admin boolean,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    phone text DEFAULT NULL::character varying,
    phone_confirmed_at timestamp with time zone,
    phone_change text DEFAULT ''::character varying,
    phone_change_token character varying(255) DEFAULT ''::character varying,
    phone_change_sent_at timestamp with time zone,
    confirmed_at timestamp with time zone GENERATED ALWAYS AS (LEAST(email_confirmed_at, phone_confirmed_at)) STORED,
    email_change_token_current character varying(255) DEFAULT ''::character varying,
    email_change_confirm_status smallint DEFAULT 0,
    banned_until timestamp with time zone,
    reauthentication_token character varying(255) DEFAULT ''::character varying,
    reauthentication_sent_at timestamp with time zone,
    is_sso_user boolean DEFAULT false NOT NULL,
    deleted_at timestamp with time zone,
    is_anonymous boolean DEFAULT false NOT NULL,
    CONSTRAINT users_email_change_confirm_status_check CHECK (((email_change_confirm_status >= 0) AND (email_change_confirm_status <= 2)))
);


ALTER TABLE auth.users OWNER TO supabase_auth_admin;

--
-- Name: TABLE users; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.users IS 'Auth: Stores user login data within a secure schema.';


--
-- Name: COLUMN users.is_sso_user; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.users.is_sso_user IS 'Auth: Set this column to true when the account comes from SSO. These accounts can have duplicate emails.';


--
-- Name: akun; Type: TABLE; Schema: marmut; Owner: postgres
--

CREATE TABLE marmut.akun (
    email character varying(50) NOT NULL,
    password character varying(50) NOT NULL,
    nama character varying(50) NOT NULL,
    gender integer NOT NULL,
    tempat_lahir character varying(50) NOT NULL,
    tanggal_lahir date NOT NULL,
    is_verified boolean NOT NULL,
    kota_asal character varying(50) NOT NULL,
    CONSTRAINT check_gender CHECK ((gender = ANY (ARRAY[0, 1])))
);


ALTER TABLE marmut.akun OWNER TO postgres;

--
-- Name: akun_play_song; Type: TABLE; Schema: marmut; Owner: postgres
--

CREATE TABLE marmut.akun_play_song (
    email_pemain character varying(50) NOT NULL,
    id_song uuid NOT NULL,
    waktu timestamp without time zone NOT NULL
);


ALTER TABLE marmut.akun_play_song OWNER TO postgres;

--
-- Name: akun_play_user_playlist; Type: TABLE; Schema: marmut; Owner: postgres
--

CREATE TABLE marmut.akun_play_user_playlist (
    email_pemain character varying(50) NOT NULL,
    id_user_playlist uuid NOT NULL,
    email_pembuat character varying(50) NOT NULL,
    waktu timestamp without time zone NOT NULL
);


ALTER TABLE marmut.akun_play_user_playlist OWNER TO postgres;

--
-- Name: album; Type: TABLE; Schema: marmut; Owner: postgres
--

CREATE TABLE marmut.album (
    id uuid NOT NULL,
    judul character varying(100) NOT NULL,
    jumlah_lagu integer DEFAULT 0 NOT NULL,
    id_label uuid,
    total_durasi integer DEFAULT 0 NOT NULL
);


ALTER TABLE marmut.album OWNER TO postgres;

--
-- Name: artist; Type: TABLE; Schema: marmut; Owner: postgres
--

CREATE TABLE marmut.artist (
    id uuid NOT NULL,
    email_akun character varying(50),
    id_pemilik_hak_cipta uuid
);


ALTER TABLE marmut.artist OWNER TO postgres;

--
-- Name: chart; Type: TABLE; Schema: marmut; Owner: postgres
--

CREATE TABLE marmut.chart (
    tipe character varying(50) NOT NULL,
    id_playlist uuid
);


ALTER TABLE marmut.chart OWNER TO postgres;

--
-- Name: downloaded_song; Type: TABLE; Schema: marmut; Owner: postgres
--

CREATE TABLE marmut.downloaded_song (
    id_song uuid NOT NULL,
    email_downloader character varying(50) NOT NULL
);


ALTER TABLE marmut.downloaded_song OWNER TO postgres;

--
-- Name: episode; Type: TABLE; Schema: marmut; Owner: postgres
--

CREATE TABLE marmut.episode (
    id_episode uuid NOT NULL,
    id_konten_podcast uuid,
    judul character varying(100) NOT NULL,
    deskripsi character varying(500) NOT NULL,
    durasi integer NOT NULL,
    tanggal_rilis date NOT NULL
);


ALTER TABLE marmut.episode OWNER TO postgres;

--
-- Name: genre; Type: TABLE; Schema: marmut; Owner: postgres
--

CREATE TABLE marmut.genre (
    id_konten uuid NOT NULL,
    genre character varying(50) NOT NULL
);


ALTER TABLE marmut.genre OWNER TO postgres;

--
-- Name: konten; Type: TABLE; Schema: marmut; Owner: postgres
--

CREATE TABLE marmut.konten (
    id uuid NOT NULL,
    judul character varying(100) NOT NULL,
    tanggal_rilis date NOT NULL,
    tahun integer NOT NULL,
    durasi integer NOT NULL,
    CONSTRAINT check_durasi CHECK ((durasi > 0))
);


ALTER TABLE marmut.konten OWNER TO postgres;

--
-- Name: label; Type: TABLE; Schema: marmut; Owner: postgres
--

CREATE TABLE marmut.label (
    id uuid NOT NULL,
    nama character varying(100) NOT NULL,
    email character varying(50) NOT NULL,
    kontak character varying(50) NOT NULL,
    id_pemilik_hak_cipta uuid
);


ALTER TABLE marmut.label OWNER TO postgres;

--
-- Name: nonpremium; Type: TABLE; Schema: marmut; Owner: postgres
--

CREATE TABLE marmut.nonpremium (
    email character varying(50) NOT NULL
);


ALTER TABLE marmut.nonpremium OWNER TO postgres;

--
-- Name: paket; Type: TABLE; Schema: marmut; Owner: postgres
--

CREATE TABLE marmut.paket (
    jenis character varying(50) NOT NULL,
    harga integer NOT NULL
);


ALTER TABLE marmut.paket OWNER TO postgres;

--
-- Name: pemilik_hak_cipta; Type: TABLE; Schema: marmut; Owner: postgres
--

CREATE TABLE marmut.pemilik_hak_cipta (
    id uuid NOT NULL,
    rate_royalti integer NOT NULL
);


ALTER TABLE marmut.pemilik_hak_cipta OWNER TO postgres;

--
-- Name: playlist; Type: TABLE; Schema: marmut; Owner: postgres
--

CREATE TABLE marmut.playlist (
    id uuid NOT NULL
);


ALTER TABLE marmut.playlist OWNER TO postgres;

--
-- Name: playlist_song; Type: TABLE; Schema: marmut; Owner: postgres
--

CREATE TABLE marmut.playlist_song (
    id_playlist uuid NOT NULL,
    id_song uuid NOT NULL
);


ALTER TABLE marmut.playlist_song OWNER TO postgres;

--
-- Name: podcast; Type: TABLE; Schema: marmut; Owner: postgres
--

CREATE TABLE marmut.podcast (
    id_konten uuid NOT NULL,
    email_podcaster character varying(50)
);


ALTER TABLE marmut.podcast OWNER TO postgres;

--
-- Name: podcaster; Type: TABLE; Schema: marmut; Owner: postgres
--

CREATE TABLE marmut.podcaster (
    email character varying(50) NOT NULL
);


ALTER TABLE marmut.podcaster OWNER TO postgres;

--
-- Name: premium; Type: TABLE; Schema: marmut; Owner: postgres
--

CREATE TABLE marmut.premium (
    email character varying(50) NOT NULL
);


ALTER TABLE marmut.premium OWNER TO postgres;

--
-- Name: royalti; Type: TABLE; Schema: marmut; Owner: postgres
--

CREATE TABLE marmut.royalti (
    id_pemilik_hak_cipta uuid NOT NULL,
    id_song uuid NOT NULL,
    jumlah integer NOT NULL
);


ALTER TABLE marmut.royalti OWNER TO postgres;

--
-- Name: song; Type: TABLE; Schema: marmut; Owner: postgres
--

CREATE TABLE marmut.song (
    id_konten uuid NOT NULL,
    id_artist uuid,
    id_album uuid,
    total_play integer DEFAULT 0 NOT NULL,
    total_download integer DEFAULT 0 NOT NULL
);


ALTER TABLE marmut.song OWNER TO postgres;

--
-- Name: songwriter; Type: TABLE; Schema: marmut; Owner: postgres
--

CREATE TABLE marmut.songwriter (
    id uuid NOT NULL,
    email_akun character varying(50),
    id_pemilik_hak_cipta uuid
);


ALTER TABLE marmut.songwriter OWNER TO postgres;

--
-- Name: songwriter_write_song; Type: TABLE; Schema: marmut; Owner: postgres
--

CREATE TABLE marmut.songwriter_write_song (
    id_songwriter uuid NOT NULL,
    id_song uuid NOT NULL
);


ALTER TABLE marmut.songwriter_write_song OWNER TO postgres;

--
-- Name: transaction; Type: TABLE; Schema: marmut; Owner: postgres
--

CREATE TABLE marmut.transaction (
    id uuid NOT NULL,
    jenis_paket character varying(50) NOT NULL,
    email character varying(50) NOT NULL,
    timestamp_dimulai timestamp without time zone NOT NULL,
    timestamp_berakhir timestamp without time zone NOT NULL,
    metode_bayar character varying(50) NOT NULL,
    nominal integer NOT NULL
);


ALTER TABLE marmut.transaction OWNER TO postgres;

--
-- Name: user_playlist; Type: TABLE; Schema: marmut; Owner: postgres
--

CREATE TABLE marmut.user_playlist (
    email_pembuat character varying(50) NOT NULL,
    id_user_playlist uuid NOT NULL,
    judul character varying(100) NOT NULL,
    deskripsi character varying(500) NOT NULL,
    jumlah_lagu integer NOT NULL,
    tanggal_dibuat date NOT NULL,
    id_playlist uuid,
    total_durasi integer DEFAULT 0 NOT NULL
);


ALTER TABLE marmut.user_playlist OWNER TO postgres;

--
-- Name: akun; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.akun (
    email character varying(50) NOT NULL,
    password character varying(50) NOT NULL,
    nama character varying(50) NOT NULL,
    gender integer NOT NULL,
    tempat_lahir character varying(50) NOT NULL,
    tanggal_lahir date NOT NULL,
    is_verified boolean NOT NULL,
    kota_asal character varying(50) NOT NULL,
    CONSTRAINT check_gender CHECK ((gender = ANY (ARRAY[0, 1])))
);


ALTER TABLE public.akun OWNER TO postgres;

--
-- Name: akun_play_song; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.akun_play_song (
    email_pemain character varying(50) NOT NULL,
    id_song uuid NOT NULL,
    waktu timestamp without time zone NOT NULL
);


ALTER TABLE public.akun_play_song OWNER TO postgres;

--
-- Name: akun_play_user_playlist; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.akun_play_user_playlist (
    email_pemain character varying(50) NOT NULL,
    id_user_playlist uuid NOT NULL,
    email_pembuat character varying(50) NOT NULL,
    waktu timestamp without time zone NOT NULL
);


ALTER TABLE public.akun_play_user_playlist OWNER TO postgres;

--
-- Name: album; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.album (
    id uuid NOT NULL,
    judul character varying(100) NOT NULL,
    jumlah_lagu integer DEFAULT 0 NOT NULL,
    id_label uuid,
    total_durasi integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.album OWNER TO postgres;

--
-- Name: artist; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.artist (
    id uuid NOT NULL,
    email_akun character varying(50),
    id_pemilik_hak_cipta uuid
);


ALTER TABLE public.artist OWNER TO postgres;

--
-- Name: auth_group; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_group (
    id integer NOT NULL,
    name character varying(150) NOT NULL
);


ALTER TABLE public.auth_group OWNER TO postgres;

--
-- Name: auth_group_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_group ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_group_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_group_permissions; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_group_permissions (
    id bigint NOT NULL,
    group_id integer NOT NULL,
    permission_id integer NOT NULL
);


ALTER TABLE public.auth_group_permissions OWNER TO postgres;

--
-- Name: auth_group_permissions_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_group_permissions ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_group_permissions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_permission; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_permission (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    content_type_id integer NOT NULL,
    codename character varying(100) NOT NULL
);


ALTER TABLE public.auth_permission OWNER TO postgres;

--
-- Name: auth_permission_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_permission ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_permission_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_user; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_user (
    id integer NOT NULL,
    password character varying(128) NOT NULL,
    last_login timestamp with time zone,
    is_superuser boolean NOT NULL,
    username character varying(150) NOT NULL,
    first_name character varying(150) NOT NULL,
    last_name character varying(150) NOT NULL,
    email character varying(254) NOT NULL,
    is_staff boolean NOT NULL,
    is_active boolean NOT NULL,
    date_joined timestamp with time zone NOT NULL
);


ALTER TABLE public.auth_user OWNER TO postgres;

--
-- Name: auth_user_groups; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_user_groups (
    id bigint NOT NULL,
    user_id integer NOT NULL,
    group_id integer NOT NULL
);


ALTER TABLE public.auth_user_groups OWNER TO postgres;

--
-- Name: auth_user_groups_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_user_groups ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_user_groups_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_user_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_user ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_user_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_user_user_permissions; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.auth_user_user_permissions (
    id bigint NOT NULL,
    user_id integer NOT NULL,
    permission_id integer NOT NULL
);


ALTER TABLE public.auth_user_user_permissions OWNER TO postgres;

--
-- Name: auth_user_user_permissions_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.auth_user_user_permissions ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_user_user_permissions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: chart; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.chart (
    tipe character varying(50) NOT NULL,
    id_playlist uuid
);


ALTER TABLE public.chart OWNER TO postgres;

--
-- Name: django_admin_log; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_admin_log (
    id integer NOT NULL,
    action_time timestamp with time zone NOT NULL,
    object_id text,
    object_repr character varying(200) NOT NULL,
    action_flag smallint NOT NULL,
    change_message text NOT NULL,
    content_type_id integer,
    user_id integer NOT NULL,
    CONSTRAINT django_admin_log_action_flag_check CHECK ((action_flag >= 0))
);


ALTER TABLE public.django_admin_log OWNER TO postgres;

--
-- Name: django_admin_log_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.django_admin_log ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_admin_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_content_type; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_content_type (
    id integer NOT NULL,
    app_label character varying(100) NOT NULL,
    model character varying(100) NOT NULL
);


ALTER TABLE public.django_content_type OWNER TO postgres;

--
-- Name: django_content_type_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.django_content_type ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_content_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_migrations; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_migrations (
    id bigint NOT NULL,
    app character varying(255) NOT NULL,
    name character varying(255) NOT NULL,
    applied timestamp with time zone NOT NULL
);


ALTER TABLE public.django_migrations OWNER TO postgres;

--
-- Name: django_migrations_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.django_migrations ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_migrations_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_session; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.django_session (
    session_key character varying(40) NOT NULL,
    session_data text NOT NULL,
    expire_date timestamp with time zone NOT NULL
);


ALTER TABLE public.django_session OWNER TO postgres;

--
-- Name: downloaded_song; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.downloaded_song (
    id_song uuid NOT NULL,
    email_downloader character varying(50) NOT NULL
);


ALTER TABLE public.downloaded_song OWNER TO postgres;

--
-- Name: episode; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.episode (
    id_episode uuid NOT NULL,
    id_konten_podcast uuid,
    judul character varying(100) NOT NULL,
    deskripsi character varying(500) NOT NULL,
    durasi integer NOT NULL,
    tanggal_rilis date NOT NULL
);


ALTER TABLE public.episode OWNER TO postgres;

--
-- Name: genre; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.genre (
    id_konten uuid NOT NULL,
    genre character varying(50) NOT NULL
);


ALTER TABLE public.genre OWNER TO postgres;

--
-- Name: konten; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.konten (
    id uuid NOT NULL,
    judul character varying(100) NOT NULL,
    tanggal_rilis date NOT NULL,
    tahun integer NOT NULL,
    durasi integer NOT NULL,
    CONSTRAINT konten_durasi_check CHECK ((durasi >= 0))
);


ALTER TABLE public.konten OWNER TO postgres;

--
-- Name: label; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.label (
    id uuid NOT NULL,
    nama character varying(100) NOT NULL,
    email character varying(50) NOT NULL,
    kontak character varying(50) NOT NULL,
    id_pemilik_hak_cipta uuid,
    password character varying DEFAULT '12345678'::character varying NOT NULL
);


ALTER TABLE public.label OWNER TO postgres;

--
-- Name: nonpremium; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.nonpremium (
    email character varying(50) NOT NULL
);


ALTER TABLE public.nonpremium OWNER TO postgres;

--
-- Name: paket; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.paket (
    jenis character varying(50) NOT NULL,
    harga integer NOT NULL
);


ALTER TABLE public.paket OWNER TO postgres;

--
-- Name: pemilik_hak_cipta; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.pemilik_hak_cipta (
    id uuid NOT NULL,
    rate_royalti integer NOT NULL
);


ALTER TABLE public.pemilik_hak_cipta OWNER TO postgres;

--
-- Name: playlist; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.playlist (
    id uuid NOT NULL
);


ALTER TABLE public.playlist OWNER TO postgres;

--
-- Name: playlist_song; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.playlist_song (
    id_playlist uuid NOT NULL,
    id_song uuid NOT NULL
);


ALTER TABLE public.playlist_song OWNER TO postgres;

--
-- Name: podcast; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.podcast (
    id_konten uuid NOT NULL,
    email_podcaster character varying(50)
);


ALTER TABLE public.podcast OWNER TO postgres;

--
-- Name: podcaster; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.podcaster (
    email character varying(50) NOT NULL
);


ALTER TABLE public.podcaster OWNER TO postgres;

--
-- Name: premium; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.premium (
    email character varying(50) NOT NULL
);


ALTER TABLE public.premium OWNER TO postgres;

--
-- Name: royalti; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.royalti (
    id_pemilik_hak_cipta uuid NOT NULL,
    id_song uuid NOT NULL,
    jumlah integer NOT NULL
);


ALTER TABLE public.royalti OWNER TO postgres;

--
-- Name: song; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.song (
    id_konten uuid NOT NULL,
    id_artist uuid,
    id_album uuid,
    total_play integer DEFAULT 0 NOT NULL,
    total_download integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.song OWNER TO postgres;

--
-- Name: songwriter; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.songwriter (
    id uuid NOT NULL,
    email_akun character varying(50),
    id_pemilik_hak_cipta uuid
);


ALTER TABLE public.songwriter OWNER TO postgres;

--
-- Name: songwriter_write_song; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.songwriter_write_song (
    id_songwriter uuid NOT NULL,
    id_song uuid NOT NULL
);


ALTER TABLE public.songwriter_write_song OWNER TO postgres;

--
-- Name: transaction; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.transaction (
    id uuid NOT NULL,
    jenis_paket character varying(50) NOT NULL,
    email character varying(50) NOT NULL,
    timestamp_dimulai timestamp without time zone NOT NULL,
    timestamp_berakhir timestamp without time zone NOT NULL,
    metode_bayar character varying(50) NOT NULL,
    nominal integer NOT NULL
);


ALTER TABLE public.transaction OWNER TO postgres;

--
-- Name: user_playlist; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user_playlist (
    email_pembuat character varying(50) NOT NULL,
    id_user_playlist uuid NOT NULL,
    judul character varying(100) NOT NULL,
    deskripsi character varying(500) NOT NULL,
    jumlah_lagu integer NOT NULL,
    tanggal_dibuat date NOT NULL,
    id_playlist uuid,
    total_durasi integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.user_playlist OWNER TO postgres;

--
-- Name: messages; Type: TABLE; Schema: realtime; Owner: supabase_realtime_admin
--

CREATE TABLE realtime.messages (
    id bigint NOT NULL,
    topic text NOT NULL,
    extension text NOT NULL,
    inserted_at timestamp(0) without time zone NOT NULL,
    updated_at timestamp(0) without time zone NOT NULL
);


ALTER TABLE realtime.messages OWNER TO supabase_realtime_admin;

--
-- Name: messages_id_seq; Type: SEQUENCE; Schema: realtime; Owner: supabase_realtime_admin
--

CREATE SEQUENCE realtime.messages_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE realtime.messages_id_seq OWNER TO supabase_realtime_admin;

--
-- Name: messages_id_seq; Type: SEQUENCE OWNED BY; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER SEQUENCE realtime.messages_id_seq OWNED BY realtime.messages.id;


--
-- Name: schema_migrations; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.schema_migrations (
    version bigint NOT NULL,
    inserted_at timestamp(0) without time zone
);


ALTER TABLE realtime.schema_migrations OWNER TO supabase_admin;

--
-- Name: subscription; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.subscription (
    id bigint NOT NULL,
    subscription_id uuid NOT NULL,
    entity regclass NOT NULL,
    filters realtime.user_defined_filter[] DEFAULT '{}'::realtime.user_defined_filter[] NOT NULL,
    claims jsonb NOT NULL,
    claims_role regrole GENERATED ALWAYS AS (realtime.to_regrole((claims ->> 'role'::text))) STORED NOT NULL,
    created_at timestamp without time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);


ALTER TABLE realtime.subscription OWNER TO supabase_admin;

--
-- Name: subscription_id_seq; Type: SEQUENCE; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE realtime.subscription ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME realtime.subscription_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: buckets; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.buckets (
    id text NOT NULL,
    name text NOT NULL,
    owner uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    public boolean DEFAULT false,
    avif_autodetection boolean DEFAULT false,
    file_size_limit bigint,
    allowed_mime_types text[],
    owner_id text
);


ALTER TABLE storage.buckets OWNER TO supabase_storage_admin;

--
-- Name: COLUMN buckets.owner; Type: COMMENT; Schema: storage; Owner: supabase_storage_admin
--

COMMENT ON COLUMN storage.buckets.owner IS 'Field is deprecated, use owner_id instead';


--
-- Name: migrations; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.migrations (
    id integer NOT NULL,
    name character varying(100) NOT NULL,
    hash character varying(40) NOT NULL,
    executed_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE storage.migrations OWNER TO supabase_storage_admin;

--
-- Name: objects; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.objects (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    bucket_id text,
    name text,
    owner uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    last_accessed_at timestamp with time zone DEFAULT now(),
    metadata jsonb,
    path_tokens text[] GENERATED ALWAYS AS (string_to_array(name, '/'::text)) STORED,
    version text,
    owner_id text
);


ALTER TABLE storage.objects OWNER TO supabase_storage_admin;

--
-- Name: COLUMN objects.owner; Type: COMMENT; Schema: storage; Owner: supabase_storage_admin
--

COMMENT ON COLUMN storage.objects.owner IS 'Field is deprecated, use owner_id instead';


--
-- Name: s3_multipart_uploads; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.s3_multipart_uploads (
    id text NOT NULL,
    in_progress_size bigint DEFAULT 0 NOT NULL,
    upload_signature text NOT NULL,
    bucket_id text NOT NULL,
    key text NOT NULL COLLATE pg_catalog."C",
    version text NOT NULL,
    owner_id text,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE storage.s3_multipart_uploads OWNER TO supabase_storage_admin;

--
-- Name: s3_multipart_uploads_parts; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.s3_multipart_uploads_parts (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    upload_id text NOT NULL,
    size bigint DEFAULT 0 NOT NULL,
    part_number integer NOT NULL,
    bucket_id text NOT NULL,
    key text NOT NULL COLLATE pg_catalog."C",
    etag text NOT NULL,
    owner_id text,
    version text NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE storage.s3_multipart_uploads_parts OWNER TO supabase_storage_admin;

--
-- Name: decrypted_secrets; Type: VIEW; Schema: vault; Owner: supabase_admin
--

CREATE VIEW vault.decrypted_secrets AS
 SELECT secrets.id,
    secrets.name,
    secrets.description,
    secrets.secret,
        CASE
            WHEN (secrets.secret IS NULL) THEN NULL::text
            ELSE
            CASE
                WHEN (secrets.key_id IS NULL) THEN NULL::text
                ELSE convert_from(pgsodium.crypto_aead_det_decrypt(decode(secrets.secret, 'base64'::text), convert_to(((((secrets.id)::text || secrets.description) || (secrets.created_at)::text) || (secrets.updated_at)::text), 'utf8'::name), secrets.key_id, secrets.nonce), 'utf8'::name)
            END
        END AS decrypted_secret,
    secrets.key_id,
    secrets.nonce,
    secrets.created_at,
    secrets.updated_at
   FROM vault.secrets;


ALTER TABLE vault.decrypted_secrets OWNER TO supabase_admin;

--
-- Name: refresh_tokens id; Type: DEFAULT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens ALTER COLUMN id SET DEFAULT nextval('auth.refresh_tokens_id_seq'::regclass);


--
-- Name: messages id; Type: DEFAULT; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER TABLE ONLY realtime.messages ALTER COLUMN id SET DEFAULT nextval('realtime.messages_id_seq'::regclass);


--
-- Data for Name: audit_log_entries; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.audit_log_entries (instance_id, id, payload, created_at, ip_address) FROM stdin;
\.


--
-- Data for Name: flow_state; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.flow_state (id, user_id, auth_code, code_challenge_method, code_challenge, provider_type, provider_access_token, provider_refresh_token, created_at, updated_at, authentication_method, auth_code_issued_at) FROM stdin;
\.


--
-- Data for Name: identities; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.identities (provider_id, user_id, identity_data, provider, last_sign_in_at, created_at, updated_at, id) FROM stdin;
\.


--
-- Data for Name: instances; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.instances (id, uuid, raw_base_config, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: mfa_amr_claims; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_amr_claims (session_id, created_at, updated_at, authentication_method, id) FROM stdin;
\.


--
-- Data for Name: mfa_challenges; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_challenges (id, factor_id, created_at, verified_at, ip_address) FROM stdin;
\.


--
-- Data for Name: mfa_factors; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_factors (id, user_id, friendly_name, factor_type, status, created_at, updated_at, secret) FROM stdin;
\.


--
-- Data for Name: one_time_tokens; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.one_time_tokens (id, user_id, token_type, token_hash, relates_to, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: refresh_tokens; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.refresh_tokens (instance_id, id, token, user_id, revoked, created_at, updated_at, parent, session_id) FROM stdin;
\.


--
-- Data for Name: saml_providers; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.saml_providers (id, sso_provider_id, entity_id, metadata_xml, metadata_url, attribute_mapping, created_at, updated_at, name_id_format) FROM stdin;
\.


--
-- Data for Name: saml_relay_states; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.saml_relay_states (id, sso_provider_id, request_id, for_email, redirect_to, created_at, updated_at, flow_state_id) FROM stdin;
\.


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.schema_migrations (version) FROM stdin;
20171026211738
20171026211808
20171026211834
20180103212743
20180108183307
20180119214651
20180125194653
00
20210710035447
20210722035447
20210730183235
20210909172000
20210927181326
20211122151130
20211124214934
20211202183645
20220114185221
20220114185340
20220224000811
20220323170000
20220429102000
20220531120530
20220614074223
20220811173540
20221003041349
20221003041400
20221011041400
20221020193600
20221021073300
20221021082433
20221027105023
20221114143122
20221114143410
20221125140132
20221208132122
20221215195500
20221215195800
20221215195900
20230116124310
20230116124412
20230131181311
20230322519590
20230402418590
20230411005111
20230508135423
20230523124323
20230818113222
20230914180801
20231027141322
20231114161723
20231117164230
20240115144230
20240214120130
20240306115329
20240314092811
20240427152123
20240612123726
\.


--
-- Data for Name: sessions; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sessions (id, user_id, created_at, updated_at, factor_id, aal, not_after, refreshed_at, user_agent, ip, tag) FROM stdin;
\.


--
-- Data for Name: sso_domains; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sso_domains (id, sso_provider_id, domain, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: sso_providers; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sso_providers (id, resource_id, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: users; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.users (instance_id, id, aud, role, email, encrypted_password, email_confirmed_at, invited_at, confirmation_token, confirmation_sent_at, recovery_token, recovery_sent_at, email_change_token_new, email_change, email_change_sent_at, last_sign_in_at, raw_app_meta_data, raw_user_meta_data, is_super_admin, created_at, updated_at, phone, phone_confirmed_at, phone_change, phone_change_token, phone_change_sent_at, email_change_token_current, email_change_confirm_status, banned_until, reauthentication_token, reauthentication_sent_at, is_sso_user, deleted_at, is_anonymous) FROM stdin;
\.


--
-- Data for Name: akun; Type: TABLE DATA; Schema: marmut; Owner: postgres
--

COPY marmut.akun (email, password, nama, gender, tempat_lahir, tanggal_lahir, is_verified, kota_asal) FROM stdin;
robert93@example.org	Q(Q25OsYH(	Steven Taylor	1	Michaelchester	1982-08-27	f	Mullinsville
christine43@example.com	$uj!6GIw$m	Jennifer Perez	1	East Richard	2003-10-07	f	Amyfort
josephharris@example.org	G5TvLbHx_#	Bruce Foster	0	Averystad	1971-09-07	t	Masonchester
garciajuan@example.com	T@1#Uf41R)	Tina Huff	1	Deannaside	1968-06-29	t	East Michelle
samantharamsey@example.com	(#TCzA2jTR	Holly Snyder	1	Schmidthaven	1978-12-28	f	West Janice
jose84@example.org	%bNPbTwu3N	Adam Martin	0	West Stephanie	2003-11-06	t	West Justinbury
john51@example.org	___8VaHc9^	Joanne Lewis	1	Phillipsmouth	1980-05-16	t	Sarahburgh
johnnybarber@example.com	i)21O+&y@#	Katie Mayo	0	Ericview	1977-12-26	t	New Samanthaport
kristina93@example.com	+%4hSE5wUn	Jessica Vasquez	0	Carmenland	1969-12-03	t	Levymouth
ehorn@example.com	Y$jp3XkC*L	Stephanie Lucero	0	Karenberg	1978-10-22	t	Lynchborough
valeriewilliams@example.net	87k&$UXu#i	Dennis White	1	Byrdtown	1987-03-24	t	Crosbyfurt
wcurry@example.com	5)j0CbfwRT	Mr. Robert Burton	0	New Granttown	1989-05-11	t	Walshborough
sandra13@example.org	a_P3Kkjh)9	James Miranda	0	Emilyburgh	1997-07-26	f	East Alejandrobury
nhoward@example.com	@K%7oExCC)	Christopher Wilson	0	Reevesview	1963-10-28	t	Philipview
grantangel@example.net	Z*_77qAz69	Michelle Miller	1	East David	1977-09-14	t	New Julieburgh
vincentmelissa@example.org	ju!1!qKa!+	Peter Jenkins	1	East Sandy	1992-09-17	t	South Angelamouth
joshua88@example.com	T0n53KRe*g	Joanna Johnson	1	East Karenland	2001-01-01	t	Karenberg
roy18@example.net	$Md7VfwkIO	Sean Horton	0	North Edwardbury	1987-03-07	t	Lake Amanda
pschmidt@example.org	eG7zOC^eu$	Derek Miller	1	New William	1998-03-11	t	New Pamela
mmelton@example.net	8M3M%Is1!H	Jeremy Johnson	0	Contrerastown	1986-05-18	t	Samanthaberg
jennifer67@example.org	^yl2$JEyQ1	Julie Landry	0	Murrayland	1998-03-14	t	Ronniestad
georgebell@example.org	0AGJogOQ*4	Andrew Simon Jr.	0	Stephanieborough	2001-11-04	f	New Luisborough
susan36@example.org	9tU3AVUv#z	Rickey Alexander	0	North Melissamouth	1986-03-02	t	Bakerton
faithfields@example.org	do3Zu6ojT+	Becky Taylor	0	Lake Jenna	2002-08-25	f	West Sophia
robert11@example.net	_W0_ToDxB!	Gloria Carey	0	Maynardshire	1970-03-16	t	Phillipsport
sandrareese@example.org	&@MSTj+cx7	Michael Allen	0	Ramostown	1966-12-10	t	Debraville
arthurrodriguez@example.org	#K#8Ja$x5s	Adam Day	0	Guyton	2004-04-15	f	Robertbury
chart@example.org	l&8KHkV_xB	Jennifer Harris	0	Annland	1974-09-06	t	Owensshire
craig67@example.com	^f7Q9Ht*d8	Kaitlin Campbell	1	Cabrerachester	1971-10-24	t	East Scottport
cbowen@example.net	r6JMVXQe#j	Lisa Nicholson	1	West Michaelfort	1982-06-14	t	Victoriafurt
markmann@example.net	9)Wc^Dvl#w	Bobby Mitchell	0	Kathrynland	2004-08-06	t	Lozanochester
itaylor@example.com	43Chz%uB$*	Zachary Evans	0	Langton	1976-10-07	f	Tanyaborough
edward19@example.org	$tm3NIOyM_	Jon Reyes	1	Petersenmouth	2002-06-28	t	North Pamelaburgh
hodgerachel@example.com	(y0bIRoh2e	Alex Hawkins	0	Graystad	1989-01-29	t	New John
estewart@example.org	9$3$RHQzqK	Lauren Turner	0	Roberthaven	1992-11-22	t	Port Joseph
anthonythomas@example.com	Q&0KDn$9Xi	Thomas Patel	1	Brownshire	1979-12-20	t	Moodybury
jonesdenise@example.net	5EuXXS2y#o	Antonio Rojas	0	Port Michaelborough	2005-12-15	t	Ronaldhaven
rebekah57@example.org	TRfbs4Pir!	James Freeman	0	Rachaelhaven	1980-09-08	t	East Benjaminfurt
andrewcarter@example.org	&6ED+QhwJp	Nicholas Ramirez	1	Lauraville	1993-08-19	f	Tylershire
jarednewman@example.com	W@v0dLhm)$	Charles Grant	1	Port Brandon	1964-10-21	f	South Jasonland
plopez@example.com	@&23RPHs3w	Kenneth Glover	0	Brianchester	1995-01-12	f	North Brianfort
wmurphy@example.org	$K1GtM!xrX	Jason Farley	1	West Jonathanchester	1981-03-22	f	South Chadmouth
nealbrandon@example.net	+EXnLxj^7H	Jerry Hanson	0	Robinsonfort	1980-04-11	t	Stephaniemouth
davisjohn@example.org	Pmu0lFTy$e	Joseph Bonilla	1	Port Monicamouth	1983-04-03	f	East Emmashire
ucooper@example.net	$4ZQeIgGZv	Jodi Rivers	1	Valdezside	1970-07-11	t	New Amber
maciassandy@example.net	KE@K86n#q#	Tara Burnett	0	North Steveland	1990-08-15	f	North Madison
joseph92@example.net	yur2OLkBa)	Mary Hill	1	West Josetown	1979-12-29	f	East Michelle
kbaker@example.com	O(kv%1Vdks	Bobby Nguyen	0	Jeffreyfurt	1988-04-24	t	Torresberg
tylerfoley@example.org	xJXAFa^R+3	Michael May	1	Jeffreyborough	1977-08-30	t	East Sarahhaven
todd00@example.org	^u8#g_DkO$	Carly Taylor	0	Robynview	1996-04-04	t	South Hailey
katiepeterson@example.net	1J+9Masgp@	Brian Williams	1	Lake Timothyton	1973-09-27	t	Santosshire
mwilson@example.org	!AWwRLnv9s	Troy Powell	1	Port Anthonytown	1981-11-11	t	New Brendaburgh
robertsimmons@example.net	@04Xk4ZQ&c	Alex Robinson	1	Taylorport	1985-06-28	f	Cervantesville
smithjose@example.net	@6HrfRhcE)	Ryan Hart	0	Denisebury	1982-04-03	f	Shawnshire
imarks@example.com	X#0D(mqy5J	Laura Martinez	1	Perezfort	1968-02-10	t	Port Brandon
nathanherman@example.net	H8PG30zu@1	Jonathan Rich	0	Michaelville	1966-02-23	t	Simsland
amyphillips@example.net	#)TmIIah51	Jeanette Brown	0	Robintown	1963-11-13	t	East Jessica
youngjeremiah@example.net	j01KXKb&%&	Evan Clark	0	Kellymouth	1995-05-07	t	Ashleytown
nbryan@example.net	#_Be3HPnH)	Donna Maxwell	1	Gregorytown	1971-08-12	t	Brownborough
smithbeth@example.com	#7pJP78mwx	Randall Roberts	1	Anthonyberg	2004-06-07	t	Linmouth
vturner@example.net	nQy3Bifwx(	Daniel Johnson	1	Lake George	1983-02-26	f	New Carla
caseychandler@example.net	od5V3sDDb@	Charles Nguyen	0	Lake Sandra	1988-05-21	f	Hartmanburgh
davidwashington@example.com	tZls@EDK!4	Julia Dominguez	0	West Monica	1970-03-23	t	East Brucetown
stanleykatelyn@example.com	U7tWhp8G^6	Michael Bishop	1	Kayleeburgh	1994-03-12	f	Floresside
shari32@example.org	$0QICPjdvg	Miss Jennifer Snyder	0	Port Crystalshire	1984-06-12	t	North Jasminetown
jfreeman@example.org	*GV3MsGS@C	Emily Edwards	0	Port Jose	1979-01-17	t	North Timothychester
bhill@example.net	+4OzPWjP#N	Scott Sheppard	1	Baldwinport	2001-10-11	t	Weavermouth
melissarojas@example.org	kUWTRfUv&7	Glenda Thompson	0	Nicoleborough	1971-01-20	t	Lake Juan
rebeccasanchez@example.com	&9oLnMBVpT	Emily Shelton	1	Pooleberg	1964-04-03	t	Jonesfort
thomas20@example.net	WFA9FqAl#0	Lisa Lewis	1	East Meganburgh	1970-11-06	t	Tinaberg
martinderek@example.com	^GD&pUhrR8	Keith Ayers	0	Lake Scott	2002-02-12	f	North Dustin
ianwalters@example.com	m(EsNvyf+1	David Blankenship	0	Donnastad	1974-10-09	f	Port Christinaburgh
brios@example.org	J#0jhFkHvM	Edward Rodriguez	1	South Brooke	1993-09-24	t	Scottville
qrivera@example.net	_u&2Hfqrm7	Amber Smith	1	Romeroburgh	1964-12-19	t	Brownberg
kristine80@example.net	WQ9^#Zvl((	Mary Williams	1	Smithmouth	1963-12-03	t	Lake Amandafort
cruzaustin@example.net	IFHPBFXv!2	Jacob Clarke	1	Kevinfurt	1979-01-15	t	Port Kennethshire
boyerjasmine@example.com	)8t5B*guvD	Kelli Adams	0	North Charleschester	1982-04-01	t	Brandonshire
courtney22@example.net	S7MZAi_C#Q	James Owens	0	East Amandaborough	1977-05-13	t	Lake David
ucontreras@example.com	NdL21@Mv#O	Kevin Hensley	0	Port Davidside	1994-08-23	t	East Emilyfort
michaelmitchell@example.net	m#Q4D#HzH&	Linda Hughes	0	New Thomasborough	1983-06-16	f	West Paulaport
lindsey00@example.com	+biQwhro_3	David Cohen	0	Howardchester	1969-10-20	t	North Rebeccaport
jenniferbauer@example.com	I*1DehRHAI	Katie Johnson	0	South Katherinebury	1990-10-28	t	West Dariusborough
brent47@example.org	%5)aDSz9#g	Deborah Burgess	0	Edwardbury	1972-06-13	t	Curtisport
raymondjackson@example.net	9WYhvjzW$w	Tara Garcia	1	Mooreside	1982-12-27	t	Shawland
vicki34@example.com	#76VzcBvKT	Julie Maxwell	0	East Katie	1994-04-10	f	East Joshuaton
victoria57@example.org	MS0YtTrvb*	Joshua Romero	1	North Jessica	1982-04-28	t	Simmonsberg
gregjohnson@example.net	+7h$3VvSVr	Sean Grant	0	East Johnfurt	1991-06-09	t	New Kimchester
peggyhodges@example.com	0MoJTw#t*(	Cynthia Stevens	0	Davistown	1969-09-07	t	Lake Melindafurt
lewischristopher@example.net	J!U3KnTtzK	Jeffrey Torres	0	West Amanda	1990-12-29	t	North Paige
kevinpope@example.org	dE##8GBhL)	Alyssa Navarro	0	Tuckertown	1966-04-22	t	Lake Amy
andrewsamy@example.net	*3ND1L!gEB	Dr. Olivia Rodgers MD	1	West Christopherberg	1963-08-20	t	Lake Kathyborough
trevor88@example.org	Cx$IxJpe!1	Christopher Grimes	1	Simschester	1966-10-27	t	South Tarahaven
tirwin@example.com	s9(fLTLv!x	Chelsea Williams	0	West Matthew	1995-05-26	t	Mariahfort
jacksonnicholas@example.com	)4OOZfB%(%	Kenneth Ramirez	0	New Davidview	1963-05-15	t	Adamshire
christine44@example.org	zWLE1I(t+L	Sandra Lucas	0	North Valeriemouth	1998-05-18	t	Tomshire
kbrooks@example.org	$$DT!MAr1x	James Sloan	1	East Sherry	1989-07-27	t	Tylerport
markevans@example.com	0YLDL1Ya%x	Aaron Andrews	0	Carolineshire	1986-06-11	t	Wilkinsonmouth
jonesmichael@example.net	_a*0SgBc&E	Lindsey Maddox	0	East Laura	1974-01-09	t	Rodriguezport
thomasmary@example.org	!Dig3sOd*E	Tracy Valentine	1	New Brian	1968-05-13	t	Mccoyview
tiffany81@example.org	tSaHPdtT*9	Joseph Banks	1	Donnabury	1968-01-23	f	South Scott
\.


--
-- Data for Name: akun_play_song; Type: TABLE DATA; Schema: marmut; Owner: postgres
--

COPY marmut.akun_play_song (email_pemain, id_song, waktu) FROM stdin;
robert93@example.org	4c560acf-2b06-4131-a339-daf64f87d10d	2024-05-04 08:02:32
robert93@example.org	9524afcb-00d6-4833-810c-7bf6135628d1	2024-05-04 08:02:44
robert93@example.org	f8e9345e-39fe-4dd7-ac30-2c030af0b45e	2024-05-04 08:02:57
robert93@example.org	f8e9345e-39fe-4dd7-ac30-2c030af0b45e	2024-05-04 08:03:07
robert93@example.org	3f22c666-a2d0-48c5-b9fe-36c670e0d12c	2024-05-04 08:03:19
robert93@example.org	1225f19b-8e3c-4d31-8433-a38f948281e8	2024-05-04 08:03:31
robert93@example.org	79adc68e-5571-488b-9288-fb2d5dad273f	2024-05-04 08:03:44
robert93@example.org	98f01c7c-427f-4cb2-bc42-04ba75c22543	2024-05-04 08:03:54
robert93@example.org	98f01c7c-427f-4cb2-bc42-04ba75c22543	2024-05-04 08:04:06
robert93@example.org	1eff7dfd-5258-45e4-bf7f-0484181020e8	2024-05-04 08:04:19
robert93@example.org	1eff7dfd-5258-45e4-bf7f-0484181020e8	2024-05-04 08:04:40
robert93@example.org	1eff7dfd-5258-45e4-bf7f-0484181020e8	2024-05-04 08:04:51
robert93@example.org	839eb1e3-cadc-4847-a893-d4cb12e19e56	2024-05-04 08:05:00
\.


--
-- Data for Name: akun_play_user_playlist; Type: TABLE DATA; Schema: marmut; Owner: postgres
--

COPY marmut.akun_play_user_playlist (email_pemain, id_user_playlist, email_pembuat, waktu) FROM stdin;
\.


--
-- Data for Name: album; Type: TABLE DATA; Schema: marmut; Owner: postgres
--

COPY marmut.album (id, judul, jumlah_lagu, id_label, total_durasi) FROM stdin;
8cc1c5ee-e9b4-4965-962f-63ff5fe80c59	Positions	12	8cc1c5ee-e9b4-4965-962f-63ff5fe80c59	44
8cc1c5ee-e9b4-4965-962f-63ff5fe80c5a	My Everything	0	8cc1c5ee-e9b4-4965-962f-63ff5fe80c59	0
8cc1c5ee-e9b4-4965-962f-63ff5fe80c5b	Dangerous Woman	0	8cc1c5ee-e9b4-4965-962f-63ff5fe80c59	0
8cc1c5ee-e9b4-4965-962f-63ff5fe80c5c	Murder	0	8cc1c5ee-e9b4-4965-962f-63ff5fe80c59	0
\.


--
-- Data for Name: artist; Type: TABLE DATA; Schema: marmut; Owner: postgres
--

COPY marmut.artist (id, email_akun, id_pemilik_hak_cipta) FROM stdin;
8cc1c5ee-e9b4-4965-962f-63ff5fe80c59	robert93@example.org	8cc1c5ee-e9b4-4965-962f-63ff5fe80c59
3b3b7a2a-5472-45da-8dd7-20fde6cdadd4	christine43@example.com	3b3b7a2a-5472-45da-8dd7-20fde6cdadd4
9dc5015e-9c9d-428b-989d-015c1c2d691b	josephharris@example.org	9dc5015e-9c9d-428b-989d-015c1c2d691b
d76e46c8-a23a-468d-816d-f33502af991e	garciajuan@example.com	d76e46c8-a23a-468d-816d-f33502af991e
fc83f443-a500-4145-a994-921bf4baaebf	samantharamsey@example.com	fc83f443-a500-4145-a994-921bf4baaebf
55b6c978-7e70-403e-94ab-8011654e9248	jose84@example.org	55b6c978-7e70-403e-94ab-8011654e9248
bc00cff3-5114-4530-8852-3f72befbfe96	john51@example.org	bc00cff3-5114-4530-8852-3f72befbfe96
2231db93-e16f-4aea-9991-0f5299cdf571	johnnybarber@example.com	2231db93-e16f-4aea-9991-0f5299cdf571
87042145-199a-4d67-a943-1eac7f1164d2	kristina93@example.com	87042145-199a-4d67-a943-1eac7f1164d2
c2008e6d-494d-4647-a709-ad119d8a46d5	ehorn@example.com	c2008e6d-494d-4647-a709-ad119d8a46d5
695ea49e-39d9-4167-890b-893b172beeb5	valeriewilliams@example.net	695ea49e-39d9-4167-890b-893b172beeb5
\.


--
-- Data for Name: chart; Type: TABLE DATA; Schema: marmut; Owner: postgres
--

COPY marmut.chart (tipe, id_playlist) FROM stdin;
Daily Top 20	347fc626-1d9d-433a-abe8-9aed4aa31ab9
WeeklyTop 20	50786e92-30cc-431d-be51-721ba92472ca
Monthly Top 20	9b3ad801-7cd4-4436-8dee-00ebdcefe539
Yearly Top 20	ed7901d3-5350-4d04-8e02-164df504d156
\.


--
-- Data for Name: downloaded_song; Type: TABLE DATA; Schema: marmut; Owner: postgres
--

COPY marmut.downloaded_song (id_song, email_downloader) FROM stdin;
4c560acf-2b06-4131-a339-daf64f87d10d	josephharris@example.org
9524afcb-00d6-4833-810c-7bf6135628d1	josephharris@example.org
f8e9345e-39fe-4dd7-ac30-2c030af0b45e	josephharris@example.org
3f22c666-a2d0-48c5-b9fe-36c670e0d12c	josephharris@example.org
1225f19b-8e3c-4d31-8433-a38f948281e8	josephharris@example.org
79adc68e-5571-488b-9288-fb2d5dad273f	josephharris@example.org
98f01c7c-427f-4cb2-bc42-04ba75c22543	josephharris@example.org
1eff7dfd-5258-45e4-bf7f-0484181020e8	josephharris@example.org
4d3a081c-ce7b-45e7-bfc7-bf585796a9e0	josephharris@example.org
\.


--
-- Data for Name: episode; Type: TABLE DATA; Schema: marmut; Owner: postgres
--

COPY marmut.episode (id_episode, id_konten_podcast, judul, deskripsi, durasi, tanggal_rilis) FROM stdin;
4c560acf-2b06-4131-a339-daf64f87d101	4c560acf-2b06-4131-a339-daf64f87d10d	Mang Eak Kita Bangun Tidur, Tidur Lagi?	Cerita yang mungkin relate dengan kamu	12	2024-05-04
4c560acf-2b06-4131-a339-daf64f87d102	4c560acf-2b06-4131-a339-daf64f87d10d	Ngeri Banget, Loly Cafe Dulunya Tukang Ngebor	Kisah perjalanan seorang Loly Cafe	12	2024-05-04
\.


--
-- Data for Name: genre; Type: TABLE DATA; Schema: marmut; Owner: postgres
--

COPY marmut.genre (id_konten, genre) FROM stdin;
741e6864-669e-4288-8c56-3805f71e3b76	realize
7e41a0f7-3597-46a4-8415-879827c5a67a	animal
c04eea19-d720-4fce-9a7a-cae4290fa308	hospital
94b01dd3-5193-462a-be30-f00bffde5cd1	family
68a676fe-8bea-48b9-a137-6622e3cd3ff8	finally
efbc78ae-66fe-454f-b202-65f8235da8e8	effect
2ae54c15-807f-4a5d-b25f-875de920f9b6	pick
e3d6b571-0540-4261-95d2-9e94cadbc825	foreign
960d45a9-d6e5-4f71-bace-0da43b0951a6	seven
1eff7dfd-5258-45e4-bf7f-0484181020e8	role
7cc1eadf-08c9-4744-b797-94bddc0308b3	very
02663c34-2aa9-43a6-92cc-4fb7fa9d066e	million
839eb1e3-cadc-4847-a893-d4cb12e19e56	contain
2a8fa502-23df-47b4-941c-a836a13a4106	anyone
ca96fa8d-0125-4996-a92d-70ad20418a92	rate
960d45a9-d6e5-4f71-bace-0da43b0951a6	traditional
68a676fe-8bea-48b9-a137-6622e3cd3ff8	over
1ced2011-e47a-4838-8dac-bdd3616f6f8d	rather
94b01dd3-5193-462a-be30-f00bffde5cd1	name
1eacddc5-f451-4485-9902-8842536f8b75	attorney
4c560acf-2b06-4131-a339-daf64f87d10d	two
4c560acf-2b06-4131-a339-daf64f87d10d	note
1ced2011-e47a-4838-8dac-bdd3616f6f8d	six
5a84caba-a865-4404-8fb5-564aa683b322	relate
5ee7943c-5011-49d1-ac1a-7e0cde3e810f	nice
5ee7943c-5011-49d1-ac1a-7e0cde3e810f	mother
5ee7943c-5011-49d1-ac1a-7e0cde3e810f	what
c04eea19-d720-4fce-9a7a-cae4290fa308	note
df16aa5b-a1bc-41c5-a6bd-8a10f6891b17	about
0e451633-25a1-4584-9a82-3c1a43a0ded9	out
79adc68e-5571-488b-9288-fb2d5dad273f	right
68a676fe-8bea-48b9-a137-6622e3cd3ff8	eight
839eb1e3-cadc-4847-a893-d4cb12e19e56	full
5666b5ec-8799-4aa7-aa80-48f2855669fe	well
df16aa5b-a1bc-41c5-a6bd-8a10f6891b17	drop
741e6864-669e-4288-8c56-3805f71e3b76	within
686772b4-2bb6-4147-9898-3ecf73b3e898	bank
4c560acf-2b06-4131-a339-daf64f87d10d	in
1ced2011-e47a-4838-8dac-bdd3616f6f8d	daughter
efbc78ae-66fe-454f-b202-65f8235da8e8	hospital
ce044520-7e8c-4378-8db1-1aa4595cadc8	water
95b32c59-2107-4229-91ca-1ded51f8ab18	former
2a8fa502-23df-47b4-941c-a836a13a4106	television
f0f7a068-03f3-41e6-a23a-796c604fae84	decade
ce1fe52d-c652-41e4-82ca-a2de299af8b5	court
68a676fe-8bea-48b9-a137-6622e3cd3ff8	mean
0a7e104f-d73a-4224-b72f-d58b39fc4629	perform
7e41a0f7-3597-46a4-8415-879827c5a67a	best
5666b5ec-8799-4aa7-aa80-48f2855669fe	dog
efbc78ae-66fe-454f-b202-65f8235da8e8	team
0e451633-25a1-4584-9a82-3c1a43a0ded9	spring
9524afcb-00d6-4833-810c-7bf6135628d1	role
4a5faf00-74c2-47ad-93c4-dc3286e00414	call
ca96fa8d-0125-4996-a92d-70ad20418a92	position
ca96fa8d-0125-4996-a92d-70ad20418a92	international
a3199e3b-0a2b-4e95-849b-6f840590d1d4	pattern
5a84caba-a865-4404-8fb5-564aa683b322	various
a3199e3b-0a2b-4e95-849b-6f840590d1d4	middle
7e41a0f7-3597-46a4-8415-879827c5a67a	spend
9524afcb-00d6-4833-810c-7bf6135628d1	admit
\.


--
-- Data for Name: konten; Type: TABLE DATA; Schema: marmut; Owner: postgres
--

COPY marmut.konten (id, judul, tanggal_rilis, tahun, durasi) FROM stdin;
4c560acf-2b06-4131-a339-daf64f87d10d	Streamlined well-modulated workforce	2023-05-26	2023	143
9524afcb-00d6-4833-810c-7bf6135628d1	Synergized zero-defect adapter	2024-03-23	2012	133
f8e9345e-39fe-4dd7-ac30-2c030af0b45e	Organized fault-tolerant extranet	2023-12-20	2017	167
3f22c666-a2d0-48c5-b9fe-36c670e0d12c	Decentralized client-server leverage	2021-03-14	2015	94
1225f19b-8e3c-4d31-8433-a38f948281e8	Object-based web-enabled encoding	2022-07-12	2016	132
79adc68e-5571-488b-9288-fb2d5dad273f	Programmable impactful toolset	2021-07-16	2022	72
98f01c7c-427f-4cb2-bc42-04ba75c22543	Self-enabling uniform conglomeration	2022-05-08	2017	113
1eff7dfd-5258-45e4-bf7f-0484181020e8	Face-to-face incremental capacity	2022-11-22	2013	125
4d3a081c-ce7b-45e7-bfc7-bf585796a9e0	Right-sized 6thgeneration infrastructure	2024-03-19	2010	140
839eb1e3-cadc-4847-a893-d4cb12e19e56	Persistent hybrid throughput	2023-09-24	2021	64
efbc78ae-66fe-454f-b202-65f8235da8e8	Monitored system-worthy strategy	2020-06-17	2022	63
0e451633-25a1-4584-9a82-3c1a43a0ded9	Multi-layered human-resource structure	2022-01-30	2013	116
4a5faf00-74c2-47ad-93c4-dc3286e00414	Streamlined bi-directional capability	2020-01-01	2021	137
e296880e-e450-4cb9-9395-2f31b08413ad	Pre-emptive local focus group	2022-11-11	2012	98
c04eea19-d720-4fce-9a7a-cae4290fa308	Networked multi-tasking firmware	2020-06-29	2019	81
5666b5ec-8799-4aa7-aa80-48f2855669fe	Grass-roots intermediate success	2020-10-14	2023	100
2ae54c15-807f-4a5d-b25f-875de920f9b6	Phased user-facing process improvement	2021-02-10	2018	146
addd1ce8-6ccf-4d7f-a90f-61ef0a758f72	Synergized even-keeled strategy	2020-06-10	2012	124
ce1fe52d-c652-41e4-82ca-a2de299af8b5	Upgradable static orchestration	2023-10-25	2013	140
5a84caba-a865-4404-8fb5-564aa683b322	Fundamental systematic approach	2023-06-10	2015	139
686772b4-2bb6-4147-9898-3ecf73b3e898	Reduced 6thgeneration parallelism	2020-11-02	2017	82
e3d6b571-0540-4261-95d2-9e94cadbc825	Customizable bi-directional hierarchy	2022-09-15	2016	88
3434ba82-09f3-400a-b8ed-2e1db57c1094	User-centric national info-mediaries	2022-05-30	2017	128
95b32c59-2107-4229-91ca-1ded51f8ab18	Object-based user-facing solution	2022-07-29	2014	127
7054df34-a21e-4885-91c3-ae940687fb1f	Quality-focused foreground collaboration	2021-05-20	2020	167
9665a53d-65b1-4ae2-bf1f-af2bb462ced2	User-centric 4thgeneration hierarchy	2023-04-03	2023	65
2b378238-3b94-471e-9938-a6485d2c5aa4	Intuitive full-range analyzer	2023-11-24	2021	177
02663c34-2aa9-43a6-92cc-4fb7fa9d066e	Assimilated even-keeled product	2022-03-30	2022	122
df16aa5b-a1bc-41c5-a6bd-8a10f6891b17	Innovative bifurcated synergy	2020-11-19	2017	160
ce044520-7e8c-4378-8db1-1aa4595cadc8	Adaptive coherent definition	2021-06-24	2012	150
741e6864-669e-4288-8c56-3805f71e3b76	Vision-oriented value-added orchestration	2023-01-10	2013	95
a3199e3b-0a2b-4e95-849b-6f840590d1d4	Re-contextualized interactive info-mediaries	2020-06-28	2010	156
fb864183-0e6b-4cbf-b8e4-95285387fec4	Fundamental coherent frame	2021-01-10	2016	149
787a3540-1c30-402c-b95d-961474506767	Diverse explicit success	2021-07-11	2017	155
5ee7943c-5011-49d1-ac1a-7e0cde3e810f	Optimized dedicated protocol	2023-08-22	2010	175
306acf11-105c-4e35-81f4-1521289a84d9	Ameliorated intangible open architecture	2023-06-12	2019	72
7e41a0f7-3597-46a4-8415-879827c5a67a	Implemented zero-defect workforce	2021-07-12	2016	149
7c5c4cd4-ff7a-40de-b61f-69f1ecdbc4d8	Quality-focused contextually-based leverage	2020-02-15	2021	119
960d45a9-d6e5-4f71-bace-0da43b0951a6	Versatile bandwidth-monitored instruction set	2020-06-22	2015	60
f5b6a2fb-d265-412b-9174-a628cc422339	Distributed scalable workforce	2020-07-17	2012	71
94b01dd3-5193-462a-be30-f00bffde5cd1	Advanced demand-driven access	2024-03-13	2015	72
c5c6c19f-eb88-4a2b-9865-e3ee7bd4b1e4	Organic leadingedge function	2023-05-26	2013	180
f0f7a068-03f3-41e6-a23a-796c604fae84	Future-proofed disintermediate paradigm	2021-03-21	2021	156
dfcc9d04-3abc-4426-a1b0-aa88b1bce662	Inverse explicit implementation	2023-09-03	2024	64
bb0bed9e-8aca-4f50-a931-edbc8a86f9a5	Function-based foreground info-mediaries	2020-12-18	2010	158
7cc1eadf-08c9-4744-b797-94bddc0308b3	Proactive dedicated open system	2022-08-27	2015	147
e5689031-cdf4-49aa-929b-858fe556f7c8	Focused coherent installation	2024-04-07	2015	88
1eacddc5-f451-4485-9902-8842536f8b75	Profit-focused responsive alliance	2021-07-15	2016	86
1ced2011-e47a-4838-8dac-bdd3616f6f8d	User-centric tertiary forecast	2022-11-11	2014	103
68a676fe-8bea-48b9-a137-6622e3cd3ff8	Diverse upward-trending middleware	2021-02-22	2013	93
2a8fa502-23df-47b4-941c-a836a13a4106	Front-line bottom-line structure	2020-12-05	2014	154
f510a1df-b119-4d5b-aef3-514c51b0919d	Synchronized optimizing leverage	2021-01-15	2010	70
eae3f504-29bb-4666-9827-b33704095fb2	Reactive bi-directional projection	2022-12-22	2010	178
0a7e104f-d73a-4224-b72f-d58b39fc4629	Seamless exuding workforce	2021-11-15	2017	171
ca96fa8d-0125-4996-a92d-70ad20418a92	User-friendly content-based archive	2024-04-10	2014	125
\.


--
-- Data for Name: label; Type: TABLE DATA; Schema: marmut; Owner: postgres
--

COPY marmut.label (id, nama, email, kontak, id_pemilik_hak_cipta) FROM stdin;
3b3b7a2a-5472-45da-8dd7-20fde6cdadd4	AFE Records	aferecords@gmail.com	lia@aferecords.com	3b3b7a2a-5472-45da-8dd7-20fde6cdadd4
8cc1c5ee-e9b4-4965-962f-63ff5fe80c59	Republic Records	republicrecords@gmail.com	sashas@republicrecord.com	8cc1c5ee-e9b4-4965-962f-63ff5fe80c59
9dc5015e-9c9d-428b-989d-015c1c2d691b	Loly Cafe Records	lolycafe@gmail.com	rozi@lolycafe.com	9dc5015e-9c9d-428b-989d-015c1c2d691b
\.


--
-- Data for Name: nonpremium; Type: TABLE DATA; Schema: marmut; Owner: postgres
--

COPY marmut.nonpremium (email) FROM stdin;
robert93@example.org
christine43@example.com
samantharamsey@example.com
sandra13@example.org
georgebell@example.org
faithfields@example.org
arthurrodriguez@example.org
itaylor@example.com
wmurphy@example.org
davisjohn@example.org
maciassandy@example.net
robertsimmons@example.net
smithjose@example.net
vturner@example.net
caseychandler@example.net
stanleykatelyn@example.com
martinderek@example.com
ianwalters@example.com
michaelmitchell@example.net
vicki34@example.com
tiffany81@example.org
joseph92@example.net
andrewcarter@example.org
jarednewman@example.com
plopez@example.com
\.


--
-- Data for Name: paket; Type: TABLE DATA; Schema: marmut; Owner: postgres
--

COPY marmut.paket (jenis, harga) FROM stdin;
1 Bulan	30000
3 Bulan	60000
6 Bulan	100000
1 Tahun	145000
\.


--
-- Data for Name: pemilik_hak_cipta; Type: TABLE DATA; Schema: marmut; Owner: postgres
--

COPY marmut.pemilik_hak_cipta (id, rate_royalti) FROM stdin;
8cc1c5ee-e9b4-4965-962f-63ff5fe80c59	10
3b3b7a2a-5472-45da-8dd7-20fde6cdadd4	12
9dc5015e-9c9d-428b-989d-015c1c2d691b	8
d76e46c8-a23a-468d-816d-f33502af991e	15
fc83f443-a500-4145-a994-921bf4baaebf	9
55b6c978-7e70-403e-94ab-8011654e9248	11
bc00cff3-5114-4530-8852-3f72befbfe96	13
2231db93-e16f-4aea-9991-0f5299cdf571	7
87042145-199a-4d67-a943-1eac7f1164d2	14
c2008e6d-494d-4647-a709-ad119d8a46d5	10
695ea49e-39d9-4167-890b-893b172beeb5	12
bd6b2287-24de-42dc-90f6-8038059e60f9	8
f0118ede-83c9-4b02-ada1-f335031a952b	15
56cf84be-0d59-4d89-b7b2-a8e0bb43669a	9
d5ca3bb3-1eb1-49bd-8bce-4ad6d2d51c4c	11
8e48df6f-c016-45ca-b4c4-f8f41bc0b4f9	13
9817771f-0f95-4f5f-922e-dcd847f76224	7
8a651a9a-0713-4375-aac7-7541984c5357	14
1bb70652-a0ab-4a23-832c-fefa7c749855	10
09e9ca45-81a9-42eb-aa1a-1daa41c865ff	12
9f506b7b-9e16-4891-be15-d87ec7bc7a67	8
0ede8884-a173-403e-af52-6890cf3e35bb	15
9216b776-f5a7-4926-90d6-54d307c880b0	9
ff1a3541-df0f-4bdf-8615-55246b3435e4	11
d5b17381-e203-4241-8739-a121c262c1e6	13
\.


--
-- Data for Name: playlist; Type: TABLE DATA; Schema: marmut; Owner: postgres
--

COPY marmut.playlist (id) FROM stdin;
50786e92-30cc-431d-be51-721ba92472ca
9b3ad801-7cd4-4436-8dee-00ebdcefe539
ffcd833b-1e51-4a26-b2cd-d66aa8b1a1d5
83fc89d1-4f76-4739-8f4c-3205213e9a8a
ed7901d3-5350-4d04-8e02-164df504d156
c0c6cf05-8091-413f-855b-cbcea0e4cacc
7203b88e-ba37-4de3-8773-1585f66e41b5
1fbb46ce-c253-43dc-b2dd-8b334f7f57e1
69bbc8c1-c528-43d0-af5d-40a545dc2797
347fc626-1d9d-433a-abe8-9aed4aa31ab9
\.


--
-- Data for Name: playlist_song; Type: TABLE DATA; Schema: marmut; Owner: postgres
--

COPY marmut.playlist_song (id_playlist, id_song) FROM stdin;
50786e92-30cc-431d-be51-721ba92472ca	4c560acf-2b06-4131-a339-daf64f87d10d
9b3ad801-7cd4-4436-8dee-00ebdcefe539	9524afcb-00d6-4833-810c-7bf6135628d1
ffcd833b-1e51-4a26-b2cd-d66aa8b1a1d5	f8e9345e-39fe-4dd7-ac30-2c030af0b45e
83fc89d1-4f76-4739-8f4c-3205213e9a8a	3f22c666-a2d0-48c5-b9fe-36c670e0d12c
ed7901d3-5350-4d04-8e02-164df504d156	1225f19b-8e3c-4d31-8433-a38f948281e8
c0c6cf05-8091-413f-855b-cbcea0e4cacc	79adc68e-5571-488b-9288-fb2d5dad273f
c0c6cf05-8091-413f-855b-cbcea0e4cacc	98f01c7c-427f-4cb2-bc42-04ba75c22543
1fbb46ce-c253-43dc-b2dd-8b334f7f57e1	1eff7dfd-5258-45e4-bf7f-0484181020e8
69bbc8c1-c528-43d0-af5d-40a545dc2797	4d3a081c-ce7b-45e7-bfc7-bf585796a9e0
347fc626-1d9d-433a-abe8-9aed4aa31ab9	839eb1e3-cadc-4847-a893-d4cb12e19e56
\.


--
-- Data for Name: podcast; Type: TABLE DATA; Schema: marmut; Owner: postgres
--

COPY marmut.podcast (id_konten, email_podcaster) FROM stdin;
4c560acf-2b06-4131-a339-daf64f87d10d	josephharris@example.org
9524afcb-00d6-4833-810c-7bf6135628d1	garciajuan@example.com
f8e9345e-39fe-4dd7-ac30-2c030af0b45e	jose84@example.org
3f22c666-a2d0-48c5-b9fe-36c670e0d12c	john51@example.org
1225f19b-8e3c-4d31-8433-a38f948281e8	johnnybarber@example.com
79adc68e-5571-488b-9288-fb2d5dad273f	kristina93@example.com
98f01c7c-427f-4cb2-bc42-04ba75c22543	ehorn@example.com
1eff7dfd-5258-45e4-bf7f-0484181020e8	valeriewilliams@example.net
4d3a081c-ce7b-45e7-bfc7-bf585796a9e0	wcurry@example.com
839eb1e3-cadc-4847-a893-d4cb12e19e56	nhoward@example.com
\.


--
-- Data for Name: podcaster; Type: TABLE DATA; Schema: marmut; Owner: postgres
--

COPY marmut.podcaster (email) FROM stdin;
josephharris@example.org
garciajuan@example.com
jose84@example.org
john51@example.org
johnnybarber@example.com
kristina93@example.com
ehorn@example.com
valeriewilliams@example.net
wcurry@example.com
nhoward@example.com
\.


--
-- Data for Name: premium; Type: TABLE DATA; Schema: marmut; Owner: postgres
--

COPY marmut.premium (email) FROM stdin;
josephharris@example.org
garciajuan@example.com
kristina93@example.com
valeriewilliams@example.net
wcurry@example.com
\.


--
-- Data for Name: royalti; Type: TABLE DATA; Schema: marmut; Owner: postgres
--

COPY marmut.royalti (id_pemilik_hak_cipta, id_song, jumlah) FROM stdin;
8cc1c5ee-e9b4-4965-962f-63ff5fe80c59	4c560acf-2b06-4131-a339-daf64f87d10d	2000000
3b3b7a2a-5472-45da-8dd7-20fde6cdadd4	9524afcb-00d6-4833-810c-7bf6135628d1	2000000
9dc5015e-9c9d-428b-989d-015c1c2d691b	f8e9345e-39fe-4dd7-ac30-2c030af0b45e	2000000
d76e46c8-a23a-468d-816d-f33502af991e	f8e9345e-39fe-4dd7-ac30-2c030af0b45e	2000000
fc83f443-a500-4145-a994-921bf4baaebf	3f22c666-a2d0-48c5-b9fe-36c670e0d12c	2000000
55b6c978-7e70-403e-94ab-8011654e9248	1225f19b-8e3c-4d31-8433-a38f948281e8	2000000
55b6c978-7e70-403e-94ab-8011654e9248	79adc68e-5571-488b-9288-fb2d5dad273f	2000000
bc00cff3-5114-4530-8852-3f72befbfe96	98f01c7c-427f-4cb2-bc42-04ba75c22543	2000000
2231db93-e16f-4aea-9991-0f5299cdf571	1eff7dfd-5258-45e4-bf7f-0484181020e8	2000000
87042145-199a-4d67-a943-1eac7f1164d2	4d3a081c-ce7b-45e7-bfc7-bf585796a9e0	2000000
c2008e6d-494d-4647-a709-ad119d8a46d5	839eb1e3-cadc-4847-a893-d4cb12e19e56	2000000
87042145-199a-4d67-a943-1eac7f1164d2	839eb1e3-cadc-4847-a893-d4cb12e19e56	2000000
\.


--
-- Data for Name: song; Type: TABLE DATA; Schema: marmut; Owner: postgres
--

COPY marmut.song (id_konten, id_artist, id_album, total_play, total_download) FROM stdin;
4c560acf-2b06-4131-a339-daf64f87d10d	8cc1c5ee-e9b4-4965-962f-63ff5fe80c59	8cc1c5ee-e9b4-4965-962f-63ff5fe80c59	0	0
9524afcb-00d6-4833-810c-7bf6135628d1	3b3b7a2a-5472-45da-8dd7-20fde6cdadd4	8cc1c5ee-e9b4-4965-962f-63ff5fe80c59	0	0
f8e9345e-39fe-4dd7-ac30-2c030af0b45e	8cc1c5ee-e9b4-4965-962f-63ff5fe80c59	8cc1c5ee-e9b4-4965-962f-63ff5fe80c59	0	0
3f22c666-a2d0-48c5-b9fe-36c670e0d12c	8cc1c5ee-e9b4-4965-962f-63ff5fe80c59	8cc1c5ee-e9b4-4965-962f-63ff5fe80c59	0	0
1225f19b-8e3c-4d31-8433-a38f948281e8	8cc1c5ee-e9b4-4965-962f-63ff5fe80c59	8cc1c5ee-e9b4-4965-962f-63ff5fe80c59	0	0
79adc68e-5571-488b-9288-fb2d5dad273f	8cc1c5ee-e9b4-4965-962f-63ff5fe80c59	8cc1c5ee-e9b4-4965-962f-63ff5fe80c59	0	0
98f01c7c-427f-4cb2-bc42-04ba75c22543	8cc1c5ee-e9b4-4965-962f-63ff5fe80c59	8cc1c5ee-e9b4-4965-962f-63ff5fe80c59	0	0
1eff7dfd-5258-45e4-bf7f-0484181020e8	8cc1c5ee-e9b4-4965-962f-63ff5fe80c59	8cc1c5ee-e9b4-4965-962f-63ff5fe80c59	0	0
4d3a081c-ce7b-45e7-bfc7-bf585796a9e0	8cc1c5ee-e9b4-4965-962f-63ff5fe80c59	8cc1c5ee-e9b4-4965-962f-63ff5fe80c59	0	0
839eb1e3-cadc-4847-a893-d4cb12e19e56	8cc1c5ee-e9b4-4965-962f-63ff5fe80c59	8cc1c5ee-e9b4-4965-962f-63ff5fe80c59	0	0
\.


--
-- Data for Name: songwriter; Type: TABLE DATA; Schema: marmut; Owner: postgres
--

COPY marmut.songwriter (id, email_akun, id_pemilik_hak_cipta) FROM stdin;
8cc1c5ee-e9b4-4965-962f-63ff5fe80c59	robert93@example.org	8cc1c5ee-e9b4-4965-962f-63ff5fe80c59
3b3b7a2a-5472-45da-8dd7-20fde6cdadd4	christine43@example.com	3b3b7a2a-5472-45da-8dd7-20fde6cdadd4
9dc5015e-9c9d-428b-989d-015c1c2d691b	josephharris@example.org	9dc5015e-9c9d-428b-989d-015c1c2d691b
d76e46c8-a23a-468d-816d-f33502af991e	garciajuan@example.com	d76e46c8-a23a-468d-816d-f33502af991e
fc83f443-a500-4145-a994-921bf4baaebf	samantharamsey@example.com	fc83f443-a500-4145-a994-921bf4baaebf
55b6c978-7e70-403e-94ab-8011654e9248	jose84@example.org	55b6c978-7e70-403e-94ab-8011654e9248
bc00cff3-5114-4530-8852-3f72befbfe96	john51@example.org	bc00cff3-5114-4530-8852-3f72befbfe96
2231db93-e16f-4aea-9991-0f5299cdf571	johnnybarber@example.com	2231db93-e16f-4aea-9991-0f5299cdf571
87042145-199a-4d67-a943-1eac7f1164d2	kristina93@example.com	87042145-199a-4d67-a943-1eac7f1164d2
\.


--
-- Data for Name: songwriter_write_song; Type: TABLE DATA; Schema: marmut; Owner: postgres
--

COPY marmut.songwriter_write_song (id_songwriter, id_song) FROM stdin;
8cc1c5ee-e9b4-4965-962f-63ff5fe80c59	4c560acf-2b06-4131-a339-daf64f87d10d
3b3b7a2a-5472-45da-8dd7-20fde6cdadd4	9524afcb-00d6-4833-810c-7bf6135628d1
9dc5015e-9c9d-428b-989d-015c1c2d691b	f8e9345e-39fe-4dd7-ac30-2c030af0b45e
d76e46c8-a23a-468d-816d-f33502af991e	3f22c666-a2d0-48c5-b9fe-36c670e0d12c
fc83f443-a500-4145-a994-921bf4baaebf	1225f19b-8e3c-4d31-8433-a38f948281e8
55b6c978-7e70-403e-94ab-8011654e9248	79adc68e-5571-488b-9288-fb2d5dad273f
bc00cff3-5114-4530-8852-3f72befbfe96	98f01c7c-427f-4cb2-bc42-04ba75c22543
2231db93-e16f-4aea-9991-0f5299cdf571	1eff7dfd-5258-45e4-bf7f-0484181020e8
87042145-199a-4d67-a943-1eac7f1164d2	4d3a081c-ce7b-45e7-bfc7-bf585796a9e0
\.


--
-- Data for Name: transaction; Type: TABLE DATA; Schema: marmut; Owner: postgres
--

COPY marmut.transaction (id, jenis_paket, email, timestamp_dimulai, timestamp_berakhir, metode_bayar, nominal) FROM stdin;
23032644-686d-4dcc-8328-19eac3ca7f74	1 Tahun	estewart@example.org	2021-11-25 10:00:06	2021-12-25 10:00:06	Transfer Bank	145000
dc4a5db2-ba69-426c-9bc1-4e0d979356cc	3 Bulan	rebeccasanchez@example.com	2021-09-29 22:31:56	2021-10-29 22:31:56	Transfer Bank	60000
525ef3e5-5483-4902-9c9f-4a606164a34d	1 Bulan	joshua88@example.com	2021-02-05 01:22:15	2021-03-07 01:22:15	E-Wallet	30000
dc5ecec1-1c2e-48e2-a842-18f5fa293af5	6 Bulan	jennifer67@example.org	2023-07-18 13:17:01	2023-08-17 13:17:01	Transfer Bank	100000
2b2bde40-5ddd-4d29-95ad-6ece66082c89	6 Bulan	itaylor@example.com	2023-10-23 13:21:41	2023-11-22 13:21:41	E-Wallet	100000
\.


--
-- Data for Name: user_playlist; Type: TABLE DATA; Schema: marmut; Owner: postgres
--

COPY marmut.user_playlist (email_pembuat, id_user_playlist, judul, deskripsi, jumlah_lagu, tanggal_dibuat, id_playlist, total_durasi) FROM stdin;
robert93@example.org	50786e92-30cc-431d-be51-721ba92472c1	My Love	My Everything	12	2024-05-05	50786e92-30cc-431d-be51-721ba92472ca	120
christine43@example.com	9b3ad801-7cd4-4436-8dee-00ebdcefe53a	Suka ini	pengantar bobo	12	2024-05-04	9b3ad801-7cd4-4436-8dee-00ebdcefe539	120
\.


--
-- Data for Name: key; Type: TABLE DATA; Schema: pgsodium; Owner: supabase_admin
--

COPY pgsodium.key (id, status, created, expires, key_type, key_id, key_context, name, associated_data, raw_key, raw_key_nonce, parent_key, comment, user_data) FROM stdin;
\.


--
-- Data for Name: akun; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.akun (email, password, nama, gender, tempat_lahir, tanggal_lahir, is_verified, kota_asal) FROM stdin;
akmu@company.yg	ygentertainment	AKMU	0	South Korea	2014-01-01	t	Seoul
blackpink@company.yg	ygentertainment	Blackpink	1	South Korea	2016-01-01	t	Seoul
jenniekim@mail.com	1234567890	Jennie Kim	1	South Korea	1996-01-16	t	Anyang
lisa@mail.com	1234567890	Lisa	1	Thailand	1997-03-27	t	Buriram
rose@mail.com	1234567890	Rose	1	Selandia Baru	1997-02-11	t	Auckland
jisoo@mail.com	1234567890	Kim Jisoo	1	South Korea	1995-01-03	t	Gunpo
2pm@company.jyp	jypentertainment	2PM	0	South Korea	2008-09-04	t	Seoul
day6@company.jyp	jypentertainment	DAY6	0	South Korea	2015-01-01	t	Seoul
twice@company.jyp	jypentertainment	TWICE	1	South Korea	2015-01-01	t	Seoul
junk@mail.com	1234567890	Jun. K	0	South Korea	1988-01-15	t	Daegu
jisanghong@mail.com	1234567890	Ji Sang Hong 	0	South Korea	1985-01-01	t	Seoul
leesooman@mail.com	1234567890	Lee Soo-man	0	South Korea	1952-06-18	t	Seoul
snsd@company.sm	smentertainment	Girls' Generation	1	South Korea	2007-07-16	t	Seoul
redvelvet@company.sm	smentertainment	Red Velvet	1	South Korea	2014-08-01	t	Seoul
nct@company.sm	smentertainment	NCT	0	South Korea	2016-04-09	t	Seoul
taeyeon@mail.com	1234567890	Tae Yeon Kim	1	South Korea	1989-03-09	t	Jeonju
aespa@company.sm	smentertainment	Aespa	1	South Korea	2020-11-17	t	Seoul
bts@company.hybe	hybeentertainment	BTS	0	South Korea	2013-01-01	t	Seoul
newjeans@company.hybe	hybeentertainment	NewJeans	1	South Korea	2022-07-22	t	Seoul
bangsihyuk@mail.com	1234567890	Bang Si Hyuk	0	South Korea	1972-08-09	t	Seoul
taylorswift@mail.com	1234567890	Taylor Swift	1	United States	1989-12-13	t	Pennsylvania
niki@mail.com	1234567890	NIKI	1	Indonesia	1999-01-24	t	Jakarta
marmut@company.id	marmut#1234	Marmut	0	Indonesia	2024-07-08	t	Jakarta
hananattaki@mail.com	1234567890	Hanan Attaki	0	Indonesia	1981-12-31	t	Aceh
jeihansaviera@mail.com	1234567890	Jeihan Saviera	1	Indonesia	1999-01-01	t	Jakarta
adit@mail.com	adit	Adit	0	Indonesia	2020-01-01	t	Jakarta
kylasalsabila2@gmail.com	kylazs.0903	kylaa	1	Jakarta	2003-08-26	f	DKI Jakarta
akunnonverified@mail.com	akunnonverified	Akun Nonverified	0	Indonesia	2024-07-09	f	Jakarta
\.


--
-- Data for Name: akun_play_song; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.akun_play_song (email_pemain, id_song, waktu) FROM stdin;
\.


--
-- Data for Name: akun_play_user_playlist; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.akun_play_user_playlist (email_pemain, id_user_playlist, email_pembuat, waktu) FROM stdin;
\.


--
-- Data for Name: album; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.album (id, judul, jumlah_lagu, id_label, total_durasi) FROM stdin;
f60e137a-68fe-4fc7-ac7a-580068c4b220	The Perfect Red Velvet - The 2nd Album Repackage	1	75a2de5b-5530-4e85-a036-3b3a7992e2c7	210
11c7081d-dbe0-4f3d-aca9-451524224f2a	PLAY	2	545e1326-9fc6-489a-92c6-cdd1e834b710	369
d9bba892-603f-40e3-b7d3-29f38a74058d	SQUARE UP	2	545e1326-9fc6-489a-92c6-cdd1e834b710	432
876bc904-c991-4034-adf4-591d86aaee17	As If Its Your Last	1	545e1326-9fc6-489a-92c6-cdd1e834b710	213
3775c22a-f90d-4259-8796-9636c7008e77	Perfect Velvet - The 2nd Album	1	75a2de5b-5530-4e85-a036-3b3a7992e2c7	189
18836698-fa5f-4d3e-ae8a-8cd0ea7ec85b	Russian Roulette - The 3rd Mini Album	1	75a2de5b-5530-4e85-a036-3b3a7992e2c7	211
4ac7a352-1f98-4a42-903d-e0172825c848	Kill This Love	1	545e1326-9fc6-489a-92c6-cdd1e834b710	189
7e15696e-8ccf-42b9-a90c-2c0c3d2c7ac1	SQUARE ONE	1	545e1326-9fc6-489a-92c6-cdd1e834b710	211
3b8d6e1b-0e5a-45d7-b350-f2441acc974c	SQUARE TWO	1	545e1326-9fc6-489a-92c6-cdd1e834b710	197
0f0827e3-6a0a-4dd9-868c-414f0f8c2274	BORN PINK	2	545e1326-9fc6-489a-92c6-cdd1e834b710	361
f445e416-86b9-4402-ad22-b8f2efb238a0	THE ALBUM	4	545e1326-9fc6-489a-92c6-cdd1e834b710	746
f2eed0b4-1723-46b0-b83e-9a73b24f25ef	ME	1	545e1326-9fc6-489a-92c6-cdd1e834b710	174
ffe3c0da-602b-4c10-9c79-615dbdfd9f15	SOLO	1	545e1326-9fc6-489a-92c6-cdd1e834b710	169
ac57c1a2-17f8-4228-a300-d391ada9d290	R	1	545e1326-9fc6-489a-92c6-cdd1e834b710	168
19022b4d-5f25-4757-b426-2ddada9e3cfb	Candy - Winter Special Mini Album	1	75a2de5b-5530-4e85-a036-3b3a7992e2c7	217
e948dc22-64b3-495d-b441-07c8f0fc514a	LALISA	2	545e1326-9fc6-489a-92c6-cdd1e834b710	368
c753c098-2058-407e-b193-1d63b8bfbad6	NO.5	1	00f6bd7a-dce2-4627-8c41-999930725068	187
81c5cae3-7211-444a-a737-b954839beacb	GO CRAZY!	1	00f6bd7a-dce2-4627-8c41-999930725068	239
ffc9f9c9-89c3-4a8c-a3b5-91f327569552	SUNRISE	1	00f6bd7a-dce2-4627-8c41-999930725068	283
92d56ae0-1711-4432-98a4-bbe55c51e7ac	Hello Future - The 1st Album Repackage	1	75a2de5b-5530-4e85-a036-3b3a7992e2c7	220
0200872d-aac2-448b-8d6c-82e53cc3e14b	The Day	1	00f6bd7a-dce2-4627-8c41-999930725068	229
22b707c2-b408-4e41-9d5d-10e2513174f2	Twicecoaster: Lane 1	1	00f6bd7a-dce2-4627-8c41-999930725068	212
4e3b12b5-a23f-45bd-a0ce-a70b3290e897	YES or YES	1	00f6bd7a-dce2-4627-8c41-999930725068	237
378dd61f-c8cc-46ee-9c2a-698553b1262e	Summer Nights	2	00f6bd7a-dce2-4627-8c41-999930725068	388
b9b77e92-628d-488f-800f-6a7b1bf9a649	Twicetagram	1	00f6bd7a-dce2-4627-8c41-999930725068	207
50dbd6ab-87c4-45cc-9f07-a40dbd173178	FANCY YOU	1	00f6bd7a-dce2-4627-8c41-999930725068	213
8bc5aa26-6350-4ee7-8b64-3c194b990cfe	Page Two	1	00f6bd7a-dce2-4627-8c41-999930725068	208
97085362-2d53-4739-ab5b-b00d6dc2ef8b	The Story Begins	1	00f6bd7a-dce2-4627-8c41-999930725068	215
ee684345-aa41-4b93-b80f-5dd9ad5ef7e8	SIGNAL	1	00f6bd7a-dce2-4627-8c41-999930725068	196
e371f5d1-fc92-4216-87dc-c20fbc0f68ba	The Boys	1	75a2de5b-5530-4e85-a036-3b3a7992e2c7	226
f40336f2-c01f-42ad-994c-b1f7d58311f3	We Boom - The 3rd Mini Album	1	75a2de5b-5530-4e85-a036-3b3a7992e2c7	195
6b6f6853-dc1d-4ab3-9083-d157acaadd90	I GOT A BOY - The 4th Album	1	75a2de5b-5530-4e85-a036-3b3a7992e2c7	271
e8a1efb5-e531-4b36-8ca0-8887611a84cb	OH! - The Second Album	2	75a2de5b-5530-4e85-a036-3b3a7992e2c7	389
77e54434-7506-4843-a3d0-3b5e7a7f6186	Lion Heart - The 5th Album	1	75a2de5b-5530-4e85-a036-3b3a7992e2c7	224
2c2e25ea-a59e-4182-a4b7-ca87a01834c8	Genie - The Second Mini Album	1	75a2de5b-5530-4e85-a036-3b3a7992e2c7	230
6464f52c-9553-4279-9832-0713203d0453	Mr. Mr. - The 4th Mini Album	1	75a2de5b-5530-4e85-a036-3b3a7992e2c7	235
ae5f142c-0dda-4cfd-a788-8e2dd013f8d1	FOREVER1 - The 7th Album	1	75a2de5b-5530-4e85-a036-3b3a7992e2c7	202
76f230c2-f664-4d90-9f85-07092fdc5d6d	Beatbox - The 2nd Album Repackage	1	75a2de5b-5530-4e85-a036-3b3a7992e2c7	205
573eae56-f4ee-41bf-829e-71daefe41627	Girls Generation	3	75a2de5b-5530-4e85-a036-3b3a7992e2c7	694
6f52f147-a5b3-48d9-be34-d3e3e9efee7e	The ReVe Festival - Finale	1	75a2de5b-5530-4e85-a036-3b3a7992e2c7	210
75ebd469-9473-466d-b7ee-1f5ff44cb99e	The Red Summer - Summer Mini Album	1	75a2de5b-5530-4e85-a036-3b3a7992e2c7	191
47a30079-fa0d-47cf-8869-1d9c886becfc	The ReVe Festival 2022 - Feel My Rhythm	1	75a2de5b-5530-4e85-a036-3b3a7992e2c7	210
fb12a1a2-0d36-4903-9d10-2d857c3afb64	NewJeans - OMG	1	6955e9ab-36f8-48f7-a187-6597dfb486c8	212
c31276e5-8c95-438d-9b14-69aac7111d58	Hot Sauce - The 1st Album	2	75a2de5b-5530-4e85-a036-3b3a7992e2c7	387
362dfbf5-4b4a-4f2c-b263-f378dab90f63	I - The 1st Mini Album	1	75a2de5b-5530-4e85-a036-3b3a7992e2c7	206
941f5652-0731-4456-b26e-4bf05c1ff1a2	My Voice - The 1st Album	1	75a2de5b-5530-4e85-a036-3b3a7992e2c7	209
5197a072-baa2-48db-88f2-e150c7c94ced	INVU - The 3rd Album	1	75a2de5b-5530-4e85-a036-3b3a7992e2c7	204
c6bcc800-527c-46a8-b113-4503cc97c3be	Armageddon - The 1st Album	1	75a2de5b-5530-4e85-a036-3b3a7992e2c7	196
b062bc38-e821-4803-8e91-e4b18e46a868	Next Level	1	75a2de5b-5530-4e85-a036-3b3a7992e2c7	221
30d667ed-ccce-42a2-b25d-4414e58f37ae	Supernova	1	75a2de5b-5530-4e85-a036-3b3a7992e2c7	178
2c02b70e-1bb6-4231-8784-9b1eebb327ca	Drama - The 4th Mini Album	1	75a2de5b-5530-4e85-a036-3b3a7992e2c7	214
3a2cf6c6-7028-40a2-8033-0afad2aefadb	Black Mamba	1	75a2de5b-5530-4e85-a036-3b3a7992e2c7	174
a45c7d37-6baf-41d6-8e3b-a2f4d5f04f11	Savage - The 1st Mini Album	1	75a2de5b-5530-4e85-a036-3b3a7992e2c7	238
a2b28fdb-b308-4fde-87ed-e4f4f041bc90	BE	2	6955e9ab-36f8-48f7-a187-6597dfb486c8	406
18494fa6-caa8-4e79-80a3-f13879e17cc5	Skool Luv Affair	2	6955e9ab-36f8-48f7-a187-6597dfb486c8	469
6f843399-612f-4181-9ded-f1f3cc5d4936	You Never Walk Alone	1	6955e9ab-36f8-48f7-a187-6597dfb486c8	274
9376c86b-c1e7-4d95-8e6f-af947f048da3	MAP OF THE SOUL : PERSONA	1	6955e9ab-36f8-48f7-a187-6597dfb486c8	229
85c13bc6-aae6-48e0-9149-70fa48ca4a8b	Permission to Dance	1	6955e9ab-36f8-48f7-a187-6597dfb486c8	187
3876f18f-2bef-431d-9cba-13da56a0eeee	Love Yourself - Tear	1	6955e9ab-36f8-48f7-a187-6597dfb486c8	242
4dd64cb2-9339-450b-8d55-d00cafebad0c	The Most Beautiful Moment in Life Pt.1	1	6955e9ab-36f8-48f7-a187-6597dfb486c8	210
8bb46478-2f20-4444-9458-1335fd610110	Left and Right (Feat. Jung Kook of BTS)	1	6955e9ab-36f8-48f7-a187-6597dfb486c8	154
8d290c1f-6618-45f6-b78b-736aeb9f5724	Music Of The Spheres	1	6955e9ab-36f8-48f7-a187-6597dfb486c8	226
3f95b0df-94d3-4dd2-bfda-e9f1b97982fd	Fearless - Big Machine Radio Release Special	1	a3b9d84f-4f6e-495b-aed4-717b2d217bab	236
4c2b470e-60c1-491e-a48f-53c5ae878de3	Love Yourself - Answer	2	6955e9ab-36f8-48f7-a187-6597dfb486c8	445
3287fabe-eb67-4ecf-a042-c5e306b3d045	Wings	1	6955e9ab-36f8-48f7-a187-6597dfb486c8	217
0ce4e6a4-283d-4948-bfb2-997c80ccbf2d	NewJeans - Super Shy	1	6955e9ab-36f8-48f7-a187-6597dfb486c8	154
00bba711-30cb-4c21-88a6-e8241cf58416	Ditto	1	6955e9ab-36f8-48f7-a187-6597dfb486c8	185
39396aa4-c09c-4ba8-b40c-948d8e12656a	Fearless (Taylor Version)	1	a3b9d84f-4f6e-495b-aed4-717b2d217bab	231
7c6c7135-6f22-479d-80f5-4ceb20c1482f	1989 (Deluxe)	2	a3b9d84f-4f6e-495b-aed4-717b2d217bab	462
08fae816-d41d-46da-8968-700e2649973b	reputation	1	a3b9d84f-4f6e-495b-aed4-717b2d217bab	209
0186629f-a665-4455-b089-e036fb29b976	folklore	1	a3b9d84f-4f6e-495b-aed4-717b2d217bab	261
6d34db02-715f-46aa-ac69-14846d8fb03a	Lover	2	a3b9d84f-4f6e-495b-aed4-717b2d217bab	399
afae4468-8844-4d5c-90c1-2ade93383400	Speak Now	2	a3b9d84f-4f6e-495b-aed4-717b2d217bab	645
d6af27f6-66ad-4370-af78-cb5f8dc1534b	Red (Taylors Version)	1	a3b9d84f-4f6e-495b-aed4-717b2d217bab	329
129a82bb-225d-4cf8-9b99-932c8fde57f5	Every Summertime	1	dcc68f33-0aa4-4e37-bdc1-f69babb283bd	215
cc4634af-0a40-4235-a005-96d55eef05a2	Nicole	2	dcc68f33-0aa4-4e37-bdc1-f69babb283bd	522
b0143b86-471a-4edf-aecd-8b7fb9712132	'Run Devil Run' The 2nd Album	1	75a2de5b-5530-4e85-a036-3b3a7992e2c7	201
\.


--
-- Data for Name: artist; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.artist (id, email_akun, id_pemilik_hak_cipta) FROM stdin;
d6500923-008f-408d-9bdf-048af7be8d35	akmu@company.yg	fb58bdc7-9a70-468a-8bb2-7455a1976734
7aa5ed78-cd20-47ce-be01-99c17fc7d07c	blackpink@company.yg	bd58a46e-acc7-4758-8a4d-23371e21ba2f
a57d46e5-a621-4585-b214-0f1d82b62813	jenniekim@mail.com	5b7ae832-c3ba-497c-950d-fb0c7d2dd016
8589aeaf-53cf-4259-8e5b-1683789c02b4	lisa@mail.com	02f5d303-88e4-400e-908a-4e8c3a9800ef
26881b70-ec1f-43ff-b16c-79475530345a	rose@mail.com	fd853044-1e1a-487b-af09-aca401c00bd4
8189b2d8-3607-4052-b28c-de06f742c9f7	jisoo@mail.com	bbab8b12-25a5-4405-a639-104d21c7234c
58a936de-7189-4f9c-bc95-70a381ade7c1	2pm@company.jyp	46475d65-9cd3-45ae-b7af-c4f1b6422053
46a40c58-19f0-43ef-8c38-f58af76b837b	day6@company.jyp	99a18df8-aaa1-4358-af61-a411d63baeda
a183015c-d7ef-43b3-8a6f-8b9f3ed14611	twice@company.jyp	66f0cdb2-e32b-44aa-a8f4-ff2c6ca463e1
ec126021-63fd-4a26-8c85-4290856af06f	junk@mail.com	8a37f267-12aa-4263-b24c-fd001ed69edc
26da98ad-8bb0-49d8-b365-975e033a7b88	leesooman@mail.com	32d9f686-e3eb-458d-a4c5-299d0c51ac1d
c0ff04db-37cb-43a0-8bd9-05ecf1e56360	snsd@company.sm	6a014a0d-57a9-4605-8ca1-81096a7c9919
fe1b72b7-bf41-429f-ba1b-49af6b2a589c	redvelvet@company.sm	0152bb84-7795-4431-a372-3d082bd6028d
7aa78e54-d913-47de-9316-6da9654a7b13	nct@company.sm	59f9915c-da63-48b8-a467-5d7d2c00e950
43f227bd-41b5-4252-8b62-88c5d032ab60	taeyeon@mail.com	e094e569-e4e0-4580-b54b-de328022550d
bd34df7e-f9cf-4c7d-b4c5-78173c8cc5f1	aespa@company.sm	bd2a2051-01d3-49ff-b356-ff91344cadee
8dcc7029-81c9-4e4a-866a-0cb50876ddb7	bts@company.hybe	f5c2e08d-fe32-4161-bf41-c21e4823c1f9
613263d6-10a0-459e-9d6f-16745edc623b	newjeans@company.hybe	9edb9be5-6e6c-44c7-9c62-5780f1d8d341
23448ee8-0425-4ac1-8262-4831d73f0517	bangsihyuk@mail.com	b14d67ee-f29d-4d69-a36e-f1c1ac953e47
6a24ffc6-ca8d-4ffb-bb07-9856795a341b	taylorswift@mail.com	13c7b5c3-58f0-4dfd-9044-7cd7950eb566
89bcb69b-3dd7-4d79-b494-e8502ea6c979	niki@mail.com	dee61aea-0a86-48ee-94ae-3b83ee4dfaca
7c0a190e-7497-4a61-bd7c-104fbbde407b	marmut@company.id	50a3b011-b6fd-4bcb-999a-2997143e7de1
aff1cdb7-ea90-4790-9728-462d63470c2c	adit@mail.com	f4fa0ac2-bb1d-46f5-8e54-c38241de1f1e
\.


--
-- Data for Name: auth_group; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_group (id, name) FROM stdin;
\.


--
-- Data for Name: auth_group_permissions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_group_permissions (id, group_id, permission_id) FROM stdin;
\.


--
-- Data for Name: auth_permission; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_permission (id, name, content_type_id, codename) FROM stdin;
1	Can add log entry	1	add_logentry
2	Can change log entry	1	change_logentry
3	Can delete log entry	1	delete_logentry
4	Can view log entry	1	view_logentry
5	Can add permission	2	add_permission
6	Can change permission	2	change_permission
7	Can delete permission	2	delete_permission
8	Can view permission	2	view_permission
9	Can add group	3	add_group
10	Can change group	3	change_group
11	Can delete group	3	delete_group
12	Can view group	3	view_group
13	Can add user	4	add_user
14	Can change user	4	change_user
15	Can delete user	4	delete_user
16	Can view user	4	view_user
17	Can add content type	5	add_contenttype
18	Can change content type	5	change_contenttype
19	Can delete content type	5	delete_contenttype
20	Can view content type	5	view_contenttype
21	Can add session	6	add_session
22	Can change session	6	change_session
23	Can delete session	6	delete_session
24	Can view session	6	view_session
25	Can add label	7	add_label
26	Can change label	7	change_label
27	Can delete label	7	delete_label
28	Can view label	7	view_label
\.


--
-- Data for Name: auth_user; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_user (id, password, last_login, is_superuser, username, first_name, last_name, email, is_staff, is_active, date_joined) FROM stdin;
\.


--
-- Data for Name: auth_user_groups; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_user_groups (id, user_id, group_id) FROM stdin;
\.


--
-- Data for Name: auth_user_user_permissions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.auth_user_user_permissions (id, user_id, permission_id) FROM stdin;
\.


--
-- Data for Name: chart; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.chart (tipe, id_playlist) FROM stdin;
Daily Top 20	83fc89d1-4f76-4739-8f4c-3205213e9a8a
Yearly Top 20	2b3dc212-2146-40a8-8293-ea98b91dfe37
WeeklyTop 20	ffcd833b-1e51-4a26-b2cd-d66aa8b1a1d5
Monthly Top 20	c0c6cf05-8091-413f-855b-cbcea0e4cacc
\.


--
-- Data for Name: django_admin_log; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_admin_log (id, action_time, object_id, object_repr, action_flag, change_message, content_type_id, user_id) FROM stdin;
\.


--
-- Data for Name: django_content_type; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_content_type (id, app_label, model) FROM stdin;
1	admin	logentry
2	auth	permission
3	auth	group
4	auth	user
5	contenttypes	contenttype
6	sessions	session
7	login	label
\.


--
-- Data for Name: django_migrations; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_migrations (id, app, name, applied) FROM stdin;
1	contenttypes	0001_initial	2024-05-13 16:10:37.434498+00
2	auth	0001_initial	2024-05-13 16:10:38.221939+00
3	admin	0001_initial	2024-05-13 16:10:38.424923+00
4	admin	0002_logentry_remove_auto_add	2024-05-13 16:10:38.453155+00
5	admin	0003_logentry_add_action_flag_choices	2024-05-13 16:10:38.524712+00
6	contenttypes	0002_remove_content_type_name	2024-05-13 16:10:38.662613+00
7	auth	0002_alter_permission_name_max_length	2024-05-13 16:10:38.754367+00
8	auth	0003_alter_user_email_max_length	2024-05-13 16:10:38.845766+00
9	auth	0004_alter_user_username_opts	2024-05-13 16:10:38.893698+00
10	auth	0005_alter_user_last_login_null	2024-05-13 16:10:39.005573+00
11	auth	0006_require_contenttypes_0002	2024-05-13 16:10:39.048595+00
12	auth	0007_alter_validators_add_error_messages	2024-05-13 16:10:39.118927+00
13	auth	0008_alter_user_username_max_length	2024-05-13 16:10:39.236912+00
14	auth	0009_alter_user_last_name_max_length	2024-05-13 16:10:39.32699+00
15	auth	0010_alter_group_name_max_length	2024-05-13 16:10:39.419702+00
16	auth	0011_update_proxy_permissions	2024-05-13 16:10:39.467936+00
17	auth	0012_alter_user_first_name_max_length	2024-05-13 16:10:39.583999+00
18	sessions	0001_initial	2024-05-13 16:10:39.747361+00
19	login	0001_initial	2024-05-16 12:04:40.049614+00
20	login	0002_delete_label	2024-05-16 12:32:25.472624+00
\.


--
-- Data for Name: django_session; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.django_session (session_key, session_data, expire_date) FROM stdin;
84xkurnys7smmvmehwb2uh61xk0a6eru	.eJydjs1OxCAUhV9lwnoYqKUzpauJWxe6cWXM5BYuU1KQhlKT0fjuwljdudCQ8HM553znnSwzxhN6sI50BMZlBL8cz-W9U8GT7ZcgXSbM_68YrbGov8cxOJxJ90QgJjsn8rwlLp8nB-eljO-nZL19Q73RqK2ClG9TDCmo4HLGC3jYZGbxLbEUGFKaOsaqm8OO51V1LeecqSHnM3IV3aIJEX-VapiHPkDUrBRkI7rgYHJwKb2Y7GvQLa_oQWlBhaj3tNWIlHPstUKDTS1Xzt3V-bA6_8lrayObHE0rITkVhSz3BqlQbSM5F9CgWXmP2f5XWtl-WOTjE9qSlJA:1sAoO1:qSq4ORr6qfncD3CfQ8Brt43m5mqou3_IpXrv9qp322k	2024-06-08 10:12:25.728019+00
5it3eijgkh46mlc4soosz9cvsn6ov3wh	e30:1sKHLY:hayZbYuo-VONtgyGsxvOBgcaYc_f8l3ZmMq1b9FM-RM	2024-07-04 12:57:00.840726+00
l6ycg24y7oh0ce50y7s5dotm9r4s9z4c	.eJw1jEsKgDAMRO-StfTjRunKe4hIqVGLFiVNBRHvbkVkVvPmMRekiNRjsH4FA3ZJiw2pmd4u3Bag-AQ-d8z7geRHj8OPaVsxgmnBEvvI0GVO79HMvBspdVkJlaNNrZSSbs6ehPsBmism4w:1sAtZd:_RoU68ymBDfYaKgQpGLPgoBFUKM-Mu643H3CsIYH9IY	2024-06-08 15:44:45.602233+00
1jvwe3c8cmz3egrfyk9048lxnsw1g8sc	e30:1sKHMj:byTp0BlyTkk31aCaKaihteK4rV8I-vVNlcoPYRCEuKs	2024-07-04 12:58:13.583285+00
iac6idtlxffykzy383rd0zy99lhd7yvh	e30:1sKHlO:qP2qpLXJ2EpiAUbImHljzlYpJubCB76wD-T6zqwohjE	2024-07-04 13:23:42.047233+00
qjrrlgevvglvsdcw7m6idm4551z8nnv3	.eJyrViotygktTi0KyEmszMksLlGyUsooKSmw0tc3NDLXMwBCQysLAwMD_ZTE4oyk_MSiFP1SoHIwUQDVo69UCwBsphhi:1sCirV:w0rD6GeP4poCiJgNDAC3uynVNAPAc85XQSlNcQNRZNQ	2024-06-13 16:42:45.343233+00
a35fmsytog0b8dsy0810cmxewhkgf4fq	e30:1sCisJ:uL18BM9Xi4_uWn5YBpt-SIhEAPw_lCFXePVIC8bW6LE	2024-06-13 16:43:35.01052+00
kal1xzi08jwf94dkehitt57l7gx71fja	eyJ1c2VyX2VtYWlsIjoibWFybXV0cGVuZ2d1bmFAZ21haWwuY29tIiwidXNlcl90eXBlIjoidW52ZXJpZmllZCJ9:1sFDLN:TbEjy1F3edDR8aRn-waIrdJUz-ZuuVNSelwWp7pKVg8	2024-06-20 13:39:53.168633+00
1lyist13e49lyuz910cg9b7poybyw9qo	.eJyVjU0LwjAMhv9Lzm5t577ak3cvXjyJSLp2Wtax0XXCEP-77fy4SyCQJ3nyPmCetLvoHo0FAdjNHfbz7hrntBl62LwP_DLqsL9rZ1qj1Re7weoJxAnQeTN5OAfu7F7bweLB4mIjFHDzfhSEsKxKaSgmakopUTjd5IBOkfiLdKs1fixSS85Zvm2SouZlkvOqTWRLm0SygrclZYplOYE17xj0f9Ni-2XB8wURz1bj:1sCitP:J9eyhFcg1OBijXF1Wn4kKtCSXpApmvmAxlKxCYxce_A	2024-06-13 16:44:43.697757+00
b1715xo6wd7uli5v8bm6zvyezkchzsqo	.eJyrViotyvFOzcnPSQzISazMySwuUbJSyigpKbDS1zc0MtczAEJDKwsDAwP9lMTijKT8xKIU_dLi1CL9bLCuAqgufYskS0tDE-NkXVMLSzNdE0vzNN2kNINk3SRDU8s0MwPDFEMjE30lHZB9oUDtpNoGIuB2KdUCAB_FOo0:1sCiyN:4xP7KY_n0hMTPFbjqKL_XT7ELI8qFvzWu07SAaJzhN4	2024-06-13 16:49:51.786839+00
7gtlvkm6qh7j58szv1om0l0vzqmr37nc	.eJw1icsJgDAMQHfJWRygJ_cQkdLGErCmJFERcXdbxNv73LAryozZ0woODNWG1KQPnKH7rl0F6zxQaCGMfxZeUcGN4MVIrWblLZ1ChlKlcAxeG0_PC36FJO0:1sFE5x:AVv4lV_1VYl45dFEbEIoyNV5qY-0u8yJMJ3ZR8f29_M	2024-06-20 14:28:02.067436+00
ziq4tu3lkl7dk15oojf88rtz6ctyyp8b	.eJyrViotyvFOzcnPSQzISazMySwuUbJSyigpKbDS1zc0MtczAEJDKwsDAwP9lMTijKT8xKIU_dLi1CL9bLCuAqgufcsk48QUCwNDXfPkFBNdExNjM12LlNRUXQOD1KSU5NS0VFNjS30lHZB9OG1IzkgsKoEqCgXaQaqTQATcQUq1ABu6RWA:1sGMtm:sBcF_CcvcNv6Sfhe052Y22-9XwhtqHW6bXahTaOcxb4	2024-06-23 18:04:10.996756+00
q76ajbp2asf2og1xlq8ect3y4mjjybsk	.eJyrViotTi2KT81NzMxRslLKyi_OKE20sHBIrUjMLchJ1UvOz1XSgagpqSxIBSopSy3KTMtMTYEJF-XnpBYrWUUrFeSnJCcWl6QWKcXWAgBdXB8-:1sFEin:e5jAqkXUGvce7OFvR2lpYePExiWjTvJTQX0JoDNZ0QY	2024-06-20 15:08:09.892538+00
14h848fndb9ww151yuu8dlq0349y4f4u	.eJyrViotTi2KT81NzMxRslLKyi_OKE20sHBIrUjMLchJ1UvOz1XSgagpqSxIBSopSy3KTMtMTYEJF-XnpBYrWUUrFeSnJCcWl6QWKcXWAgBdXB8-:1s8B3B:F1vrznnxiVKnX0OYXcJcFUtOEEYCyqKfl6yKy9y3YI8	2024-06-01 03:48:01.651624+00
b9cr5whtce8p923aybncm45x5sf8neem	.eJyrViotygktTi0KyEmszMksLlGyUsooKSmw0tc3NDLXMwBCQysLAwMD_ZTE4oyk_MSiFP1SoHIwUQDVo6-kAzLGOzUnPyeRVIOywbrgRgGVJBmnGhnrpiVbGOqapJkn6yaaGFvoppgbWlpaJqcamhkaQO3DaUNyRmIR0FG1ACxsRHA:1sCjv0:wdiWf-nsxTptCHiJAAFoJWLbVOcnfEdCYqwDZT-E9jM	2024-06-13 17:50:26.458808+00
2wyeq73pnkblntyo1q0jlomasgf1yfe8	.eJxljkEOgyAQRe_CuhHtpoZV79E0ZiqjEEHIDEhs07sXF66a2fz_8vIzHxEJtyGTE0qYlKKSsrvemrZep_q2b6UGNq8ApGVmJLmgCw6ig91ZTlJcxIEHq-uAzwa8Bz1BKfAGYgOa77MH65ox-NPFA1QdlrxuSHayqP-ttEes0imcmIJDFuohgFJ9oGIO61zIJqRaYtAj8JGf3x8kd037:1s8SeK:OaedIfeBV0KyJ0WgfRmzkvW1h3CuLIkOESjodxmKOuQ	2024-06-01 22:35:32.122986+00
gc3n67z73oc716rntq4mys887i2bspa5	.eJyrViotTi2KT81NzMxRslJKzC7NTswtdUgH8fWS83OVdCAKSioLUoHyZalFmWmZqSkw4aL8nNRiJatopcSiksziEqXYWgCwIh0j:1sCyrn:4ZJrEj488_rScBq4Wkb-5eqgs5XGaGX0Y842pSn3rk0	2024-06-14 09:48:07.980397+00
8kk7k608c3xe8dgt1ct4252rndzjym6g	.eJyVjjEPgjAQhf9LZ0sPQUEmdxcXZ3NtDyEegbRlIMb_bkF0czCX3HDve-_dQ4yOL57cmXHi1gdRiSaEoVIq3RYJxEmrEgCURd_oHp1VY8SXNaweJTZzzIm4Z_w36L64vlEHnaEtIZWFsbnM82wvS0skAUhbQzXtssPa97PBNOjeT8WCK3XYzmyNziOjJj7e5lNi-u7DhGmgiCyqeL4AtjNZBg:1sFF3r:nraeVFdzrS62NFJH49mMzyy2ukhwp9i3MSiL83m2eP4	2024-06-20 15:29:55.526411+00
z7pa16u3wnffl8olawoqt6xbnclgomdg	.eJw1yksKgDAMRdG9ZCwuoCP3ISKljSXYH0mriLh3W8TZe5dzQxXkFYMmDwr0XuOBTBuhnVyPo0kBhk-VK2NDP_gzJ48CagbNhaS0LCm6k6kgt5OTNVr6Xp4X1REoKg:1s8YOn:cvcixWz_ieQg2-uf0adCqRBK7FwIl5mO-Gavzl1kbEU	2024-06-02 04:43:53.812757+00
7u6bfif3zy4ipv4lqp3hwngnnbiz2wce	.eJyrViotTi2KT81NzMxRslJKzC7NK80rSy3KTMtMTXFIBwnrJefnKulA1JVUFqQClSGUKNUCADjYGHc:1s8ikj:mmVgjTDWCrNIGbu58KQS5syW4rnS0gw9MXZH4s0z1kg	2024-06-02 15:47:13.300908+00
mmlm2ioqpwzaoc9r0mzwsflwzg9kdwnh	.eJyVjEEOwiAQRe_CWmQQtJQrdOPGAwzMGIwkbYAujPHu1qZx58L85K_ee08xlyy8SK1NXil96PawTHsHAComLE2J3Qe6VC7njI98q-2nQFhTGLGQmhd8vWlztszAecz4b-i-Wt9UHwySAy27SFZaa07SEbME4ECRr3w0vRKvN9KzRWA:1sGiQ3:Y24p2VTyXsw-Ct7eTCx-YxBmDUZCGqgJm4n5W8t2YZE	2024-06-24 17:02:55.841595+00
aujo0keb59z8nwnvvbd5xu3byvgjaz4k	.eJw1jE0KwjAQhe8ya-mkbipZeQ-RMjajCW1ImEwKUry7yaK81ff-DsjC-1xlAwteNVvE8ToNpmm0N2MMOir-lUgc1sKCiydRhAt0mjlS6FNa60qx3j-dhyXFs6DfzC3fWcI7sDttSRsXsA9oZ6EoPH9_SjQuxA:1s8j5G:5PDJ6uBiRoxwpHnhKCmcR3-udyN8nK7yGK8r5mzxs_w	2024-06-02 16:08:26.977756+00
f27f9z6oehf3yug9idu33k34muo7g695	.eJyrViotTi2KT81NzMxRslJKzC7NTswtdUgH8fWS83OVdCAKSioLUoHyZalFmWmZqSkw4aL8nNRiJatopcSiksziEqXYWgCwIh0j:1s93uv:RmxERjA14iBF7QjrWhH8C25tvN35YhltwcE3-96dj7k	2024-06-03 14:23:09.365506+00
j0063c7f4sgltbha6filt5qshqooo8yp	.eJyVkMsKwjAQRf8la9skbbGPlXs3blyJyDSZ2tKUlDyEIv67SanuXEhgIDP33Hk8iTeKNKR3bm4o5VmZsvB4UzHGqOjBOEp2UXS2aE4KFjVY9xOQYPtWg5HUB_ka5o3ZbI6otIJ_jcaV-loFSZtjliedqHhSdKVIoMirRJa8rmuBfM_Z2i-wN5xgiCvC6EeY_OEe_6nQ00fglhlD_YFm6AaUn7TRCi1pLiTcII56fb0Bmk5gxg:1sD2oK:arGQvVETTdRJtwNv7A1qfZE3tndwQrMDlhvYZlFreTk	2024-06-14 14:00:48.060984+00
3zxmtuykx3qverh3jdybkctomuvxzalj	.eJyrViotTi2KT81NzMxRslJKzC7NTswtdUgH8fWS83OVdCAKSioLUoHyZalFmWmZqSkw4aL8nNRiJatopcSiksziEqXYWgCwIh0j:1s94d7:0cuCVhUnV62g3Sn85cLrXmZa7aPO23XFvI_2Zzb5rFw	2024-06-03 15:08:49.142472+00
gczotjcj1fkdmj7x0gmrip8s362y7ond	.eJyrViotTi2KT81NzMxRslJKzC7NTswtdUgH8fWS83OVdCAKSioLUoHyZalFmWmZqSkw4aL8nNRiJatopcSiksziEqXYWgCwIh0j:1sE3ox:9p5qwBYbdbfkY9IF5CPDUQ4VSbL9o3ErnNKEjTApt6U	2024-06-17 09:17:39.035233+00
l6k3u4t060gqevgtggcxrlofjcbcrpxd	e30:1sABOV:4mpHrFlLd5VqKYsY2mUOR43iySoNQlsuD4r9pBxZOlc	2024-06-06 16:34:19.784843+00
4xh7pm90ggeidyt6djk7um533dtbjzqd	.eJyVjzEPgjAQhf_LzZa2KFI7ubu4OBljjrZIQwmkFBNi_O8WUDcHc8kl9-6-93IPGHrjr6ZB60AC1kONzbC_TXOi2gZWy0EYOxP3d-NtaY3-yL51pgd5BvTB9gEuUffuYFzr8OhwdJMooQqhk5TyNE9YLC4FY4xq7KuiRa_p5EXrmereFC2yXO94xoguRUk2pcpIIXZIFDdrrXCbcpFSmPNOEf83bWrfrMXmJ6qq-B6F5wvK7mGI:1sEvjM:arE9SnirJP9ozjTzdYAaaoZ7T1igauFTeVafukEpLcw	2024-06-19 18:51:28.104112+00
d5yp76isk8o1ptndvhhr9m0qqdxhhxns	eyJ1c2VyX2VtYWlsIjoiYXJzaGFkQGdtYWlsLmNvbSIsInVzZXJfdHlwZSI6InVudmVyaWZpZWQifQ:1sFCoG:J4ZUrmpGKO5OjOIqEoPLsQ4pgjQIs8bOuMSeAE-vfLM	2024-06-20 13:05:40.747005+00
1qdjrnq9wofd1jryo7ua05lrd4hb2jrq	.eJyVUMEOgjAM_ZedhQ0FxZ28e_HiyRhTSpGFwcg2NMb4725GvXkwTZq-5r2-tnc2Wc0ka70fJefZfJWKEJkshRAcW7Ces1kkbUkbDTsNN62c_ympwbWVAVvzyZHl3Us1vlUcBS6xEUVSinWW5NmiScqiqBKskEBQjoD49tsH-b9uMX294piAT9SDiidCNw2gtTWaNufYS9H0H5K_jRQ4F7KqUVR_2pHsmDyw8Ie4x4w5M5yvVnmyAYymRnCxPj6eNWhsdQ:1sH5Hm:JGKPTBLIr6pk_7RXY0CABkmqW61vIqAaux23k87vK1w	2024-06-25 17:27:54.055991+00
wyhpltc8cjcfgdxrbbysz0zza4mvkj47	.eJw9jNEKwjAMRf8lz7J2vih98j9ERrbGrdi1I80cIv67qaLk5d7DuXnCWog7mjFEcIC3NWGMnCOdxsqaIc-w-0ryWEidO3G4BvI_XOUC7gzIEoooLjmNGwch1rJkP2Cp-aIDjl3Km36ZRBZnTLs_NFavdUdrrfFYpj4jewMfWcU_gtcbuUk6uQ:1sOtMX:gc_H-3kYLAEZT7RMYvFlozOL8CQJnGSPKPNTYtVUYXY	2024-07-17 06:21:05.873989+00
w03dagvrq5pnr3jz00na9619fiwtvdg4	.eJyrViotTi2KT81NzMxRslLKyc_JLEgtcUgH8fWS83OVdCAKSioLUoHyZalFmWmZqSkw4aL8nNRiJatopYL8lOTE4pLUIqXYWgAM_R5b:1sKaly:uQu0FYBX5NpXHdAkcNWU4nUHr4x5fy24AQ0vjFMCxBk	2024-07-05 09:41:34.521286+00
53olgxf8j41tllef64awwsgs9u2aj0zq	.eJw9ikEKgDAMBP-Ss_iAnvyHiASNEmhNSaJSxL9bEbzNzs4Fu5GOlJAjBEioafdukpRxKy3P0HyBl0z1P0h5Yfq1SiSD0AOqs3nVJtt6KjtpHVnmCe3l4X4ABF4mPg:1sR6co:J6FC289wQE6U2GysQRr3sbN4O-FrAf25Z4hM3jtTdms	2024-07-23 08:55:02.561782+00
stwakgyvq0oat6o2wwbh70dnbwna0aki	.eJw9jEEOwjAMBP_iMzT3nPgHQpVJDI3k1JbjgFDF3wkgOO7s7G7QG9lMFQtDBBYuSn64vvOUpMLuK_hDafQ3snIplH_YhKlBPIJKTticDE6jMp5XuQ9_cdcWQ6hotft-7dN4SMQTqoaMbTkLWg7w2Qz_j-D5ArnSNs0:1sKamA:66b2tpyyHPnV50g4buZYPovi3j_8moPNPeyuI4FAe4g	2024-07-05 09:41:46.663316+00
qf233qfcsoremsw6lpob1wyxtpnf995m	.eJyFjs0OwiAQhN9lz7bQP4ucvHvxboxZKFVSWhqgGmN8d0HTs9nL7GQy37xgcQY4zAafRvsAG1i8chc1ok4-DsuExjhr1P6avFzacQ2F56xi5q6c7rXqVjuFPfAToAu_Sm-n68PpoFx8ZttJ9EmfN4l-UMYaPK4DONxCmDkhRdnmNF7BGaWUrAsJStpL0TZZKViT1WxbZTtWy6zfiZqVRdOLqiKRI1AOsa2EL-Uy2cf_bnh_AInfV0c:1sJ8Ty:Y3MrZObgDSQDsInmGP_ePgkDO7feffUdZSM6ek4aymQ	2024-07-01 09:16:58.79626+00
jki5m8i0g40pnsx5ep27kk4z7d4l89qh	.eJw1zEEOgyAQheG7zNpC0qUrb2JGnBYiIBmGNo3x7h1MXP75Xt4BjeOc9y-M4EVKHa1NyKnJIzfzIXYUDZZinUcWC0Pf6_ZKrQXdpvnsUIlnShi6Y11xeieMxm31RvkVUmtZf8Mr0ArnHwl4K8A:1sKamt:DSnulEGNq_r8Lc4FEKtGv3tiLq1fVGLImxEM-GWlJug	2024-07-05 09:42:31.213815+00
qguouurqjp9klk139v0nkq6fi0jjdwqo	e30:1sKHMB:1Lvl9e4SRiiXUN0Jfm3KayQY1eft13_ZpYzxGwvviqY	2024-07-04 12:57:39.696757+00
9ejrmk1awcz9y64evdwzsxvxll703v1y	.eJyFjr0OwjAMhN_FMyUJVKTNxM7CwoQQctMAUV1SJSmoQrw7CT8z8uI7fXf2A8Zg_NH0aAkUYDdekcg7Mutz9uba9TD7QHEaTGJuxtuTNe3PznAAtQf00YaY7OCu57u30fgkBtdqDHk_pIDPV7ybkKKFt94YcoRbwolyWsElxkExJhZyztMIVXHOWffGGFIz9mzJ66pqq1VRSlEWZVnXBTZSF1rWXEuhG8EF-9Tv0ot_y4cvkDMN6i6BC3i-AJH5Wss:1sI507:kYJX-v63Kb6NqHfcv8bTbEyDL_xCc8PLipxA8RQ-R9I	2024-06-28 11:21:47.512539+00
41832jbw9pwhvym958mamqsjexy7h8vb	e30:1sKHNR:t8KN546yAU4oXGUkuBHwVFh6aP3UrkEX_J50Vz8flkE	2024-07-04 12:58:57.253121+00
7zu38ueyothmpqe732yp1hgcpli4qeui	.eJwdikkOgzAMAP_iM8FJCIHmC1z4gk2NqOqqFYQDQv07i-Y0mtlhnRUSDBPNGYrLOtGvUq-06WvJZ5ty_iVE55vSnrjUWmvxfW9IyusHfRQah4aMl0AmuMiG2xhMXdWB-SnC8YHwPwCMOSFj:1sIjW4:t59mk8psw-FWzkYnNYYwWm3lANqnXQq74mH8TT1NshI	2024-06-30 06:37:28.552588+00
6jqyit33q0l8jki4f1gkwts289cc2t0g	.eJw1jksOgyAQQO_Cuohgo9ZV79E0ZoqjJUUgfGpM07sX0ribeXl5Mx-SvB6N3chAnjG6MDC2gl9TpCZVb_QSdQXOsWDNwlDU7dy3goquAXq-XFr66KWgHOqu6ThyXveMnEoz95yGXasQCwjoR1xBFQ6vZEBrbzVel8IqaddDirvD7OTLalY4HbjIgQw3Aj7-k-WhzauIPi_OThJCme_fH5boRsM:1sKiLv:giQXFDhg1t_oUME35nh7eEig4Vh_pOk7kZpeaZmxduo	2024-07-05 17:47:11.503701+00
tkfwmhp9cv6p5h97aktv0ga8058lspki	eyJ1cmxfbm93IjoiaHR0cDovLzEyNy4wLjAuMTo4MDAwL3NvbmcvNTcxYjg2ZjAtYzFkZC00OTI2LWE5YmYtOTVkNDQzM2E2YmRlLyIsInVybCI6InBsYXlsaXN0In0:1sKHmw:fNjjy8Ni2SqwTPRe0uOnnFbQIhUvJMmE-pOp-4LNHlY	2024-07-04 13:25:18.424063+00
fzeq303vn7fxzu2uac5qyyzekp6hnhla	.eJw1jEEOwjAMBP_iM2rSXkA58Q-EKjc1JWqaRE5KhRB_x4GivXhH433Bmol7WtB5MIDzGtB7jp7OU2WNjQscflJ5JhLnQexujsY_rnIGcwHk4nIRnGOYNnaFWEqKo8Vc76s8sO9D3GTlXkoySrXdsdGS1py01mqXFXxV0XYgfUA7C-jg_QFUJzv2:1sJFkT:zDWLuSD-pP4F4wrA1hza3bvOnk8hB_NNCLk07w679Qk	2024-07-01 17:02:29.583691+00
6ag42fcmpj46xalr2dohvqt0g7t7o7t4	.eJwtjEsOwjAMBe_iNcHOj7q5ApteIQ5EICw1omGBEHdvkNCs3uhpPvB6KiRo66XkrcPht89XXTUvmt96Hy7BrfeWEK2bjjSwiYkI2_-AuVAtMkXjhKMJfPJm5lBMnSWws7GK9zjSkstj1Bx8d8aKIvY:1sITTv:g00EJnBi49-5BCOMtuVlcYvHHt_G3B0_pybifv4HFkg	2024-06-29 13:30:11.047062+00
2dwnubk2p2w85xy2g9aoouxatzgxudmy	.eJyrViotygktTi0KyEmszMksLlGyUsooKSmw0tc3NDLXMwBCQysLAwMD_ZTE4oyk_MSiFP1SoHIwUQDVo6-kAzLGOzUnPyeRVIOywbrgRiUbJJslpxmY6loYWBrqmhgap-lamJom6SYnJacmGqSaJCcmJ0Ptw2lDckZiEdBRtQBcDkV7:1sHRXl:dqGOrIMLhZT72etEtnI26yXKVUZTpqPGI0Zc5u-wv_M	2024-06-26 17:13:53.665467+00
ivkmb39y426fzcbrojuv5keer28g8sbc	.eJyrViotyonPyy9XslLKKCkpsNLXNzQy1zMAQkMrCwMDA_2UxOKMpPzEohR9JR2QYqBCuJBSLQB35hO_:1sJzwz:rIotLOH4-g7kAyXNf-cOYur59M21-mYSHQtzh1xAdxY	2024-07-03 18:22:29.098113+00
tqeqkh556rvolycssbeqv1bfp1kvccup	.eJw1jEsKwzAMRO_idWvvveo9SgnCUVNT-YMsN4TQu9eieDfzeDOn6UxLLrvx5iVSm3cuAacu19ztBzkgWajVVYKDYhNnLjoZ-iQKGvKCCaJyePcMRFwIb5syG0qakhwVhzOO4zPiOrHKzfi7AZb_ZSt52zkK8ii1rAGa5sf3B06oP80:1sKhFD:wSGJAlowlllM-O2ebh6vRiHA6hrQRKoVwb5CE_WbDe0	2024-07-05 16:36:11.285489+00
n3i4s41tzl0r1vcssiw5o2g5qebrsr3g	.eJyrViotygktTi0KyEmszMksLlGyUsooKSmw0tc3NDLXMwBCQysLAwMD_QKYAh2QFpzKkjMSi6BqvFNz8nMSiTZY3zLJODHFwsBQ1zw5xUTXxMTYTNciJTVV18AgNSklOTUt1dTYUqkWAPRzNRI:1sHoZJ:G0jyGHEts2m3vO_p8uIT7RXIo9vX49ON-FynuG-dycQ	2024-06-27 17:49:01.002412+00
nd2d38nhy8b3sf9owwcfapba3dcsw3np	.eJwVzEsOwiAQANC7sJaODA0NvYwZPqam00L4aIzx7uL2Ld5H9MK3M73EKrbWcl0BDipHb_Ls0zMWH3minGGPnJggM735URvYGd01Bi3tXVs5k1HSadRSGasM-sXjgiAu_37UgermEpUwxJHfB6H4_gBSAydD:1sKzHK:eg4dfUx2sIpAWmxeTfJ43rdkyuW7bCODzPPTMyQYs8A	2024-07-06 11:51:34.678301+00
jnnjpqd295xw26bzgdel57f20p1zwyes	.eJw9i0EOwjAMBP_iM2pSLqCc-AdClWlMG5HGkeNSIcTfSQ5UvuzOjj-wShwSb-BgVs3OmP546my93p2ttcZjme-M4g0cmlzFHTVSSAZaMLQBn2vCGIUjXabGupGXv6TvTNV5kYRHoP23yQXcFVA0FK24cJo2CUpSS2Y_Ymn59v0BMr46uQ:1sL3Y4:xZdtz4W_-c-ITli949bILLuCCmYAkqDf-ZU9czgKH8s	2024-07-06 16:25:08.788639+00
fjzlbd2pn6reet3avewgm0joojhrcnit	eyJ1cmxfbm93IjoiaHR0cHM6Ly9tYXJtdXQtbnUudmVyY2VsLmFwcC9wbGF5bGlzdC8iLCJ1cmwiOiJwbGF5bGlzdCJ9:1sKadg:Y_QTHtDxb09V4HwhWaokelVMvdMBMlIi5NiN_qHcgP8	2024-07-05 09:33:00.223609+00
q7vrbiccc79y0osl9su22nwvdjx5bbpx	.eJyrViotyonPyy9XslLKKCkpKLbS189NLMotLdHNK9UrSy1KTs3RSywo0E9JLM5Iyk8sStFX0gHpAaqHCynVAgCYVhk_:1sL3pD:z9SL8WJUPUtIIkyL_CiMpHLZUTRBQlNz2OtQW2jLhtA	2024-07-06 16:42:51.137879+00
lpze4phmay3vn4m0nr1w1uzavso8xyae	.eJw9jNEKwjAMRf8lz7J2vih98j9ERrbGrdi1I80cIv67qaLk5d7DuXnCWog7mjFEcIC3NWGMnCOdxsqaIc-w-0ryWEidO3G4BvI_XOUC7gzIEoooLjmNGwch1rJkP2Cp-aIDjl3Km36ZRBZnTLs_NFavdUdrrfFYpj4jewMfWcU_gtcbuUk6uQ:1sKzNU:ZitiyK4XlhZbcrUFj6Asju__qIbxhVPhKvuuRMqckME	2024-07-06 11:57:56.062212+00
p66e8vw7m893nepaiolvj1md2c95athv	.eJyrViotyonPyy9XslLKKCkpsNLXNzQy1zMAQkMrCwMDA_2C_JTkxOISfSUdkFKgMqiAUi0AKd4SSw:1sLnBM:mq7SrkdeQQEKkeGJ6orTm2VK79hY-B5rAaB3aKUI1jE	2024-07-08 17:08:44.659126+00
mvlthlhumn7ve8wefmbvbl8imns2se3q	.eJyrViotyonPyy9XslLKKCkpKLbS189NLMotLdHNK9UrSy1KTs3RSywo0E9JLM5Iyk8sStFX0gHpAaqHCynVAgCYVhk_:1sKzaU:qmieb-5H_d-TKDMRueE8qIrsHLhsO9rLgYJi4u_y8-g	2024-07-06 12:11:22.719828+00
it5s7mxalm021laq58d46d1cxjzrgxw1	.eJw1jUsOwjAMRO_iNST7rLhHhSorNcUiPzkOFULcnaRqd56nN-MvNAlzyhs4eKqW6qyNKLHpNTXzJvEUDJZiS148VrVwGY1uH2DkSjJTRB4YXy1hCJID3dbBjM_xlPRTqDt9lh9My4mHXMFNgKK8T9ac1k1YSXo4PvX7_vsDqFE-xQ:1sKagV:rvljLvPKuzi6FfbVJ1V-RiT7z20IIFSs_74hWhsxyMg	2024-07-05 09:35:55.286351+00
qgspirufr1kbi1a6jv6hf3rhkhranxuz	eyJ1cmxfbm93IjoiaHR0cHM6Ly9tYXJtdXQtbnUudmVyY2VsLmFwcC9wb2RjYXN0LyIsInVybCI6InBvZGNhc3QifQ:1sLnRS:uiIybqsoPtwe0HV9fSDR2JJTNYPhWkHGUDsXduNAcCg	2024-07-08 17:25:22.712139+00
gep42ajz67osylt8t6jqabe1zuui6oeb	.eJw1zMEKwjAMgOF36VnWzovSk-8hMsIWZzFrS5ptDPHdbZCSS_LzkY9ZmYaYduPNSyR7a_vzpXN1en91ztlMcFAoYs1JbXWtaCjIAy4QtMN7jUDEifA2a-vGtDQkR8ZqNuTwDDi1rLgYfzfA8n9ZUpx3DoJcj5ymEYruj-8P4Ys6TQ:1sKiGI:YbS2QdZCb0OHuWcU61RZHsp0yyi2qPBp-Ahn9soxU9s	2024-07-05 17:41:22.091544+00
kwr3shvb66cyj89cszhp18e0ql5mf745	.eJw1jNEKwjAMRf8lz7J2vih98j9ERuniVuzakmQOEf_ddCJ5ufdwct-wMtKAi48JHPjHmn1KVBJepsa6UBY4_CR5VVTniRTvEcc_bjKDu4IniSyKueRpoyhIWmoZg-eWb_pAachl05VZpDpj-uOps3q9O1trTZh1xMAuqrRX-HwB54k3jQ:1sLQw4:xEJuqcdnyBmCnygZHQqDBPvRACQxPH3S8asYLuSNPic	2024-07-07 17:23:28.551303+00
3n5zzcobb28d24zu08eu3i48ftc7ktmh	.eJyrViotyonPyy9XslLKKCkpsNLXNzQy1zMAQkMrCwMDA_2UxOKMpPzEohR9JR2QYqBCuJBSLQB35hO_:1sQ7Cc:3Akt-IsUnmQ4bpzI1cA3KIJOcYMthJxbCDJFA2gVqpc	2024-07-20 15:19:54.96743+00
qss1i43y77qv43l5f96rerwkogl9e4ib	.eJw9jNEKwjAMRf8lz7J2vih98j9ERrbGrdi1I80cIv67qaLk5d7DuXnCWog7mjFEcIC3NWGMnCOdxsqaIc-w-0ryWEidO3G4BvI_XOUC7gzIEoooLjmNGwch1rJkP2Cp-aIDjl3Km36ZRBZnTLs_NFavdUdrrfFYpj4jewMfWcU_gtcbuUk6uQ:1sNwm0:Zf8VOu0jlqON6DO7b5JGQ0s0xaYZKqpa-JJChQnQS0k	2024-07-14 15:47:28.187724+00
lyiy94nr0n0est70mc1d0w4vl2hi1xd7	eyJ1cmxfbm93IjoiaHR0cHM6Ly9tYXJtdXQtbnUudmVyY2VsLmFwcC9wbGF5bGlzdC8iLCJ1cmwiOiJwbGF5bGlzdCJ9:1sR7Gv:gxKp69rz5se8yImyETOLx3eDwwl4iyJS_TpFGb_t-YE	2024-07-23 09:36:29.546521+00
lus729u72bdf4o19m57660zvqco20j6n	.eJw9is0KwjAQhN9lz9KkXpScfA-RsrSrLuSPzbYliO9uAipzmfnme8EqfoppBwdP1eyMGY-nwbaM7mytNZIqemUDh6427Qv6LiQTBeSOA0pY9TKnkDHWgZefoDVT-zcSvjP9sSRPBdwVUJSLNlxSfOzCStJGTsuMpffb-wNvbjfo:1sR5Tm:1aETBbHcCvH7rPtIgjLBZVyaB-T7dQ42rGFdzhVFExM	2024-07-23 07:41:38.205982+00
8i5ppmr5a6c9joa1dhhaye494pvlt2r5	eyJ1cmxfbm93IjoiaHR0cHM6Ly9tYXJtdXQtbnUudmVyY2VsLmFwcC9zb25nLzg5Y2E2Mjc5LWUyMGQtNDQxMC04MzUxLWE4YjA5ZDMyNzc1Zi8iLCJ1cmwiOiJwbGF5bGlzdCJ9:1sQiee:fgTb7T8UVEFRy0O7KLeTCz_7JxUhI-a0BZ3K3SwxRrg	2024-07-22 07:19:20.370912+00
mqwyata37oomb3rsj1y8qidbh3ptxxbd	.eJyrViotyonPyy9XslLKKCkpKLbS189NLMotLdHNK9UrSy1KTs3RSywo0E9JLM5Iyk8sStFX0gHpAaqHCynVAgCYVhk_:1sQVLC:9RZtMqdL4D06hEkHmZFeOLUfgA6CY9ka3BBoWqmRm-4	2024-07-21 17:06:22.799319+00
doszuceykkxdqm55j3ussng86x71prh0	.eJwVzEsOwiAQANC7zNrpUNoK9DLNlOInUkr4aIzx7uL2Ld4HavJLOF4ww62UmGeindNeC4baPV2yznccI-UjXEkby2epDDopNhzHXqAeph5Zr8Jsg1RquhCc_mf7oue3v-fSYGX7aCLh-wMwtyK0:1sQVia:qnlXslvdqLR8kZF_cpxOv0RtcmIvWrqjX_IEGBj1FfM	2024-07-21 17:30:32.365628+00
wtup5ehir4dpdmws8sb44jqg1ki33i90	.eJyrViotyonPyy9XslLKKCkpsNLXNzQy1zMAQkMrCwMDA_2UxOKMpPzEohR9JR2QYqBCuJBSLQB35hO_:1sNb5r:nMFILKDHZJ4SUvdyvX-VbfG6TU8hHRI5M3noGbOuuIY	2024-07-13 16:38:31.684567+00
sac14663e6nq6gqceitnumxifenvmskb	.eJyrViotyonPyy9XslLKKCkpKLbS189NLMotLdHNK9UrSy1KTs3RSywo0E9JLM5Iyk8sStFX0gHpAaqHCynVAgCYVhk_:1sQhCS:Ws9cCD81yDQklg1FzAlJIPEZzKxK-ZF8Z5C662-42wQ	2024-07-22 05:46:08.031529+00
z7dlkf7xaf6xs5o24t0mlsch54m9s24s	.eJw9jEsOwjAMRO_iNTT7rrgHQpVpTBuRn2yHqkLcHQcEu5mnN_OEJsQTJQwRRsB7yxgjl0inpbNhLgkOX0n3SuY8iMMtkP_hLguMZ0DWIGpYSl42DkpspRY_o_R8sQHHKZfNXlbVKqNzCTk1PeY22O9MccBanUdZrwXZO_hszP8jeL0B6p5AOQ:1sQheo:Sr7qd1FxHrI5DSAvKHccYbZ-yBXZY060Xng0oj--C_A	2024-07-22 06:15:26.31698+00
vgwladrr7p47br8dl4253gi6uk02cr74	eyJ1cmxfbm93IjoiaHR0cHM6Ly9tYXJtdXQtbnUudmVyY2VsLmFwcC9wbGF5bGlzdC8iLCJ1cmwiOiJwbGF5bGlzdCJ9:1sR5dW:edbodaCxHm4i5gwTiSR01dUkkNzqTwsbhS4bOczRE8s	2024-07-23 07:51:42.494653+00
kdabm9jvv5sijhd63e4hl4joc5q11407	.eJyrViotyonPyy9XslLKKCkpsNLXNzQy1zMAQkMrCwMDA_2UxOKMpPzEohR9JR2QYqBCuBBQJCkxORsoZKRUCwBf4xZw:1sPMRh:6cY2lwz0DSi4WcTD7An5YRY_S5gEypS4YAPD1Vw4bfc	2024-07-18 13:24:21.458146+00
do1hhk0yum4g68xdfg9haa5w16xcbtlw	.eJyrViotyonPyy9XslLKKCkpsNLXNzQy1zMAQkMrCwMDA_2UxOKMpPzEohR9JR2QYqBCuJBSLQB35hO_:1sPec9:WzDNX4iZFLqJsd9XD3JrHYIlPDBUlkhk0OT_4I_dwpY	2024-07-19 08:48:21.249997+00
pujzi0qkeb9gnkb14bmdjaqg4xdwu13r	eyJ1cmxfbm93IjoiaHR0cHM6Ly9tYXJtdXQtbnUudmVyY2VsLmFwcC9wbGF5bGlzdC8iLCJ1cmwiOiJwbGF5bGlzdCJ9:1sR5g2:WbhLeTrO1P2BdUpDX8aurTL8Uze0Wdhp58kJS4CmafM	2024-07-23 07:54:18.581134+00
rftcam79vapg9tvdoocd5sdjkn7rer2h	.eJyrViotyonPyy9XslLKKCkpKLbS189NLMotLdHNK9UrSy1KTs3RSywo0E9JLM5Iyk8sStFX0gHpAaqHCynVAgCYVhk_:1sQ6UK:RpJ4f8IsDzFIbBmKKt23GfUQxfovA6C1Y9nFTh9KCyI	2024-07-20 14:34:08.195562+00
mrfsk7wjajomgd18bj4jwrvehrq2l00h	.eJw1jcsOgjAQRf-la0oHImK78j-MIX0M2FApKUVijP9uayCzmXtz5syHrMF1k9-III8YZ8FYVbclpKnEBQDYiM47yWZvtFwiM6oFBNVT5AD0BHVDudE1BaX4ueINQKsZKbI2KfernBcMHT6lzbUc10k6F7zD65C7UvvnAcX3jIl5YbC9RXPUGV6IuBEZov0rFz8NW7ARQwr7p7TfC6KkHpOiJt8flnlIAQ:1sQUlD:rqHmaBG-lcW-M2xiBJx_iTqnbFQnLKJfpp5EdQhu49I	2024-07-21 16:29:11.799287+00
pbjliduf6tmgbmbto80c861yft3pvwaf	.eJyrViotyonPyy9XslLKKCkpKLbS189NLMotLdHNK9UrSy1KTs3RSywo0E9JLM5Iyk8sStFX0gHpAaqHCynVAgCYVhk_:1sPh81:bYg-uv1WoQJXfNooC8f8CT0JRxkE7_9UH34lYLJcWR8	2024-07-19 11:29:25.23557+00
p6yr9cp17nvqo68wjyojg36sqgwgahpk	.eJwtzDEOgCAQAMG_XC2cMaDoZwyHEAtQgqCF8e9iYrnFzg0l-XnbL5hgzTkeE2LQKZTMtsJPm4z1XMeIcV-MPjI6pcdukIo5qQQTyhGjwVBN6sXSd7I1hNB8bCX_C54XOjAhsg:1sR5hu:BzEx4pokTjwQ1gBMcsnIlkMiAv4KHalJhMPYbGC0YkM	2024-07-23 07:56:14.545705+00
imjkzvcxb0no4lty0wag3kfea9g9uuwd	.eJw1zFEOQDAMANC79FuVxGxcRooKybDMRkTcHR8O8N4F0dtmWQ-oYQzBbTXRzH6OAZeY7uI7sSk7R87yaactUJtVupdKsFWdwiJnhWyMwrIwWliXzDIQJN_7nj-D-wGUUyLo:1sR5jO:EGuEBCOVkAopsavaEJ8jTvG_EOv5A6bjco4gYyKm20A	2024-07-23 07:57:46.378226+00
iv15bxfojpyi216c1z3apcj5yt0k3u1e	.eJw1zMEKwjAMgOF3yVnWzovSk-8hMsoWZ7FrSpo5RPbuS3XSS_LzpR-YC3KHkw8RHPjnnHyMTBEvY21NTxMcfkjeGdW8kMM94PDPFRdwV_AsoYjmQmlcOAiyLpmG3pc63_SAY5do0V8eItkZ0x5PjdXXurO11uzYwJcq2wOsG89KOUU:1sMta4:T2YIaMiBKaJXKb69W6frtYBO9qDi1-cu9xvEy7s1FmA	2024-07-11 18:10:48.041177+00
wfy0jx5p2ospfqpf7ojcant63l960nt3	.eJyrViotyonPyy9XslLKKCkpsNLXNzQy1zMAQkMrCwMDA_2UxOKMpPzEohR9JR2QYqBCuBBQJCkxORsoZKRUCwBf4xZw:1sQrjp:XsgUBWHIKawS5xeYdcYELV6P-078XhUcG0vJ6fZh7Kg	2024-07-22 17:01:17.341182+00
eqgs2jvvx4dtw37e42j1sczk6upy2lvt	.eJyrViotyonPyy9XslLKKCkpKLbS189NLMotLdHNK9UrSy1KTs3RSywo0E9JLM5Iyk8sStFX0gHpAaqHCynVAgCYVhk_:1sR67i:n3yHS0ZZhdFPj5AOmr_GB7lRovDkd_JO_OqaHmTsvts	2024-07-23 08:22:54.801466+00
awonj3w59dpevsbzqx06xvvjt46e6pkd	.eJw1jMsOgjAQRf-la6EPDC2s_A9jyEAHaCyUtEVijP9uqzGzuXNy7n2RPaDvcAFjSUvgvq9grXcWL1Nm5eAWcvpJ8blhch7ozWhQ_3GWA2mvBHw0ISYc3Dod3kT06dmcHiDkfEsFb7vVHWlljnFrKeVCliwdbxVjjOYmRcHqUdWiELKC4tw0ddGrQRQcmKwkR86ZouQ7loY0hLl34DV5fwAq-0F5:1sMoeT:IGVUVfeS7FeBRIXUVV1ZUT4YNcc0NE8AkMvEWQf_tcA	2024-07-11 12:55:01.203556+00
c3ot9x4g4a15gg6l6isndhj6kem9cu58	eyJ1cmxfbm93IjoiaHR0cHM6Ly9tYXJtdXQtbnUudmVyY2VsLmFwcC9wbGF5bGlzdC8iLCJ1cmwiOiJwbGF5bGlzdCJ9:1sR5K5:l3zhzqMrqbzRSuTFr27PodS8WaMlGU85wYng2F6U8Wg	2024-07-23 07:31:37.111089+00
q2sjjdxrbb84il8bns4uy05efnregnb3	.eJyrViotyonPyy9XslLKKCkpKLbS189NLMotLdHNK9UrSy1KTs3RSywo0C_ISazMySwu0VfSAWkBKoeJAAWSEpOzgSJGSrUAigcbhA:1sQqBr:6rdmL4Nl4aAfBrVFSpWkDGIg3MTeaIi6eFSJe2LA3x0	2024-07-22 15:22:07.027578+00
x2qbq0be21e27vozy2zjwrbfll01qsqv	.eJyrViotyonPyy9XslLKKCkpKLbS189NLMotLdHNK9UrSy1KTs3RSywo0E9JLM5Iyk8sStFX0gHpAaqHCynVAgCYVhk_:1sPLGs:3DCjtEIdH64LSlYY3cxvbueNH5mw5kIZRqrQ93tBLK8	2024-07-18 12:09:06.241027+00
72u3d3vtccr1bqecxcc1d6qnll5j633w	.eJw9jNEKwjAMRf8lz7J2vih98j9ERrbGrdi1I80cIv67qaLk5d7DuXnCWog7mjFEcIC3NWGMnCOdxsqaIc-w-0ryWEidO3G4BvI_XOUC7gzIEoooLjmNGwch1rJkP2Cp-aIDjl3Km36ZRBZnTLs_NFavdUdrrfFYpj4jewMfWcU_gtcbuUk6uQ:1sOCDX:rKzWMO-k_ThqOG4dQAkwMWFIXG3hCZ_xUhba0DrG41c	2024-07-15 08:16:55.263789+00
0xaaqsy3l2noljhmyg9ltee312ostdlz	.eJw9ikEKgDAMBP-Ss_iAnvyHiASNEmhNSaJSxL9bEbzNzs4Fu5GOlJAjBEioafdukpRxKy3P0HyBl0z1P0h5Yfq1SiSD0AOqs3nVJtt6KjtpHVnmCe3l4X4ABF4mPg:1sR6cs:SOsilDKEpCd-T2wH51WUHndsBThS-iPq-w4NUc7RsCc	2024-07-23 08:55:06.588427+00
ymo446slf11yc978zldtiuxbr4niw9zp	eyJ1cmxfbm93IjoiaHR0cHM6Ly9tYXJtdXQtbnUudmVyY2VsLmFwcC9wbGF5bGlzdC8iLCJ1cmwiOiJwbGF5bGlzdCJ9:1sR6eb:30wIEnti4bCMf1Xmz5PXgQQr2DOzqMJKwZqXdSwIrbY	2024-07-23 08:56:53.344286+00
7dm6iwm0n68xgetxx6dwp7uhbhzf63c3	.eJw9ikEKgDAMBP-Ss_iAnvyHiASNEmhNSaJSxL9bEbzNzs4Fu5GOlJAjBEioafdukpRxKy3P0HyBl0z1P0h5Yfq1SiSD0AOqs3nVJtt6KjtpHVnmCe3l4X4ABF4mPg:1sR6cs:SOsilDKEpCd-T2wH51WUHndsBThS-iPq-w4NUc7RsCc	2024-07-23 08:55:06.918382+00
2wi9p4p671wgcd8k4935izvuh4dge395	.eJw9ikEKgDAMBP-Ss_iAnvyHiASNEmhNSaJSxL9bEbzNzs4Fu5GOlJAjBEioafdukpRxKy3P0HyBl0z1P0h5Yfq1SiSD0AOqs3nVJtt6KjtpHVnmCe3l4X4ABF4mPg:1sR6ct:H68ftx9nls0JAmqHjFLdt2FkY5Dm0y1x4J3WqhDUKWM	2024-07-23 08:55:07.931429+00
24gsx7k7u6kirkopvrunkak4ur1cdi6o	.eJw9ikEKgDAMBP-Ss_iAnvyHiASNEmhNSaJSxL9bEbzNzs4Fu5GOlJAjBEioafdukpRxKy3P0HyBl0z1P0h5Yfq1SiSD0AOqs3nVJtt6KjtpHVnmCe3l4X4ABF4mPg:1sR6cv:l5vuWJT8Hu2Xh4Hb4e1UU3klst5MtRuhjopiDA5j-o8	2024-07-23 08:55:09.884991+00
5wxduk60muim21vv5rlrgaex43wlf1b5	eyJ1cmxfbm93IjoiaHR0cHM6Ly9tYXJtdXQtbnUudmVyY2VsLmFwcC9wbGF5bGlzdC8iLCJ1cmwiOiJwbGF5bGlzdCJ9:1sR6dq:lL7nknNX3e9jC0P6Dta83iBO9OBSR0kPjk50klX5bPc	2024-07-23 08:56:06.749012+00
lgdy8a10axa183lign4nkgdfo9rdgkiw	.eJwlykEOgyAQheG7zNpC0iUrb2JGOq3EAckwtDGmdxdl-f73HVALyUQRA4ODdWcsyAXnwPgcP1c2foswdKd7psZq-pKEd6DXdQhPafu1vKjm4qyNKLHqI1XTmCc2mLP1C4ra7pu9J_xPpdUtbA:1sR7Cp:Mc1VvMHO-TCBtYTKP35wSk6Sr1SSHQqRoAb_sG6VEH8	2024-07-23 09:32:15.337315+00
eleambbmbtdtqwstiutwbtwsqtb7inlm	eyJ1cmxfbm93IjoiaHR0cHM6Ly9tYXJtdXQtbnUudmVyY2VsLmFwcC9jaGFydC8iLCJ1cmwiOiJjaGFydCJ9:1sR7Cq:yL3f835WyOxGST0QbkFuvDMRndbLg9nHaa8Mc_ILH0I	2024-07-23 09:32:16.487481+00
k7hnpldsnxqvs5m5bn3d2tldj07quh71	.eJyrViotyonPyy9XslLKKCkpKLbS189NLMotLdHNK9UrSy1KTs3RSywo0E9JLM5Iyk8sStFX0gHpAaqHCynVAgCYVhk_:1sRDih:LQ6qQCvspQkuzlOV_Y-OkV2U0G4mDvFFSYhh20EQxHw	2024-07-23 16:29:35.144058+00
\.


--
-- Data for Name: downloaded_song; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.downloaded_song (id_song, email_downloader) FROM stdin;
\.


--
-- Data for Name: episode; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.episode (id_episode, id_konten_podcast, judul, deskripsi, durasi, tanggal_rilis) FROM stdin;
baa82c78-2eec-4490-9e86-2e779ce132dc	f8a92758-f584-48fb-b7cb-f5b64d6250cb	#LibatinAllah | Season 1 Eps. 01 - Fast Response	#LibatinAIlah adalah sebuah program baru berupa narasi untuk menjawab berbagai permasalahan kita sehari-hari dilihat dari angle langit (aqidah). Semoga #LibatinAllah bisa jadi bahan untuk kalian berpikir dan menemukan jawaban dari masalah sehari-hari.	588	2024-07-08
0816deb3-ff8a-49a3-8cea-a2e6b673508d	f8a92758-f584-48fb-b7cb-f5b64d6250cb	Cara Biar Dapet Support Dari Langit | Season 1 # LibatinAllah	Episode kali ini akan membahas "great why" kenapa sih kita harus #LibatinAllah	635	2024-07-08
76883cb7-c6ce-484e-918f-1debaf4aea9c	f8a92758-f584-48fb-b7cb-f5b64d6250cb	MAU DAPET KEAJAIBAN KAYA PARA NABI? | Eps. 2-1 #LibatinAllah	Gimana sih cara #LibatinAllah, sampai bisa dapet keajaiban seperti para nabi dan orang- orang shaleh?	528	2024-07-08
7bc6cc08-1926-4d3b-93de-3b9aeb3dab48	f8a92758-f584-48fb-b7cb-f5b64d6250cb	Cara Menghadapi Masalah | Eps. 2-2 #LibatinAllah	Suka bingung gak sih kalau lagi ada masalah sama orang gitu, gimana cara ngatasinnya? Sebenernya bisa loh, kita mengatasi masalahnya dengan cara #LibatinAllah biar lebih maksimal. Tapi gimana caranya? Dengerin sampai habis ya!	557	2024-07-08
198d4a8a-c559-4388-97a8-d51508b600fc	576b9815-1375-48e4-b1e3-725bb12b730e	Dongeng Sebelum Tidur (Trailer)	Selamat datang di podcast "DST" Dongeng Sebelum Tidur. Podcast ini ditujukan kepada kalian yang merasa kesulitan untuk tertidur. Cerita yang ada di podcast ini akan menemani malam kalian sampai kalian bermimpi indah. Dengarkan, tenangkan pikiran kalian, dan atertidurlah. Good Night...	32	2024-07-09
dd38851a-2b95-459d-95a8-d2f943032923	576b9815-1375-48e4-b1e3-725bb12b730e	01. Cinderella (Part 1)	Setelah kepergian ayahnya, hidup Ella merana akibat perlakuan kejam dan licik dari Ibu dan kedua saudari tirinya. Harapan mulai merekah ketika ia tak sengaja bertemu sesosok pria tampan-berwibawa di hutan. Dengarkan, tenangkan pikiran kalian, dan tertidurlah. Good Night...	908	2024-07-09
a213f3a6-3741-47fd-a545-e83311082b15	576b9815-1375-48e4-b1e3-725bb12b730e	02. Cinderella (Part 2)	Setelah kepergian ayahnya, hidup Ella merana akibat perlakuan kejam dan licik dari Ibu dan kedua saudari tirinya. Harapan mulai merekah ketika ia tak sengaja bertemu sesosok pria tampan-berwibawa di hutan. Dengarkan, tenangkan pikiran kalian, dan tertidurlah. Good Night...	838	2024-07-09
\.


--
-- Data for Name: genre; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.genre (id_konten, genre) FROM stdin;
ca96fa8d-0125-4996-a92d-70ad20418a92	Classical
0a7e104f-d73a-4224-b72f-d58b39fc4629	Jazz
eae3f504-29bb-4666-9827-b33704095fb2	Country
f510a1df-b119-4d5b-aef3-514c51b0919d	Rock
2a8fa502-23df-47b4-941c-a836a13a4106	Pop
68a676fe-8bea-48b9-a137-6622e3cd3ff8	Blues
1ced2011-e47a-4838-8dac-bdd3616f6f8d	Reggae
1eacddc5-f451-4485-9902-8842536f8b75	Hip Hop
e97adb7e-271a-4aa6-af93-ddbc6b3ae218	Pop
ceedd7d5-8c2f-4dd1-b6a6-054e9a274909	Pop
14137944-a473-4f1b-a441-4bbe1eb0b4be	Pop
a2938f11-9c87-465f-b299-eac3ff627695	Pop
d62f77ad-38c4-48d1-9a54-024ee773de21	Pop
9687bae6-3a21-4af5-a453-cdb4a6d2e7e0	Pop
b6340170-6bcd-42bf-92aa-de907d830e2d	Pop
4b66b805-664b-4e89-b56a-3277052b0e42	Pop
3b7afdd7-5ce2-415d-8c03-caad1b4fd847	Pop
252fbe7e-747f-4e2f-8f6c-e56d853f58df	Pop
3bfc017e-f8bd-4644-afb5-cac66ceb94d4	Pop
478e829f-fbbb-41b0-a491-25ff7e3761e6	Pop
aa344736-46cd-43e0-8c2b-880b4d5d150f	Pop
133db2cb-d993-49d1-bfdf-471fcc30b70d	Pop
198a2a74-2206-488c-a1e6-df5e30e495a6	Pop
5c008091-a050-4a33-b63f-baa31b6c8d6b	Pop
eb650df0-77a4-4bda-aa07-12fb4e8ff13c	Pop
88eb17e4-32c5-49ca-a7b4-7ee7a3b6345f	Pop
e6d1c5a4-f79e-441f-a736-00a87ba657cb	Pop
c71ce89e-5d46-4c85-a9a8-955971068a79	Pop
74e5f497-484d-4903-bcd2-f38b790e65a9	Pop
1f37728a-9007-44f7-af39-8d6f06fd5a4b	Rock
1f37728a-9007-44f7-af39-8d6f06fd5a4b	Pop
a622e217-6cbd-4cba-9feb-08ffe18037d2	Rock
a622e217-6cbd-4cba-9feb-08ffe18037d2	Pop
69f19f17-11a8-4789-b7ba-ecf4eb15507a	Pop
e9c49129-c3e1-478e-a3be-800db97bcc58	Pop
cf7d9805-e109-4051-b3f0-bf3e99c8a8f3	Pop
7e0cde78-d278-4f2c-b5c2-1b9007c8f5b0	Pop
9028d889-63b8-4593-9a59-0dc835b4dd38	Pop
60f388ed-75a0-401f-8302-d9b1499e2186	Pop
6200040f-aa24-4c3f-a4e5-8db3b4b9e5fb	Pop
c01100f9-9ad7-4e7f-b266-9e2e11cecb40	Pop
e874eddd-a1b8-49f3-96e2-2a8987c6b4e0	Pop
31ccc3d1-aff5-4841-b0ea-babb0bc1194d	Pop
8dd0502b-c5f3-4264-9e1f-147a05fba84f	Pop
384429c1-f48a-4485-98bc-41a94b0512fe	Pop
d16d781c-0c0d-4ea3-872b-4377bcb9218d	Pop
4bf0f3ae-320c-40d1-a3a5-0a0f6b5d4ea8	Pop
f248dd11-7018-4e82-9dd7-70d12466527d	Pop
62f04e76-e8e5-40fd-89dd-95d4202469aa	Pop
e8bc0fc5-ebc5-4813-9b5a-9eca062b84ca	Pop
56987fc2-2364-41de-9447-49d15ba6b9b6	Pop
5bb9bb8c-3bd5-4567-aa5d-94780d9f0332	Pop
57f18b8b-353b-4014-8140-d336f05712e8	Pop
6da36a98-029e-45af-97a3-cfb973cf5935	Pop
45889e75-921f-4b34-a1bf-a9a98c34562b	Pop
7a9d0c6f-ea43-48c4-815d-0863319b5e86	Pop
7504353d-f2e8-4cea-9eb1-6bc7a5771688	Pop
d1fa443d-65e9-4760-9e81-78370e778637	Pop
0a7c42ad-1d4b-4e2d-8e39-35c0051566a6	Pop
3ec5fb74-c25c-4466-8cca-f16233ec0ad5	Pop
49477680-f6bb-4deb-b8bd-3e0c9aaf7c69	Pop
b16de06d-40ce-4390-aa46-9479fead37b1	Pop
5c1235fd-dd6c-47dc-982f-26a295220f86	Pop
094156dd-ee47-4545-a832-8ad75f0916f0	Pop
7e31b8c9-3c0b-4dba-9b5b-3718306786ee	Pop
faf63f1c-3c29-4d16-9121-4000f5262ce1	Pop
223708a6-26bd-493e-835d-71a4036cebba	Pop
e93128ba-36f0-4b30-8c90-af7d8b18590c	Pop
cff71123-0705-4e43-be0c-373bb757253e	Pop
2506ea7b-4eb8-4fb5-a679-933167bb97fc	Pop
9a54301b-1035-43b1-9c87-c39be28c56bf	Pop
a1d01722-5fb4-43f0-8168-ee598c56fde4	Pop
5d4a5674-e0b3-4359-817f-d54a84abef4d	Pop
a4a9dc0b-0828-4a4f-ba35-7d1306831883	Pop
2dfcc81f-36ce-4042-a5f6-5d7fc35f883a	Pop
49798bac-b9c3-43b8-89d3-8eebc3dbbee2	Pop
995a0ca5-2f0a-4e04-a6a7-fc8ec0e6d4a4	Pop
6fbb5af1-da5e-4a00-9276-a7ed6ed39c07	Pop
ea0ea178-b18a-4487-a6dc-708a8305c21a	Pop
4d255112-e4e3-4b60-a48a-68602235082a	Pop
2c6816fd-d89d-411b-89de-8f7643b1211d	Pop
e0830ae2-b97e-4e92-beb3-74134e461f2e	Pop
a19a7f00-abe4-4420-bffd-52c2f86fef4a	Pop
d5697ab3-770b-4cc4-b9c9-fd5b2310631b	Pop
4a5654a1-98ff-407f-834b-828430bba523	Pop
f766a501-ef24-4897-a5a6-9ee9333f5404	Pop
01b63790-e215-4096-9d5f-c4c8fa56bea7	Pop
5701af45-c50b-4df8-b3b1-48afa23379e6	Pop
c42c14ab-0217-4814-bc59-d9267916e458	Pop
f07328e1-261c-41e2-bbd0-4ba3632a605d	Pop
70de8fd7-2fb3-4150-91c7-f425eff615b1	Pop
19809b9b-074a-409a-a781-e3da647032f9	Country
19809b9b-074a-409a-a781-e3da647032f9	Pop
1eb12ac6-fe21-4f7a-aef3-452dc79c7049	Country
1eb12ac6-fe21-4f7a-aef3-452dc79c7049	Pop
c53f1924-09cf-4e27-9e4b-25d69d522d15	Country
c53f1924-09cf-4e27-9e4b-25d69d522d15	Pop
a8909502-0b24-4db0-9bcc-9f712f046d82	Country
a8909502-0b24-4db0-9bcc-9f712f046d82	Pop
4355b399-97b7-4d86-8502-ada1c3023886	Country
4355b399-97b7-4d86-8502-ada1c3023886	Pop
774a527d-6943-433d-a662-8e3e51b2dd9d	Country
774a527d-6943-433d-a662-8e3e51b2dd9d	Pop
b58aaf97-b952-4b85-8a15-9f9269c9ef62	Country
b58aaf97-b952-4b85-8a15-9f9269c9ef62	Pop
2766a29c-a225-4932-8177-4c53a34e2295	Country
2766a29c-a225-4932-8177-4c53a34e2295	Pop
6176c01f-1011-4e90-bdf9-30e74e64e4ce	Country
6176c01f-1011-4e90-bdf9-30e74e64e4ce	Pop
c746aef5-1b5e-489e-8523-150c20e9bd17	Country
c746aef5-1b5e-489e-8523-150c20e9bd17	Pop
92845e68-b44d-4716-a1bb-c1918def2db6	Country
92845e68-b44d-4716-a1bb-c1918def2db6	Pop
bb5c3b6c-ab71-4b95-9884-da8683064d08	Pop
3fa41409-5c93-4ad6-9ebb-814892d5c8fa	Pop
6259903a-76a8-4aee-9ea4-6522abd6a04c	Jazz
6259903a-76a8-4aee-9ea4-6522abd6a04c	Pop
2a8fa502-23df-47b4-941c-a836a13a4107	Rohani
f8a92758-f584-48fb-b7cb-f5b64d6250cb	Rohani
a50850a1-6521-45c7-ad7f-814107e303fa	Pop
576b9815-1375-48e4-b1e3-725bb12b730e	Classical
\.


--
-- Data for Name: konten; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.konten (id, judul, tanggal_rilis, tahun, durasi) FROM stdin;
ca96fa8d-0125-4996-a92d-70ad20418a92	Classical	2024-07-08	2024	210
0a7e104f-d73a-4224-b72f-d58b39fc4629	Jazz	2024-07-08	2024	210
eae3f504-29bb-4666-9827-b33704095fb2	Country	2024-07-08	2024	210
f510a1df-b119-4d5b-aef3-514c51b0919d	Rock	2024-07-08	2024	210
2a8fa502-23df-47b4-941c-a836a13a4106	Pop	2024-07-08	2024	210
68a676fe-8bea-48b9-a137-6622e3cd3ff8	Blues	2024-07-08	2024	210
1ced2011-e47a-4838-8dac-bdd3616f6f8d	Reggae	2024-07-08	2024	210
1eacddc5-f451-4485-9902-8842536f8b75	Hip Hop	2024-07-08	2024	210
e97adb7e-271a-4aa6-af93-ddbc6b3ae218	Give Love	2024-07-08	2024	176
ceedd7d5-8c2f-4dd1-b6a6-054e9a274909	200%	2024-07-08	2024	193
14137944-a473-4f1b-a441-4bbe1eb0b4be	DDU-DU DDU-DU	2024-07-08	2024	195
a2938f11-9c87-465f-b299-eac3ff627695	Forever Young	2024-07-08	2024	237
d62f77ad-38c4-48d1-9a54-024ee773de21	As If Its Your Last	2024-07-08	2024	213
9687bae6-3a21-4af5-a453-cdb4a6d2e7e0	How You Like That	2024-07-08	2024	180
b6340170-6bcd-42bf-92aa-de907d830e2d	Pretty Savage	2024-07-08	2024	199
4b66b805-664b-4e89-b56a-3277052b0e42	Lovesick Girls	2024-07-08	2024	192
3b7afdd7-5ce2-415d-8c03-caad1b4fd847	Kill This Love	2024-07-08	2024	189
252fbe7e-747f-4e2f-8f6c-e56d853f58df	WHISTLE	2024-07-08	2024	211
3bfc017e-f8bd-4644-afb5-cac66ceb94d4	Playing with Fire	2024-07-08	2024	197
478e829f-fbbb-41b0-a491-25ff7e3761e6	Shut Down	2024-07-08	2024	175
aa344736-46cd-43e0-8c2b-880b4d5d150f	Pink Venom	2024-07-08	2024	186
133db2cb-d993-49d1-bfdf-471fcc30b70d	Ice Cream (with Selena Gomez)	2024-07-08	2024	175
198a2a74-2206-488c-a1e6-df5e30e495a6	FLOWER	2024-07-08	2024	174
5c008091-a050-4a33-b63f-baa31b6c8d6b	SOLO	2024-07-08	2024	169
eb650df0-77a4-4bda-aa07-12fb4e8ff13c	On The Ground	2024-07-08	2024	168
88eb17e4-32c5-49ca-a7b4-7ee7a3b6345f	LALISA	2024-07-08	2024	200
e6d1c5a4-f79e-441f-a736-00a87ba657cb	MONEY	2024-07-08	2024	168
c71ce89e-5d46-4c85-a9a8-955971068a79	My House	2024-07-08	2024	187
74e5f497-484d-4903-bcd2-f38b790e65a9	GO CRAZY!	2024-07-08	2024	239
1f37728a-9007-44f7-af39-8d6f06fd5a4b	You Were Beautiful	2024-07-08	2024	283
a622e217-6cbd-4cba-9feb-08ffe18037d2	Congratulations	2024-07-08	2024	229
69f19f17-11a8-4789-b7ba-ecf4eb15507a	What is Love?	2024-07-08	2024	208
e9c49129-c3e1-478e-a3be-800db97bcc58	TT	2024-07-08	2024	212
cf7d9805-e109-4051-b3f0-bf3e99c8a8f3	YES or YES	2024-07-08	2024	237
7e0cde78-d278-4f2c-b5c2-1b9007c8f5b0	Dance the Night Away	2024-07-08	2024	180
9028d889-63b8-4593-9a59-0dc835b4dd38	Likey	2024-07-08	2024	207
60f388ed-75a0-401f-8302-d9b1499e2186	FANCY	2024-07-08	2024	213
6200040f-aa24-4c3f-a4e5-8db3b4b9e5fb	CHEER UP	2024-07-08	2024	208
c01100f9-9ad7-4e7f-b266-9e2e11cecb40	Like OOH-AHH	2024-07-08	2024	215
e874eddd-a1b8-49f3-96e2-2a8987c6b4e0	Signal	2024-07-08	2024	196
31ccc3d1-aff5-4841-b0ea-babb0bc1194d	The Boys	2024-07-08	2024	226
8dd0502b-c5f3-4264-9e1f-147a05fba84f	Into the New World	2024-07-08	2024	265
384429c1-f48a-4485-98bc-41a94b0512fe	I GOT A BOY	2024-07-08	2024	271
d16d781c-0c0d-4ea3-872b-4377bcb9218d	OH!	2024-07-08	2024	188
4bf0f3ae-320c-40d1-a3a5-0a0f6b5d4ea8	Gee	2024-07-08	2024	201
f248dd11-7018-4e82-9dd7-70d12466527d	Lion Heart	2024-07-08	2024	224
62f04e76-e8e5-40fd-89dd-95d4202469aa	Genie	2024-07-08	2024	230
e8bc0fc5-ebc5-4813-9b5a-9eca062b84ca	Mr. Mr.	2024-07-08	2024	235
56987fc2-2364-41de-9447-49d15ba6b9b6	FOREVER 1	2024-07-08	2024	202
5bb9bb8c-3bd5-4567-aa5d-94780d9f0332	Kissing You	2024-07-08	2024	199
57f18b8b-353b-4014-8140-d336f05712e8	Girls Generation	2024-07-08	2024	230
6da36a98-029e-45af-97a3-cfb973cf5935	Psycho	2024-07-08	2024	210
45889e75-921f-4b34-a1bf-a9a98c34562b	Red Flavor	2024-07-08	2024	191
7a9d0c6f-ea43-48c4-815d-0863319b5e86	Feel My Rhythm	2024-07-08	2024	210
7504353d-f2e8-4cea-9eb1-6bc7a5771688	Bad Boy	2024-07-08	2024	210
d1fa443d-65e9-4760-9e81-78370e778637	Peek-A-Boo	2024-07-08	2024	189
0a7c42ad-1d4b-4e2d-8e39-35c0051566a6	Russian Roulette	2024-07-08	2024	211
3ec5fb74-c25c-4466-8cca-f16233ec0ad5	Candy	2024-07-08	2024	217
49477680-f6bb-4deb-b8bd-3e0c9aaf7c69	Hello Future	2024-07-08	2024	220
b16de06d-40ce-4390-aa46-9479fead37b1	Boom	2024-07-08	2024	195
5c1235fd-dd6c-47dc-982f-26a295220f86	Beatbox	2024-07-08	2024	205
094156dd-ee47-4545-a832-8ad75f0916f0	Hot Sauce 	2024-07-08	2024	195
7e31b8c9-3c0b-4dba-9b5b-3718306786ee	Dive Into You	2024-07-08	2024	192
faf63f1c-3c29-4d16-9121-4000f5262ce1	I	2024-07-08	2024	206
223708a6-26bd-493e-835d-71a4036cebba	Fine	2024-07-08	2024	209
e93128ba-36f0-4b30-8c90-af7d8b18590c	INVU	2024-07-08	2024	204
cff71123-0705-4e43-be0c-373bb757253e	Armageddon	2024-07-08	2024	196
2506ea7b-4eb8-4fb5-a679-933167bb97fc	Next Level	2024-07-08	2024	221
9a54301b-1035-43b1-9c87-c39be28c56bf	Supernova	2024-07-08	2024	178
a1d01722-5fb4-43f0-8168-ee598c56fde4	Drama	2024-07-08	2024	214
5d4a5674-e0b3-4359-817f-d54a84abef4d	Black Mamba	2024-07-08	2024	174
a4a9dc0b-0828-4a4f-ba35-7d1306831883	Savage	2024-07-08	2024	238
2dfcc81f-36ce-4042-a5f6-5d7fc35f883a	Just One Day	2024-07-08	2024	239
49798bac-b9c3-43b8-89d3-8eebc3dbbee2	Boy in Luv	2024-07-08	2024	230
995a0ca5-2f0a-4e04-a6a7-fc8ec0e6d4a4	Spring Day	2024-07-08	2024	274
6fbb5af1-da5e-4a00-9276-a7ed6ed39c07	Boy With Luv (feat. Halsey)	2024-07-08	2024	229
ea0ea178-b18a-4487-a6dc-708a8305c21a	Dynamite	2024-07-08	2024	199
4d255112-e4e3-4b60-a48a-68602235082a	Life Goes On	2024-07-08	2024	207
2c6816fd-d89d-411b-89de-8f7643b1211d	Permission to Dance	2024-07-08	2024	187
e0830ae2-b97e-4e92-beb3-74134e461f2e	FAKE LOVE	2024-07-08	2024	242
a19a7f00-abe4-4420-bffd-52c2f86fef4a	I Need You	2024-07-08	2024	195
d5697ab3-770b-4cc4-b9c9-fd5b2310631b	Left and Right (Feat. Jung Kook of BTS)	2024-07-08	2024	154
4a5654a1-98ff-407f-834b-828430bba523	My Universe	2024-07-08	2024	226
f766a501-ef24-4897-a5a6-9ee9333f5404	IDOL	2024-07-08	2024	222
01b63790-e215-4096-9d5f-c4c8fa56bea7	DNA	2024-07-08	2024	223
5701af45-c50b-4df8-b3b1-48afa23379e6	Blood Sweat & Tears	2024-07-08	2024	217
c42c14ab-0217-4814-bc59-d9267916e458	Super Shy	2024-07-08	2024	154
f07328e1-261c-41e2-bbd0-4ba3632a605d	Ditto	2024-07-08	2024	185
70de8fd7-2fb3-4150-91c7-f425eff615b1	OMG	2024-07-08	2024	212
19809b9b-074a-409a-a781-e3da647032f9	Love Story	2024-07-08	2024	236
1eb12ac6-fe21-4f7a-aef3-452dc79c7049	You Belong With Me	2024-07-08	2024	231
c53f1924-09cf-4e27-9e4b-25d69d522d15	Style	2024-07-08	2024	231
a8909502-0b24-4db0-9bcc-9f712f046d82	Blank Space	2024-07-08	2024	231
4355b399-97b7-4d86-8502-ada1c3023886	Gorgeous	2024-07-08	2024	209
774a527d-6943-433d-a662-8e3e51b2dd9d	Enchanted	2024-07-08	2024	352
b58aaf97-b952-4b85-8a15-9f9269c9ef62	Lover	2024-07-08	2024	221
2766a29c-a225-4932-8177-4c53a34e2295	Cruel Summer	2024-07-08	2024	178
6176c01f-1011-4e90-bdf9-30e74e64e4ce	Back To December	2024-07-08	2024	293
c746aef5-1b5e-489e-8523-150c20e9bd17	All Too Well	2024-07-08	2024	329
92845e68-b44d-4716-a1bb-c1918def2db6	august	2024-07-08	2024	261
bb5c3b6c-ab71-4b95-9884-da8683064d08	Take A Chance With Me	2024-07-08	2024	303
3fa41409-5c93-4ad6-9ebb-814892d5c8fa	High School in Jakarta	2024-07-08	2024	219
6259903a-76a8-4aee-9ea4-6522abd6a04c	Every Summertime	2024-07-08	2024	215
2a8fa502-23df-47b4-941c-a836a13a4107	Rohani	2024-07-08	2024	195
a50850a1-6521-45c7-ad7f-814107e303fa	Run Devil Run	2024-07-09	2024	201
f8a92758-f584-48fb-b7cb-f5b64d6250cb	Hanan Attaki	2024-07-08	2024	2308
576b9815-1375-48e4-b1e3-725bb12b730e	Dongeng Sebelum Tidur	2024-07-09	2024	1778
\.


--
-- Data for Name: label; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.label (id, nama, email, kontak, id_pemilik_hak_cipta, password) FROM stdin;
545e1326-9fc6-489a-92c6-cdd1e834b710	YG Entertainment	ygentertainment@company.kr	ygentertainment@company.kr	565eba3f-2a04-43b6-b53b-0748b9bc23bf	southkorea
75a2de5b-5530-4e85-a036-3b3a7992e2c7	SM Entertainment	smentertainment@company.kr	smentertainment@company.kr	e05ae9ae-4d2d-4f3e-b489-e6eb64631ec0	southkorea
00f6bd7a-dce2-4627-8c41-999930725068	JYP Entertainment	jypentertainment@company.kr	jypentertainment@company.kr	8081a9b5-0bc9-4967-936d-7ffc49e38dce	southkorea
6955e9ab-36f8-48f7-a187-6597dfb486c8	HYBE Entertainment	hybeentertainment@company.kr	hybeentertainment@company.kr	e5d983a5-3037-48e5-a2d8-a24e287f5269	southkorea
a3b9d84f-4f6e-495b-aed4-717b2d217bab	Universal Music	universalmusic@company.us	universalmusic@company.us	3fef84a3-229e-4caf-9e05-c8634346242d	unitedstates
dcc68f33-0aa4-4e37-bdc1-f69babb283bd	88rising	88rising@company.us	88rising@company.us	b8afb13e-8afb-450a-9c68-2ff9f1e7ca18	unitedstates
\.


--
-- Data for Name: nonpremium; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.nonpremium (email) FROM stdin;
\.


--
-- Data for Name: paket; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.paket (jenis, harga) FROM stdin;
1 Bulan	30000
3 Bulan	60000
6 Bulan	100000
1 Tahun	145000
\.


--
-- Data for Name: pemilik_hak_cipta; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.pemilik_hak_cipta (id, rate_royalti) FROM stdin;
565eba3f-2a04-43b6-b53b-0748b9bc23bf	0
e05ae9ae-4d2d-4f3e-b489-e6eb64631ec0	0
8081a9b5-0bc9-4967-936d-7ffc49e38dce	0
e5d983a5-3037-48e5-a2d8-a24e287f5269	0
fb58bdc7-9a70-468a-8bb2-7455a1976734	0
7888c152-a1ad-4d2d-81b3-473db420a49a	0
bd58a46e-acc7-4758-8a4d-23371e21ba2f	0
5b7ae832-c3ba-497c-950d-fb0c7d2dd016	0
78463091-6cdd-45cc-b466-41191df66009	0
02f5d303-88e4-400e-908a-4e8c3a9800ef	0
f252675b-df04-4b1e-91c9-a91d7d84b3b9	0
fd853044-1e1a-487b-af09-aca401c00bd4	0
c04b423c-6a8e-46ae-84e2-d8c2c8b2e1bb	0
bbab8b12-25a5-4405-a639-104d21c7234c	0
74dd2972-1b53-4ff6-b1bf-cf89c0079660	0
46475d65-9cd3-45ae-b7af-c4f1b6422053	0
99a18df8-aaa1-4358-af61-a411d63baeda	0
66f0cdb2-e32b-44aa-a8f4-ff2c6ca463e1	0
8a37f267-12aa-4263-b24c-fd001ed69edc	0
c04f5957-c758-43ac-aa53-037d56d7e0da	0
5fd4b3c7-7f04-424d-be9e-126a5e20529d	0
32d9f686-e3eb-458d-a4c5-299d0c51ac1d	0
cd19bee8-25f8-4ae1-a0a5-d1e64074b898	0
6a014a0d-57a9-4605-8ca1-81096a7c9919	0
0152bb84-7795-4431-a372-3d082bd6028d	0
59f9915c-da63-48b8-a467-5d7d2c00e950	0
e094e569-e4e0-4580-b54b-de328022550d	0
e46dc1de-d25e-4920-a778-ef58cc365a15	0
bd2a2051-01d3-49ff-b356-ff91344cadee	0
f5c2e08d-fe32-4161-bf41-c21e4823c1f9	0
9edb9be5-6e6c-44c7-9c62-5780f1d8d341	0
b14d67ee-f29d-4d69-a36e-f1c1ac953e47	0
9e491377-f340-4983-b150-9c07a4e68286	0
3fef84a3-229e-4caf-9e05-c8634346242d	0
13c7b5c3-58f0-4dfd-9044-7cd7950eb566	0
6a3cddbe-1bc5-43e3-8775-3b52d1d3aae6	0
b8afb13e-8afb-450a-9c68-2ff9f1e7ca18	0
dee61aea-0a86-48ee-94ae-3b83ee4dfaca	0
23057c67-5739-45b8-98ad-20ecaad55f4f	0
50a3b011-b6fd-4bcb-999a-2997143e7de1	0
bad99c02-e4da-45e4-880c-9572cae80980	0
f4fa0ac2-bb1d-46f5-8e54-c38241de1f1e	0
e5f64c40-7d03-4385-becf-0ce90a53eefc	0
\.


--
-- Data for Name: playlist; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.playlist (id) FROM stdin;
d6805391-b498-4223-b5ac-e5942686e04d
ffcd833b-1e51-4a26-b2cd-d66aa8b1a1d5
83fc89d1-4f76-4739-8f4c-3205213e9a8a
c0c6cf05-8091-413f-855b-cbcea0e4cacc
ab7368d9-ab2c-481e-af82-7df96fa0eed2
5d9b6f64-c107-4a8c-8e1b-a5f4e0fd3b42
b097de9e-b5c5-41a5-a885-6487ea76aaef
f56ede6b-889f-4819-a106-6369176d1b8a
4eb31218-206b-47a9-b51e-5c90437aee63
c3af0e1a-213f-4002-8879-e346096767bd
13f68a8c-9e46-4143-8fe9-782354947035
58b99944-1e11-4c97-8177-60bab4ffe947
34321f32-b65f-43fa-9042-4ca0f48d5b09
aaeb8952-edbf-41ee-b749-b56c953f44fe
59fcd520-736d-4fec-96bc-6708f87e8e87
1fd0c5ad-42df-4ac7-86f5-60049631414b
2fffeffe-b6f6-41d7-a86a-3a8b19920602
bfefa396-0772-4c69-913e-d7dc05aa2f19
d0dadc6c-30b7-4fa1-a1da-547d00d93b40
be74799d-cd59-466e-9c56-aa28bf154604
f1c4ed41-013f-432c-a535-46ec82a678ec
2b3dc212-2146-40a8-8293-ea98b91dfe37
\.


--
-- Data for Name: playlist_song; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.playlist_song (id_playlist, id_song) FROM stdin;
d6805391-b498-4223-b5ac-e5942686e04d	c71ce89e-5d46-4c85-a9a8-955971068a79
d6805391-b498-4223-b5ac-e5942686e04d	74e5f497-484d-4903-bcd2-f38b790e65a9
ab7368d9-ab2c-481e-af82-7df96fa0eed2	e97adb7e-271a-4aa6-af93-ddbc6b3ae218
ab7368d9-ab2c-481e-af82-7df96fa0eed2	ceedd7d5-8c2f-4dd1-b6a6-054e9a274909
5d9b6f64-c107-4a8c-8e1b-a5f4e0fd3b42	14137944-a473-4f1b-a441-4bbe1eb0b4be
5d9b6f64-c107-4a8c-8e1b-a5f4e0fd3b42	a2938f11-9c87-465f-b299-eac3ff627695
5d9b6f64-c107-4a8c-8e1b-a5f4e0fd3b42	d62f77ad-38c4-48d1-9a54-024ee773de21
5d9b6f64-c107-4a8c-8e1b-a5f4e0fd3b42	9687bae6-3a21-4af5-a453-cdb4a6d2e7e0
5d9b6f64-c107-4a8c-8e1b-a5f4e0fd3b42	b6340170-6bcd-42bf-92aa-de907d830e2d
5d9b6f64-c107-4a8c-8e1b-a5f4e0fd3b42	4b66b805-664b-4e89-b56a-3277052b0e42
5d9b6f64-c107-4a8c-8e1b-a5f4e0fd3b42	3b7afdd7-5ce2-415d-8c03-caad1b4fd847
5d9b6f64-c107-4a8c-8e1b-a5f4e0fd3b42	252fbe7e-747f-4e2f-8f6c-e56d853f58df
5d9b6f64-c107-4a8c-8e1b-a5f4e0fd3b42	3bfc017e-f8bd-4644-afb5-cac66ceb94d4
5d9b6f64-c107-4a8c-8e1b-a5f4e0fd3b42	478e829f-fbbb-41b0-a491-25ff7e3761e6
5d9b6f64-c107-4a8c-8e1b-a5f4e0fd3b42	aa344736-46cd-43e0-8c2b-880b4d5d150f
5d9b6f64-c107-4a8c-8e1b-a5f4e0fd3b42	133db2cb-d993-49d1-bfdf-471fcc30b70d
b097de9e-b5c5-41a5-a885-6487ea76aaef	6fbb5af1-da5e-4a00-9276-a7ed6ed39c07
b097de9e-b5c5-41a5-a885-6487ea76aaef	2dfcc81f-36ce-4042-a5f6-5d7fc35f883a
b097de9e-b5c5-41a5-a885-6487ea76aaef	49798bac-b9c3-43b8-89d3-8eebc3dbbee2
b097de9e-b5c5-41a5-a885-6487ea76aaef	995a0ca5-2f0a-4e04-a6a7-fc8ec0e6d4a4
b097de9e-b5c5-41a5-a885-6487ea76aaef	2c6816fd-d89d-411b-89de-8f7643b1211d
b097de9e-b5c5-41a5-a885-6487ea76aaef	e0830ae2-b97e-4e92-beb3-74134e461f2e
b097de9e-b5c5-41a5-a885-6487ea76aaef	a19a7f00-abe4-4420-bffd-52c2f86fef4a
b097de9e-b5c5-41a5-a885-6487ea76aaef	d5697ab3-770b-4cc4-b9c9-fd5b2310631b
b097de9e-b5c5-41a5-a885-6487ea76aaef	4a5654a1-98ff-407f-834b-828430bba523
b097de9e-b5c5-41a5-a885-6487ea76aaef	f766a501-ef24-4897-a5a6-9ee9333f5404
b097de9e-b5c5-41a5-a885-6487ea76aaef	01b63790-e215-4096-9d5f-c4c8fa56bea7
b097de9e-b5c5-41a5-a885-6487ea76aaef	5701af45-c50b-4df8-b3b1-48afa23379e6
f56ede6b-889f-4819-a106-6369176d1b8a	198a2a74-2206-488c-a1e6-df5e30e495a6
4eb31218-206b-47a9-b51e-5c90437aee63	5c008091-a050-4a33-b63f-baa31b6c8d6b
c3af0e1a-213f-4002-8879-e346096767bd	eb650df0-77a4-4bda-aa07-12fb4e8ff13c
13f68a8c-9e46-4143-8fe9-782354947035	88eb17e4-32c5-49ca-a7b4-7ee7a3b6345f
13f68a8c-9e46-4143-8fe9-782354947035	e6d1c5a4-f79e-441f-a736-00a87ba657cb
58b99944-1e11-4c97-8177-60bab4ffe947	1f37728a-9007-44f7-af39-8d6f06fd5a4b
58b99944-1e11-4c97-8177-60bab4ffe947	a622e217-6cbd-4cba-9feb-08ffe18037d2
34321f32-b65f-43fa-9042-4ca0f48d5b09	69f19f17-11a8-4789-b7ba-ecf4eb15507a
34321f32-b65f-43fa-9042-4ca0f48d5b09	e9c49129-c3e1-478e-a3be-800db97bcc58
34321f32-b65f-43fa-9042-4ca0f48d5b09	cf7d9805-e109-4051-b3f0-bf3e99c8a8f3
34321f32-b65f-43fa-9042-4ca0f48d5b09	7e0cde78-d278-4f2c-b5c2-1b9007c8f5b0
34321f32-b65f-43fa-9042-4ca0f48d5b09	9028d889-63b8-4593-9a59-0dc835b4dd38
34321f32-b65f-43fa-9042-4ca0f48d5b09	60f388ed-75a0-401f-8302-d9b1499e2186
34321f32-b65f-43fa-9042-4ca0f48d5b09	6200040f-aa24-4c3f-a4e5-8db3b4b9e5fb
34321f32-b65f-43fa-9042-4ca0f48d5b09	c01100f9-9ad7-4e7f-b266-9e2e11cecb40
34321f32-b65f-43fa-9042-4ca0f48d5b09	e874eddd-a1b8-49f3-96e2-2a8987c6b4e0
b097de9e-b5c5-41a5-a885-6487ea76aaef	ea0ea178-b18a-4487-a6dc-708a8305c21a
b097de9e-b5c5-41a5-a885-6487ea76aaef	4d255112-e4e3-4b60-a48a-68602235082a
aaeb8952-edbf-41ee-b749-b56c953f44fe	31ccc3d1-aff5-4841-b0ea-babb0bc1194d
aaeb8952-edbf-41ee-b749-b56c953f44fe	8dd0502b-c5f3-4264-9e1f-147a05fba84f
aaeb8952-edbf-41ee-b749-b56c953f44fe	384429c1-f48a-4485-98bc-41a94b0512fe
aaeb8952-edbf-41ee-b749-b56c953f44fe	d16d781c-0c0d-4ea3-872b-4377bcb9218d
aaeb8952-edbf-41ee-b749-b56c953f44fe	4bf0f3ae-320c-40d1-a3a5-0a0f6b5d4ea8
aaeb8952-edbf-41ee-b749-b56c953f44fe	f248dd11-7018-4e82-9dd7-70d12466527d
aaeb8952-edbf-41ee-b749-b56c953f44fe	62f04e76-e8e5-40fd-89dd-95d4202469aa
aaeb8952-edbf-41ee-b749-b56c953f44fe	e8bc0fc5-ebc5-4813-9b5a-9eca062b84ca
aaeb8952-edbf-41ee-b749-b56c953f44fe	56987fc2-2364-41de-9447-49d15ba6b9b6
aaeb8952-edbf-41ee-b749-b56c953f44fe	5bb9bb8c-3bd5-4567-aa5d-94780d9f0332
aaeb8952-edbf-41ee-b749-b56c953f44fe	57f18b8b-353b-4014-8140-d336f05712e8
59fcd520-736d-4fec-96bc-6708f87e8e87	6da36a98-029e-45af-97a3-cfb973cf5935
59fcd520-736d-4fec-96bc-6708f87e8e87	45889e75-921f-4b34-a1bf-a9a98c34562b
59fcd520-736d-4fec-96bc-6708f87e8e87	7a9d0c6f-ea43-48c4-815d-0863319b5e86
59fcd520-736d-4fec-96bc-6708f87e8e87	7504353d-f2e8-4cea-9eb1-6bc7a5771688
59fcd520-736d-4fec-96bc-6708f87e8e87	d1fa443d-65e9-4760-9e81-78370e778637
59fcd520-736d-4fec-96bc-6708f87e8e87	0a7c42ad-1d4b-4e2d-8e39-35c0051566a6
1fd0c5ad-42df-4ac7-86f5-60049631414b	3ec5fb74-c25c-4466-8cca-f16233ec0ad5
1fd0c5ad-42df-4ac7-86f5-60049631414b	49477680-f6bb-4deb-b8bd-3e0c9aaf7c69
1fd0c5ad-42df-4ac7-86f5-60049631414b	b16de06d-40ce-4390-aa46-9479fead37b1
1fd0c5ad-42df-4ac7-86f5-60049631414b	5c1235fd-dd6c-47dc-982f-26a295220f86
1fd0c5ad-42df-4ac7-86f5-60049631414b	094156dd-ee47-4545-a832-8ad75f0916f0
1fd0c5ad-42df-4ac7-86f5-60049631414b	7e31b8c9-3c0b-4dba-9b5b-3718306786ee
2fffeffe-b6f6-41d7-a86a-3a8b19920602	faf63f1c-3c29-4d16-9121-4000f5262ce1
2fffeffe-b6f6-41d7-a86a-3a8b19920602	223708a6-26bd-493e-835d-71a4036cebba
2fffeffe-b6f6-41d7-a86a-3a8b19920602	e93128ba-36f0-4b30-8c90-af7d8b18590c
bfefa396-0772-4c69-913e-d7dc05aa2f19	cff71123-0705-4e43-be0c-373bb757253e
bfefa396-0772-4c69-913e-d7dc05aa2f19	2506ea7b-4eb8-4fb5-a679-933167bb97fc
bfefa396-0772-4c69-913e-d7dc05aa2f19	9a54301b-1035-43b1-9c87-c39be28c56bf
bfefa396-0772-4c69-913e-d7dc05aa2f19	a1d01722-5fb4-43f0-8168-ee598c56fde4
bfefa396-0772-4c69-913e-d7dc05aa2f19	5d4a5674-e0b3-4359-817f-d54a84abef4d
bfefa396-0772-4c69-913e-d7dc05aa2f19	a4a9dc0b-0828-4a4f-ba35-7d1306831883
d0dadc6c-30b7-4fa1-a1da-547d00d93b40	c42c14ab-0217-4814-bc59-d9267916e458
d0dadc6c-30b7-4fa1-a1da-547d00d93b40	f07328e1-261c-41e2-bbd0-4ba3632a605d
d0dadc6c-30b7-4fa1-a1da-547d00d93b40	70de8fd7-2fb3-4150-91c7-f425eff615b1
be74799d-cd59-466e-9c56-aa28bf154604	19809b9b-074a-409a-a781-e3da647032f9
be74799d-cd59-466e-9c56-aa28bf154604	1eb12ac6-fe21-4f7a-aef3-452dc79c7049
be74799d-cd59-466e-9c56-aa28bf154604	c53f1924-09cf-4e27-9e4b-25d69d522d15
be74799d-cd59-466e-9c56-aa28bf154604	a8909502-0b24-4db0-9bcc-9f712f046d82
be74799d-cd59-466e-9c56-aa28bf154604	4355b399-97b7-4d86-8502-ada1c3023886
be74799d-cd59-466e-9c56-aa28bf154604	774a527d-6943-433d-a662-8e3e51b2dd9d
be74799d-cd59-466e-9c56-aa28bf154604	b58aaf97-b952-4b85-8a15-9f9269c9ef62
be74799d-cd59-466e-9c56-aa28bf154604	2766a29c-a225-4932-8177-4c53a34e2295
be74799d-cd59-466e-9c56-aa28bf154604	6176c01f-1011-4e90-bdf9-30e74e64e4ce
be74799d-cd59-466e-9c56-aa28bf154604	c746aef5-1b5e-489e-8523-150c20e9bd17
be74799d-cd59-466e-9c56-aa28bf154604	92845e68-b44d-4716-a1bb-c1918def2db6
f1c4ed41-013f-432c-a535-46ec82a678ec	bb5c3b6c-ab71-4b95-9884-da8683064d08
f1c4ed41-013f-432c-a535-46ec82a678ec	3fa41409-5c93-4ad6-9ebb-814892d5c8fa
f1c4ed41-013f-432c-a535-46ec82a678ec	6259903a-76a8-4aee-9ea4-6522abd6a04c
\.


--
-- Data for Name: podcast; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.podcast (id_konten, email_podcaster) FROM stdin;
f8a92758-f584-48fb-b7cb-f5b64d6250cb	hananattaki@mail.com
576b9815-1375-48e4-b1e3-725bb12b730e	jeihansaviera@mail.com
\.


--
-- Data for Name: podcaster; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.podcaster (email) FROM stdin;
marmut@company.id
hananattaki@mail.com
jeihansaviera@mail.com
adit@mail.com
\.


--
-- Data for Name: premium; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.premium (email) FROM stdin;
\.


--
-- Data for Name: royalti; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.royalti (id_pemilik_hak_cipta, id_song, jumlah) FROM stdin;
fb58bdc7-9a70-468a-8bb2-7455a1976734	e97adb7e-271a-4aa6-af93-ddbc6b3ae218	0
7888c152-a1ad-4d2d-81b3-473db420a49a	e97adb7e-271a-4aa6-af93-ddbc6b3ae218	0
565eba3f-2a04-43b6-b53b-0748b9bc23bf	e97adb7e-271a-4aa6-af93-ddbc6b3ae218	0
fb58bdc7-9a70-468a-8bb2-7455a1976734	ceedd7d5-8c2f-4dd1-b6a6-054e9a274909	0
7888c152-a1ad-4d2d-81b3-473db420a49a	ceedd7d5-8c2f-4dd1-b6a6-054e9a274909	0
565eba3f-2a04-43b6-b53b-0748b9bc23bf	ceedd7d5-8c2f-4dd1-b6a6-054e9a274909	0
bd58a46e-acc7-4758-8a4d-23371e21ba2f	14137944-a473-4f1b-a441-4bbe1eb0b4be	0
78463091-6cdd-45cc-b466-41191df66009	14137944-a473-4f1b-a441-4bbe1eb0b4be	0
f252675b-df04-4b1e-91c9-a91d7d84b3b9	14137944-a473-4f1b-a441-4bbe1eb0b4be	0
c04b423c-6a8e-46ae-84e2-d8c2c8b2e1bb	14137944-a473-4f1b-a441-4bbe1eb0b4be	0
74dd2972-1b53-4ff6-b1bf-cf89c0079660	14137944-a473-4f1b-a441-4bbe1eb0b4be	0
565eba3f-2a04-43b6-b53b-0748b9bc23bf	14137944-a473-4f1b-a441-4bbe1eb0b4be	0
bd58a46e-acc7-4758-8a4d-23371e21ba2f	a2938f11-9c87-465f-b299-eac3ff627695	0
78463091-6cdd-45cc-b466-41191df66009	a2938f11-9c87-465f-b299-eac3ff627695	0
f252675b-df04-4b1e-91c9-a91d7d84b3b9	a2938f11-9c87-465f-b299-eac3ff627695	0
c04b423c-6a8e-46ae-84e2-d8c2c8b2e1bb	a2938f11-9c87-465f-b299-eac3ff627695	0
74dd2972-1b53-4ff6-b1bf-cf89c0079660	a2938f11-9c87-465f-b299-eac3ff627695	0
565eba3f-2a04-43b6-b53b-0748b9bc23bf	a2938f11-9c87-465f-b299-eac3ff627695	0
bd58a46e-acc7-4758-8a4d-23371e21ba2f	d62f77ad-38c4-48d1-9a54-024ee773de21	0
78463091-6cdd-45cc-b466-41191df66009	d62f77ad-38c4-48d1-9a54-024ee773de21	0
f252675b-df04-4b1e-91c9-a91d7d84b3b9	d62f77ad-38c4-48d1-9a54-024ee773de21	0
c04b423c-6a8e-46ae-84e2-d8c2c8b2e1bb	d62f77ad-38c4-48d1-9a54-024ee773de21	0
74dd2972-1b53-4ff6-b1bf-cf89c0079660	d62f77ad-38c4-48d1-9a54-024ee773de21	0
565eba3f-2a04-43b6-b53b-0748b9bc23bf	d62f77ad-38c4-48d1-9a54-024ee773de21	0
bd58a46e-acc7-4758-8a4d-23371e21ba2f	9687bae6-3a21-4af5-a453-cdb4a6d2e7e0	0
78463091-6cdd-45cc-b466-41191df66009	9687bae6-3a21-4af5-a453-cdb4a6d2e7e0	0
f252675b-df04-4b1e-91c9-a91d7d84b3b9	9687bae6-3a21-4af5-a453-cdb4a6d2e7e0	0
c04b423c-6a8e-46ae-84e2-d8c2c8b2e1bb	9687bae6-3a21-4af5-a453-cdb4a6d2e7e0	0
74dd2972-1b53-4ff6-b1bf-cf89c0079660	9687bae6-3a21-4af5-a453-cdb4a6d2e7e0	0
565eba3f-2a04-43b6-b53b-0748b9bc23bf	9687bae6-3a21-4af5-a453-cdb4a6d2e7e0	0
bd58a46e-acc7-4758-8a4d-23371e21ba2f	b6340170-6bcd-42bf-92aa-de907d830e2d	0
78463091-6cdd-45cc-b466-41191df66009	b6340170-6bcd-42bf-92aa-de907d830e2d	0
f252675b-df04-4b1e-91c9-a91d7d84b3b9	b6340170-6bcd-42bf-92aa-de907d830e2d	0
c04b423c-6a8e-46ae-84e2-d8c2c8b2e1bb	b6340170-6bcd-42bf-92aa-de907d830e2d	0
74dd2972-1b53-4ff6-b1bf-cf89c0079660	b6340170-6bcd-42bf-92aa-de907d830e2d	0
565eba3f-2a04-43b6-b53b-0748b9bc23bf	b6340170-6bcd-42bf-92aa-de907d830e2d	0
bd58a46e-acc7-4758-8a4d-23371e21ba2f	4b66b805-664b-4e89-b56a-3277052b0e42	0
78463091-6cdd-45cc-b466-41191df66009	4b66b805-664b-4e89-b56a-3277052b0e42	0
f252675b-df04-4b1e-91c9-a91d7d84b3b9	4b66b805-664b-4e89-b56a-3277052b0e42	0
c04b423c-6a8e-46ae-84e2-d8c2c8b2e1bb	4b66b805-664b-4e89-b56a-3277052b0e42	0
74dd2972-1b53-4ff6-b1bf-cf89c0079660	4b66b805-664b-4e89-b56a-3277052b0e42	0
565eba3f-2a04-43b6-b53b-0748b9bc23bf	4b66b805-664b-4e89-b56a-3277052b0e42	0
bd58a46e-acc7-4758-8a4d-23371e21ba2f	3b7afdd7-5ce2-415d-8c03-caad1b4fd847	0
78463091-6cdd-45cc-b466-41191df66009	3b7afdd7-5ce2-415d-8c03-caad1b4fd847	0
f252675b-df04-4b1e-91c9-a91d7d84b3b9	3b7afdd7-5ce2-415d-8c03-caad1b4fd847	0
c04b423c-6a8e-46ae-84e2-d8c2c8b2e1bb	3b7afdd7-5ce2-415d-8c03-caad1b4fd847	0
74dd2972-1b53-4ff6-b1bf-cf89c0079660	3b7afdd7-5ce2-415d-8c03-caad1b4fd847	0
565eba3f-2a04-43b6-b53b-0748b9bc23bf	3b7afdd7-5ce2-415d-8c03-caad1b4fd847	0
bd58a46e-acc7-4758-8a4d-23371e21ba2f	252fbe7e-747f-4e2f-8f6c-e56d853f58df	0
78463091-6cdd-45cc-b466-41191df66009	252fbe7e-747f-4e2f-8f6c-e56d853f58df	0
f252675b-df04-4b1e-91c9-a91d7d84b3b9	252fbe7e-747f-4e2f-8f6c-e56d853f58df	0
c04b423c-6a8e-46ae-84e2-d8c2c8b2e1bb	252fbe7e-747f-4e2f-8f6c-e56d853f58df	0
74dd2972-1b53-4ff6-b1bf-cf89c0079660	252fbe7e-747f-4e2f-8f6c-e56d853f58df	0
565eba3f-2a04-43b6-b53b-0748b9bc23bf	252fbe7e-747f-4e2f-8f6c-e56d853f58df	0
bd58a46e-acc7-4758-8a4d-23371e21ba2f	3bfc017e-f8bd-4644-afb5-cac66ceb94d4	0
78463091-6cdd-45cc-b466-41191df66009	3bfc017e-f8bd-4644-afb5-cac66ceb94d4	0
f252675b-df04-4b1e-91c9-a91d7d84b3b9	3bfc017e-f8bd-4644-afb5-cac66ceb94d4	0
c04b423c-6a8e-46ae-84e2-d8c2c8b2e1bb	3bfc017e-f8bd-4644-afb5-cac66ceb94d4	0
74dd2972-1b53-4ff6-b1bf-cf89c0079660	3bfc017e-f8bd-4644-afb5-cac66ceb94d4	0
565eba3f-2a04-43b6-b53b-0748b9bc23bf	3bfc017e-f8bd-4644-afb5-cac66ceb94d4	0
bd58a46e-acc7-4758-8a4d-23371e21ba2f	478e829f-fbbb-41b0-a491-25ff7e3761e6	0
78463091-6cdd-45cc-b466-41191df66009	478e829f-fbbb-41b0-a491-25ff7e3761e6	0
f252675b-df04-4b1e-91c9-a91d7d84b3b9	478e829f-fbbb-41b0-a491-25ff7e3761e6	0
c04b423c-6a8e-46ae-84e2-d8c2c8b2e1bb	478e829f-fbbb-41b0-a491-25ff7e3761e6	0
74dd2972-1b53-4ff6-b1bf-cf89c0079660	478e829f-fbbb-41b0-a491-25ff7e3761e6	0
565eba3f-2a04-43b6-b53b-0748b9bc23bf	478e829f-fbbb-41b0-a491-25ff7e3761e6	0
bd58a46e-acc7-4758-8a4d-23371e21ba2f	aa344736-46cd-43e0-8c2b-880b4d5d150f	0
78463091-6cdd-45cc-b466-41191df66009	aa344736-46cd-43e0-8c2b-880b4d5d150f	0
f252675b-df04-4b1e-91c9-a91d7d84b3b9	aa344736-46cd-43e0-8c2b-880b4d5d150f	0
c04b423c-6a8e-46ae-84e2-d8c2c8b2e1bb	aa344736-46cd-43e0-8c2b-880b4d5d150f	0
74dd2972-1b53-4ff6-b1bf-cf89c0079660	aa344736-46cd-43e0-8c2b-880b4d5d150f	0
565eba3f-2a04-43b6-b53b-0748b9bc23bf	aa344736-46cd-43e0-8c2b-880b4d5d150f	0
bd58a46e-acc7-4758-8a4d-23371e21ba2f	133db2cb-d993-49d1-bfdf-471fcc30b70d	0
78463091-6cdd-45cc-b466-41191df66009	133db2cb-d993-49d1-bfdf-471fcc30b70d	0
f252675b-df04-4b1e-91c9-a91d7d84b3b9	133db2cb-d993-49d1-bfdf-471fcc30b70d	0
c04b423c-6a8e-46ae-84e2-d8c2c8b2e1bb	133db2cb-d993-49d1-bfdf-471fcc30b70d	0
74dd2972-1b53-4ff6-b1bf-cf89c0079660	133db2cb-d993-49d1-bfdf-471fcc30b70d	0
565eba3f-2a04-43b6-b53b-0748b9bc23bf	133db2cb-d993-49d1-bfdf-471fcc30b70d	0
bbab8b12-25a5-4405-a639-104d21c7234c	198a2a74-2206-488c-a1e6-df5e30e495a6	0
74dd2972-1b53-4ff6-b1bf-cf89c0079660	198a2a74-2206-488c-a1e6-df5e30e495a6	0
565eba3f-2a04-43b6-b53b-0748b9bc23bf	198a2a74-2206-488c-a1e6-df5e30e495a6	0
5b7ae832-c3ba-497c-950d-fb0c7d2dd016	5c008091-a050-4a33-b63f-baa31b6c8d6b	0
78463091-6cdd-45cc-b466-41191df66009	5c008091-a050-4a33-b63f-baa31b6c8d6b	0
565eba3f-2a04-43b6-b53b-0748b9bc23bf	5c008091-a050-4a33-b63f-baa31b6c8d6b	0
fd853044-1e1a-487b-af09-aca401c00bd4	eb650df0-77a4-4bda-aa07-12fb4e8ff13c	0
c04b423c-6a8e-46ae-84e2-d8c2c8b2e1bb	eb650df0-77a4-4bda-aa07-12fb4e8ff13c	0
565eba3f-2a04-43b6-b53b-0748b9bc23bf	eb650df0-77a4-4bda-aa07-12fb4e8ff13c	0
02f5d303-88e4-400e-908a-4e8c3a9800ef	88eb17e4-32c5-49ca-a7b4-7ee7a3b6345f	0
f252675b-df04-4b1e-91c9-a91d7d84b3b9	88eb17e4-32c5-49ca-a7b4-7ee7a3b6345f	0
565eba3f-2a04-43b6-b53b-0748b9bc23bf	88eb17e4-32c5-49ca-a7b4-7ee7a3b6345f	0
02f5d303-88e4-400e-908a-4e8c3a9800ef	e6d1c5a4-f79e-441f-a736-00a87ba657cb	0
f252675b-df04-4b1e-91c9-a91d7d84b3b9	e6d1c5a4-f79e-441f-a736-00a87ba657cb	0
565eba3f-2a04-43b6-b53b-0748b9bc23bf	e6d1c5a4-f79e-441f-a736-00a87ba657cb	0
46475d65-9cd3-45ae-b7af-c4f1b6422053	c71ce89e-5d46-4c85-a9a8-955971068a79	0
c04f5957-c758-43ac-aa53-037d56d7e0da	c71ce89e-5d46-4c85-a9a8-955971068a79	0
565eba3f-2a04-43b6-b53b-0748b9bc23bf	c71ce89e-5d46-4c85-a9a8-955971068a79	0
46475d65-9cd3-45ae-b7af-c4f1b6422053	74e5f497-484d-4903-bcd2-f38b790e65a9	0
c04f5957-c758-43ac-aa53-037d56d7e0da	74e5f497-484d-4903-bcd2-f38b790e65a9	0
8081a9b5-0bc9-4967-936d-7ffc49e38dce	74e5f497-484d-4903-bcd2-f38b790e65a9	0
99a18df8-aaa1-4358-af61-a411d63baeda	1f37728a-9007-44f7-af39-8d6f06fd5a4b	0
5fd4b3c7-7f04-424d-be9e-126a5e20529d	1f37728a-9007-44f7-af39-8d6f06fd5a4b	0
8081a9b5-0bc9-4967-936d-7ffc49e38dce	1f37728a-9007-44f7-af39-8d6f06fd5a4b	0
99a18df8-aaa1-4358-af61-a411d63baeda	a622e217-6cbd-4cba-9feb-08ffe18037d2	0
5fd4b3c7-7f04-424d-be9e-126a5e20529d	a622e217-6cbd-4cba-9feb-08ffe18037d2	0
8081a9b5-0bc9-4967-936d-7ffc49e38dce	a622e217-6cbd-4cba-9feb-08ffe18037d2	0
66f0cdb2-e32b-44aa-a8f4-ff2c6ca463e1	69f19f17-11a8-4789-b7ba-ecf4eb15507a	0
c04f5957-c758-43ac-aa53-037d56d7e0da	69f19f17-11a8-4789-b7ba-ecf4eb15507a	0
5fd4b3c7-7f04-424d-be9e-126a5e20529d	69f19f17-11a8-4789-b7ba-ecf4eb15507a	0
8081a9b5-0bc9-4967-936d-7ffc49e38dce	69f19f17-11a8-4789-b7ba-ecf4eb15507a	0
66f0cdb2-e32b-44aa-a8f4-ff2c6ca463e1	e9c49129-c3e1-478e-a3be-800db97bcc58	0
c04f5957-c758-43ac-aa53-037d56d7e0da	e9c49129-c3e1-478e-a3be-800db97bcc58	0
5fd4b3c7-7f04-424d-be9e-126a5e20529d	e9c49129-c3e1-478e-a3be-800db97bcc58	0
8081a9b5-0bc9-4967-936d-7ffc49e38dce	e9c49129-c3e1-478e-a3be-800db97bcc58	0
66f0cdb2-e32b-44aa-a8f4-ff2c6ca463e1	cf7d9805-e109-4051-b3f0-bf3e99c8a8f3	0
c04f5957-c758-43ac-aa53-037d56d7e0da	cf7d9805-e109-4051-b3f0-bf3e99c8a8f3	0
5fd4b3c7-7f04-424d-be9e-126a5e20529d	cf7d9805-e109-4051-b3f0-bf3e99c8a8f3	0
8081a9b5-0bc9-4967-936d-7ffc49e38dce	cf7d9805-e109-4051-b3f0-bf3e99c8a8f3	0
66f0cdb2-e32b-44aa-a8f4-ff2c6ca463e1	7e0cde78-d278-4f2c-b5c2-1b9007c8f5b0	0
5fd4b3c7-7f04-424d-be9e-126a5e20529d	7e0cde78-d278-4f2c-b5c2-1b9007c8f5b0	0
8081a9b5-0bc9-4967-936d-7ffc49e38dce	7e0cde78-d278-4f2c-b5c2-1b9007c8f5b0	0
66f0cdb2-e32b-44aa-a8f4-ff2c6ca463e1	9028d889-63b8-4593-9a59-0dc835b4dd38	0
c04f5957-c758-43ac-aa53-037d56d7e0da	9028d889-63b8-4593-9a59-0dc835b4dd38	0
5fd4b3c7-7f04-424d-be9e-126a5e20529d	9028d889-63b8-4593-9a59-0dc835b4dd38	0
8081a9b5-0bc9-4967-936d-7ffc49e38dce	9028d889-63b8-4593-9a59-0dc835b4dd38	0
66f0cdb2-e32b-44aa-a8f4-ff2c6ca463e1	60f388ed-75a0-401f-8302-d9b1499e2186	0
5fd4b3c7-7f04-424d-be9e-126a5e20529d	60f388ed-75a0-401f-8302-d9b1499e2186	0
8081a9b5-0bc9-4967-936d-7ffc49e38dce	60f388ed-75a0-401f-8302-d9b1499e2186	0
66f0cdb2-e32b-44aa-a8f4-ff2c6ca463e1	6200040f-aa24-4c3f-a4e5-8db3b4b9e5fb	0
c04f5957-c758-43ac-aa53-037d56d7e0da	6200040f-aa24-4c3f-a4e5-8db3b4b9e5fb	0
5fd4b3c7-7f04-424d-be9e-126a5e20529d	6200040f-aa24-4c3f-a4e5-8db3b4b9e5fb	0
8081a9b5-0bc9-4967-936d-7ffc49e38dce	6200040f-aa24-4c3f-a4e5-8db3b4b9e5fb	0
66f0cdb2-e32b-44aa-a8f4-ff2c6ca463e1	c01100f9-9ad7-4e7f-b266-9e2e11cecb40	0
c04f5957-c758-43ac-aa53-037d56d7e0da	c01100f9-9ad7-4e7f-b266-9e2e11cecb40	0
8081a9b5-0bc9-4967-936d-7ffc49e38dce	c01100f9-9ad7-4e7f-b266-9e2e11cecb40	0
66f0cdb2-e32b-44aa-a8f4-ff2c6ca463e1	e874eddd-a1b8-49f3-96e2-2a8987c6b4e0	0
c04f5957-c758-43ac-aa53-037d56d7e0da	e874eddd-a1b8-49f3-96e2-2a8987c6b4e0	0
5fd4b3c7-7f04-424d-be9e-126a5e20529d	e874eddd-a1b8-49f3-96e2-2a8987c6b4e0	0
8081a9b5-0bc9-4967-936d-7ffc49e38dce	e874eddd-a1b8-49f3-96e2-2a8987c6b4e0	0
6a014a0d-57a9-4605-8ca1-81096a7c9919	31ccc3d1-aff5-4841-b0ea-babb0bc1194d	0
cd19bee8-25f8-4ae1-a0a5-d1e64074b898	31ccc3d1-aff5-4841-b0ea-babb0bc1194d	0
e05ae9ae-4d2d-4f3e-b489-e6eb64631ec0	31ccc3d1-aff5-4841-b0ea-babb0bc1194d	0
6a014a0d-57a9-4605-8ca1-81096a7c9919	8dd0502b-c5f3-4264-9e1f-147a05fba84f	0
cd19bee8-25f8-4ae1-a0a5-d1e64074b898	8dd0502b-c5f3-4264-9e1f-147a05fba84f	0
e05ae9ae-4d2d-4f3e-b489-e6eb64631ec0	8dd0502b-c5f3-4264-9e1f-147a05fba84f	0
6a014a0d-57a9-4605-8ca1-81096a7c9919	384429c1-f48a-4485-98bc-41a94b0512fe	0
cd19bee8-25f8-4ae1-a0a5-d1e64074b898	384429c1-f48a-4485-98bc-41a94b0512fe	0
e05ae9ae-4d2d-4f3e-b489-e6eb64631ec0	384429c1-f48a-4485-98bc-41a94b0512fe	0
6a014a0d-57a9-4605-8ca1-81096a7c9919	d16d781c-0c0d-4ea3-872b-4377bcb9218d	0
cd19bee8-25f8-4ae1-a0a5-d1e64074b898	d16d781c-0c0d-4ea3-872b-4377bcb9218d	0
e05ae9ae-4d2d-4f3e-b489-e6eb64631ec0	d16d781c-0c0d-4ea3-872b-4377bcb9218d	0
6a014a0d-57a9-4605-8ca1-81096a7c9919	4bf0f3ae-320c-40d1-a3a5-0a0f6b5d4ea8	0
cd19bee8-25f8-4ae1-a0a5-d1e64074b898	4bf0f3ae-320c-40d1-a3a5-0a0f6b5d4ea8	0
e05ae9ae-4d2d-4f3e-b489-e6eb64631ec0	4bf0f3ae-320c-40d1-a3a5-0a0f6b5d4ea8	0
6a014a0d-57a9-4605-8ca1-81096a7c9919	f248dd11-7018-4e82-9dd7-70d12466527d	0
cd19bee8-25f8-4ae1-a0a5-d1e64074b898	f248dd11-7018-4e82-9dd7-70d12466527d	0
e05ae9ae-4d2d-4f3e-b489-e6eb64631ec0	f248dd11-7018-4e82-9dd7-70d12466527d	0
6a014a0d-57a9-4605-8ca1-81096a7c9919	62f04e76-e8e5-40fd-89dd-95d4202469aa	0
cd19bee8-25f8-4ae1-a0a5-d1e64074b898	62f04e76-e8e5-40fd-89dd-95d4202469aa	0
e05ae9ae-4d2d-4f3e-b489-e6eb64631ec0	62f04e76-e8e5-40fd-89dd-95d4202469aa	0
6a014a0d-57a9-4605-8ca1-81096a7c9919	e8bc0fc5-ebc5-4813-9b5a-9eca062b84ca	0
cd19bee8-25f8-4ae1-a0a5-d1e64074b898	e8bc0fc5-ebc5-4813-9b5a-9eca062b84ca	0
e05ae9ae-4d2d-4f3e-b489-e6eb64631ec0	e8bc0fc5-ebc5-4813-9b5a-9eca062b84ca	0
6a014a0d-57a9-4605-8ca1-81096a7c9919	56987fc2-2364-41de-9447-49d15ba6b9b6	0
cd19bee8-25f8-4ae1-a0a5-d1e64074b898	56987fc2-2364-41de-9447-49d15ba6b9b6	0
e05ae9ae-4d2d-4f3e-b489-e6eb64631ec0	56987fc2-2364-41de-9447-49d15ba6b9b6	0
6a014a0d-57a9-4605-8ca1-81096a7c9919	5bb9bb8c-3bd5-4567-aa5d-94780d9f0332	0
cd19bee8-25f8-4ae1-a0a5-d1e64074b898	5bb9bb8c-3bd5-4567-aa5d-94780d9f0332	0
e05ae9ae-4d2d-4f3e-b489-e6eb64631ec0	5bb9bb8c-3bd5-4567-aa5d-94780d9f0332	0
6a014a0d-57a9-4605-8ca1-81096a7c9919	57f18b8b-353b-4014-8140-d336f05712e8	0
cd19bee8-25f8-4ae1-a0a5-d1e64074b898	57f18b8b-353b-4014-8140-d336f05712e8	0
e05ae9ae-4d2d-4f3e-b489-e6eb64631ec0	57f18b8b-353b-4014-8140-d336f05712e8	0
0152bb84-7795-4431-a372-3d082bd6028d	6da36a98-029e-45af-97a3-cfb973cf5935	0
cd19bee8-25f8-4ae1-a0a5-d1e64074b898	6da36a98-029e-45af-97a3-cfb973cf5935	0
e05ae9ae-4d2d-4f3e-b489-e6eb64631ec0	6da36a98-029e-45af-97a3-cfb973cf5935	0
0152bb84-7795-4431-a372-3d082bd6028d	45889e75-921f-4b34-a1bf-a9a98c34562b	0
cd19bee8-25f8-4ae1-a0a5-d1e64074b898	45889e75-921f-4b34-a1bf-a9a98c34562b	0
e05ae9ae-4d2d-4f3e-b489-e6eb64631ec0	45889e75-921f-4b34-a1bf-a9a98c34562b	0
0152bb84-7795-4431-a372-3d082bd6028d	7a9d0c6f-ea43-48c4-815d-0863319b5e86	0
cd19bee8-25f8-4ae1-a0a5-d1e64074b898	7a9d0c6f-ea43-48c4-815d-0863319b5e86	0
e05ae9ae-4d2d-4f3e-b489-e6eb64631ec0	7a9d0c6f-ea43-48c4-815d-0863319b5e86	0
0152bb84-7795-4431-a372-3d082bd6028d	7504353d-f2e8-4cea-9eb1-6bc7a5771688	0
cd19bee8-25f8-4ae1-a0a5-d1e64074b898	7504353d-f2e8-4cea-9eb1-6bc7a5771688	0
e05ae9ae-4d2d-4f3e-b489-e6eb64631ec0	7504353d-f2e8-4cea-9eb1-6bc7a5771688	0
0152bb84-7795-4431-a372-3d082bd6028d	d1fa443d-65e9-4760-9e81-78370e778637	0
cd19bee8-25f8-4ae1-a0a5-d1e64074b898	d1fa443d-65e9-4760-9e81-78370e778637	0
e05ae9ae-4d2d-4f3e-b489-e6eb64631ec0	d1fa443d-65e9-4760-9e81-78370e778637	0
0152bb84-7795-4431-a372-3d082bd6028d	0a7c42ad-1d4b-4e2d-8e39-35c0051566a6	0
cd19bee8-25f8-4ae1-a0a5-d1e64074b898	0a7c42ad-1d4b-4e2d-8e39-35c0051566a6	0
e05ae9ae-4d2d-4f3e-b489-e6eb64631ec0	0a7c42ad-1d4b-4e2d-8e39-35c0051566a6	0
59f9915c-da63-48b8-a467-5d7d2c00e950	3ec5fb74-c25c-4466-8cca-f16233ec0ad5	0
cd19bee8-25f8-4ae1-a0a5-d1e64074b898	3ec5fb74-c25c-4466-8cca-f16233ec0ad5	0
e05ae9ae-4d2d-4f3e-b489-e6eb64631ec0	3ec5fb74-c25c-4466-8cca-f16233ec0ad5	0
59f9915c-da63-48b8-a467-5d7d2c00e950	49477680-f6bb-4deb-b8bd-3e0c9aaf7c69	0
cd19bee8-25f8-4ae1-a0a5-d1e64074b898	49477680-f6bb-4deb-b8bd-3e0c9aaf7c69	0
e05ae9ae-4d2d-4f3e-b489-e6eb64631ec0	49477680-f6bb-4deb-b8bd-3e0c9aaf7c69	0
59f9915c-da63-48b8-a467-5d7d2c00e950	b16de06d-40ce-4390-aa46-9479fead37b1	0
cd19bee8-25f8-4ae1-a0a5-d1e64074b898	b16de06d-40ce-4390-aa46-9479fead37b1	0
e05ae9ae-4d2d-4f3e-b489-e6eb64631ec0	b16de06d-40ce-4390-aa46-9479fead37b1	0
59f9915c-da63-48b8-a467-5d7d2c00e950	5c1235fd-dd6c-47dc-982f-26a295220f86	0
cd19bee8-25f8-4ae1-a0a5-d1e64074b898	5c1235fd-dd6c-47dc-982f-26a295220f86	0
e05ae9ae-4d2d-4f3e-b489-e6eb64631ec0	5c1235fd-dd6c-47dc-982f-26a295220f86	0
59f9915c-da63-48b8-a467-5d7d2c00e950	094156dd-ee47-4545-a832-8ad75f0916f0	0
cd19bee8-25f8-4ae1-a0a5-d1e64074b898	094156dd-ee47-4545-a832-8ad75f0916f0	0
e05ae9ae-4d2d-4f3e-b489-e6eb64631ec0	094156dd-ee47-4545-a832-8ad75f0916f0	0
59f9915c-da63-48b8-a467-5d7d2c00e950	7e31b8c9-3c0b-4dba-9b5b-3718306786ee	0
cd19bee8-25f8-4ae1-a0a5-d1e64074b898	7e31b8c9-3c0b-4dba-9b5b-3718306786ee	0
e05ae9ae-4d2d-4f3e-b489-e6eb64631ec0	7e31b8c9-3c0b-4dba-9b5b-3718306786ee	0
e094e569-e4e0-4580-b54b-de328022550d	faf63f1c-3c29-4d16-9121-4000f5262ce1	0
cd19bee8-25f8-4ae1-a0a5-d1e64074b898	faf63f1c-3c29-4d16-9121-4000f5262ce1	0
e05ae9ae-4d2d-4f3e-b489-e6eb64631ec0	faf63f1c-3c29-4d16-9121-4000f5262ce1	0
e094e569-e4e0-4580-b54b-de328022550d	223708a6-26bd-493e-835d-71a4036cebba	0
cd19bee8-25f8-4ae1-a0a5-d1e64074b898	223708a6-26bd-493e-835d-71a4036cebba	0
e46dc1de-d25e-4920-a778-ef58cc365a15	223708a6-26bd-493e-835d-71a4036cebba	0
e05ae9ae-4d2d-4f3e-b489-e6eb64631ec0	223708a6-26bd-493e-835d-71a4036cebba	0
e094e569-e4e0-4580-b54b-de328022550d	e93128ba-36f0-4b30-8c90-af7d8b18590c	0
cd19bee8-25f8-4ae1-a0a5-d1e64074b898	e93128ba-36f0-4b30-8c90-af7d8b18590c	0
e46dc1de-d25e-4920-a778-ef58cc365a15	e93128ba-36f0-4b30-8c90-af7d8b18590c	0
e05ae9ae-4d2d-4f3e-b489-e6eb64631ec0	e93128ba-36f0-4b30-8c90-af7d8b18590c	0
bd2a2051-01d3-49ff-b356-ff91344cadee	cff71123-0705-4e43-be0c-373bb757253e	0
cd19bee8-25f8-4ae1-a0a5-d1e64074b898	cff71123-0705-4e43-be0c-373bb757253e	0
e05ae9ae-4d2d-4f3e-b489-e6eb64631ec0	cff71123-0705-4e43-be0c-373bb757253e	0
bd2a2051-01d3-49ff-b356-ff91344cadee	2506ea7b-4eb8-4fb5-a679-933167bb97fc	0
cd19bee8-25f8-4ae1-a0a5-d1e64074b898	2506ea7b-4eb8-4fb5-a679-933167bb97fc	0
e05ae9ae-4d2d-4f3e-b489-e6eb64631ec0	2506ea7b-4eb8-4fb5-a679-933167bb97fc	0
bd2a2051-01d3-49ff-b356-ff91344cadee	9a54301b-1035-43b1-9c87-c39be28c56bf	0
cd19bee8-25f8-4ae1-a0a5-d1e64074b898	9a54301b-1035-43b1-9c87-c39be28c56bf	0
e05ae9ae-4d2d-4f3e-b489-e6eb64631ec0	9a54301b-1035-43b1-9c87-c39be28c56bf	0
bd2a2051-01d3-49ff-b356-ff91344cadee	a1d01722-5fb4-43f0-8168-ee598c56fde4	0
cd19bee8-25f8-4ae1-a0a5-d1e64074b898	a1d01722-5fb4-43f0-8168-ee598c56fde4	0
e05ae9ae-4d2d-4f3e-b489-e6eb64631ec0	a1d01722-5fb4-43f0-8168-ee598c56fde4	0
bd2a2051-01d3-49ff-b356-ff91344cadee	5d4a5674-e0b3-4359-817f-d54a84abef4d	0
cd19bee8-25f8-4ae1-a0a5-d1e64074b898	5d4a5674-e0b3-4359-817f-d54a84abef4d	0
e05ae9ae-4d2d-4f3e-b489-e6eb64631ec0	5d4a5674-e0b3-4359-817f-d54a84abef4d	0
bd2a2051-01d3-49ff-b356-ff91344cadee	a4a9dc0b-0828-4a4f-ba35-7d1306831883	0
cd19bee8-25f8-4ae1-a0a5-d1e64074b898	a4a9dc0b-0828-4a4f-ba35-7d1306831883	0
e05ae9ae-4d2d-4f3e-b489-e6eb64631ec0	a4a9dc0b-0828-4a4f-ba35-7d1306831883	0
f5c2e08d-fe32-4161-bf41-c21e4823c1f9	2dfcc81f-36ce-4042-a5f6-5d7fc35f883a	0
9e491377-f340-4983-b150-9c07a4e68286	2dfcc81f-36ce-4042-a5f6-5d7fc35f883a	0
e5d983a5-3037-48e5-a2d8-a24e287f5269	2dfcc81f-36ce-4042-a5f6-5d7fc35f883a	0
f5c2e08d-fe32-4161-bf41-c21e4823c1f9	49798bac-b9c3-43b8-89d3-8eebc3dbbee2	0
9e491377-f340-4983-b150-9c07a4e68286	49798bac-b9c3-43b8-89d3-8eebc3dbbee2	0
e5d983a5-3037-48e5-a2d8-a24e287f5269	49798bac-b9c3-43b8-89d3-8eebc3dbbee2	0
f5c2e08d-fe32-4161-bf41-c21e4823c1f9	995a0ca5-2f0a-4e04-a6a7-fc8ec0e6d4a4	0
9e491377-f340-4983-b150-9c07a4e68286	995a0ca5-2f0a-4e04-a6a7-fc8ec0e6d4a4	0
e5d983a5-3037-48e5-a2d8-a24e287f5269	995a0ca5-2f0a-4e04-a6a7-fc8ec0e6d4a4	0
f5c2e08d-fe32-4161-bf41-c21e4823c1f9	6fbb5af1-da5e-4a00-9276-a7ed6ed39c07	0
9e491377-f340-4983-b150-9c07a4e68286	6fbb5af1-da5e-4a00-9276-a7ed6ed39c07	0
e5d983a5-3037-48e5-a2d8-a24e287f5269	6fbb5af1-da5e-4a00-9276-a7ed6ed39c07	0
f5c2e08d-fe32-4161-bf41-c21e4823c1f9	ea0ea178-b18a-4487-a6dc-708a8305c21a	0
9e491377-f340-4983-b150-9c07a4e68286	ea0ea178-b18a-4487-a6dc-708a8305c21a	0
e5d983a5-3037-48e5-a2d8-a24e287f5269	ea0ea178-b18a-4487-a6dc-708a8305c21a	0
f5c2e08d-fe32-4161-bf41-c21e4823c1f9	4d255112-e4e3-4b60-a48a-68602235082a	0
9e491377-f340-4983-b150-9c07a4e68286	4d255112-e4e3-4b60-a48a-68602235082a	0
e5d983a5-3037-48e5-a2d8-a24e287f5269	4d255112-e4e3-4b60-a48a-68602235082a	0
f5c2e08d-fe32-4161-bf41-c21e4823c1f9	2c6816fd-d89d-411b-89de-8f7643b1211d	0
9e491377-f340-4983-b150-9c07a4e68286	2c6816fd-d89d-411b-89de-8f7643b1211d	0
e5d983a5-3037-48e5-a2d8-a24e287f5269	2c6816fd-d89d-411b-89de-8f7643b1211d	0
f5c2e08d-fe32-4161-bf41-c21e4823c1f9	e0830ae2-b97e-4e92-beb3-74134e461f2e	0
9e491377-f340-4983-b150-9c07a4e68286	e0830ae2-b97e-4e92-beb3-74134e461f2e	0
e5d983a5-3037-48e5-a2d8-a24e287f5269	e0830ae2-b97e-4e92-beb3-74134e461f2e	0
f5c2e08d-fe32-4161-bf41-c21e4823c1f9	a19a7f00-abe4-4420-bffd-52c2f86fef4a	0
9e491377-f340-4983-b150-9c07a4e68286	a19a7f00-abe4-4420-bffd-52c2f86fef4a	0
e5d983a5-3037-48e5-a2d8-a24e287f5269	a19a7f00-abe4-4420-bffd-52c2f86fef4a	0
f5c2e08d-fe32-4161-bf41-c21e4823c1f9	d5697ab3-770b-4cc4-b9c9-fd5b2310631b	0
9e491377-f340-4983-b150-9c07a4e68286	d5697ab3-770b-4cc4-b9c9-fd5b2310631b	0
e5d983a5-3037-48e5-a2d8-a24e287f5269	d5697ab3-770b-4cc4-b9c9-fd5b2310631b	0
f5c2e08d-fe32-4161-bf41-c21e4823c1f9	4a5654a1-98ff-407f-834b-828430bba523	0
9e491377-f340-4983-b150-9c07a4e68286	4a5654a1-98ff-407f-834b-828430bba523	0
e5d983a5-3037-48e5-a2d8-a24e287f5269	4a5654a1-98ff-407f-834b-828430bba523	0
f5c2e08d-fe32-4161-bf41-c21e4823c1f9	f766a501-ef24-4897-a5a6-9ee9333f5404	0
9e491377-f340-4983-b150-9c07a4e68286	f766a501-ef24-4897-a5a6-9ee9333f5404	0
e5d983a5-3037-48e5-a2d8-a24e287f5269	f766a501-ef24-4897-a5a6-9ee9333f5404	0
f5c2e08d-fe32-4161-bf41-c21e4823c1f9	01b63790-e215-4096-9d5f-c4c8fa56bea7	0
9e491377-f340-4983-b150-9c07a4e68286	01b63790-e215-4096-9d5f-c4c8fa56bea7	0
e5d983a5-3037-48e5-a2d8-a24e287f5269	01b63790-e215-4096-9d5f-c4c8fa56bea7	0
f5c2e08d-fe32-4161-bf41-c21e4823c1f9	5701af45-c50b-4df8-b3b1-48afa23379e6	0
9e491377-f340-4983-b150-9c07a4e68286	5701af45-c50b-4df8-b3b1-48afa23379e6	0
e5d983a5-3037-48e5-a2d8-a24e287f5269	5701af45-c50b-4df8-b3b1-48afa23379e6	0
9edb9be5-6e6c-44c7-9c62-5780f1d8d341	c42c14ab-0217-4814-bc59-d9267916e458	0
9e491377-f340-4983-b150-9c07a4e68286	c42c14ab-0217-4814-bc59-d9267916e458	0
e5d983a5-3037-48e5-a2d8-a24e287f5269	c42c14ab-0217-4814-bc59-d9267916e458	0
9edb9be5-6e6c-44c7-9c62-5780f1d8d341	f07328e1-261c-41e2-bbd0-4ba3632a605d	0
9e491377-f340-4983-b150-9c07a4e68286	f07328e1-261c-41e2-bbd0-4ba3632a605d	0
e5d983a5-3037-48e5-a2d8-a24e287f5269	f07328e1-261c-41e2-bbd0-4ba3632a605d	0
9edb9be5-6e6c-44c7-9c62-5780f1d8d341	70de8fd7-2fb3-4150-91c7-f425eff615b1	0
9e491377-f340-4983-b150-9c07a4e68286	70de8fd7-2fb3-4150-91c7-f425eff615b1	0
e5d983a5-3037-48e5-a2d8-a24e287f5269	70de8fd7-2fb3-4150-91c7-f425eff615b1	0
13c7b5c3-58f0-4dfd-9044-7cd7950eb566	19809b9b-074a-409a-a781-e3da647032f9	0
6a3cddbe-1bc5-43e3-8775-3b52d1d3aae6	19809b9b-074a-409a-a781-e3da647032f9	0
3fef84a3-229e-4caf-9e05-c8634346242d	19809b9b-074a-409a-a781-e3da647032f9	0
13c7b5c3-58f0-4dfd-9044-7cd7950eb566	1eb12ac6-fe21-4f7a-aef3-452dc79c7049	0
6a3cddbe-1bc5-43e3-8775-3b52d1d3aae6	1eb12ac6-fe21-4f7a-aef3-452dc79c7049	0
3fef84a3-229e-4caf-9e05-c8634346242d	1eb12ac6-fe21-4f7a-aef3-452dc79c7049	0
13c7b5c3-58f0-4dfd-9044-7cd7950eb566	c53f1924-09cf-4e27-9e4b-25d69d522d15	0
6a3cddbe-1bc5-43e3-8775-3b52d1d3aae6	c53f1924-09cf-4e27-9e4b-25d69d522d15	0
3fef84a3-229e-4caf-9e05-c8634346242d	c53f1924-09cf-4e27-9e4b-25d69d522d15	0
13c7b5c3-58f0-4dfd-9044-7cd7950eb566	a8909502-0b24-4db0-9bcc-9f712f046d82	0
6a3cddbe-1bc5-43e3-8775-3b52d1d3aae6	a8909502-0b24-4db0-9bcc-9f712f046d82	0
3fef84a3-229e-4caf-9e05-c8634346242d	a8909502-0b24-4db0-9bcc-9f712f046d82	0
13c7b5c3-58f0-4dfd-9044-7cd7950eb566	4355b399-97b7-4d86-8502-ada1c3023886	0
6a3cddbe-1bc5-43e3-8775-3b52d1d3aae6	4355b399-97b7-4d86-8502-ada1c3023886	0
3fef84a3-229e-4caf-9e05-c8634346242d	4355b399-97b7-4d86-8502-ada1c3023886	0
13c7b5c3-58f0-4dfd-9044-7cd7950eb566	774a527d-6943-433d-a662-8e3e51b2dd9d	0
6a3cddbe-1bc5-43e3-8775-3b52d1d3aae6	774a527d-6943-433d-a662-8e3e51b2dd9d	0
3fef84a3-229e-4caf-9e05-c8634346242d	774a527d-6943-433d-a662-8e3e51b2dd9d	0
13c7b5c3-58f0-4dfd-9044-7cd7950eb566	b58aaf97-b952-4b85-8a15-9f9269c9ef62	0
6a3cddbe-1bc5-43e3-8775-3b52d1d3aae6	b58aaf97-b952-4b85-8a15-9f9269c9ef62	0
3fef84a3-229e-4caf-9e05-c8634346242d	b58aaf97-b952-4b85-8a15-9f9269c9ef62	0
13c7b5c3-58f0-4dfd-9044-7cd7950eb566	2766a29c-a225-4932-8177-4c53a34e2295	0
6a3cddbe-1bc5-43e3-8775-3b52d1d3aae6	2766a29c-a225-4932-8177-4c53a34e2295	0
3fef84a3-229e-4caf-9e05-c8634346242d	2766a29c-a225-4932-8177-4c53a34e2295	0
13c7b5c3-58f0-4dfd-9044-7cd7950eb566	6176c01f-1011-4e90-bdf9-30e74e64e4ce	0
6a3cddbe-1bc5-43e3-8775-3b52d1d3aae6	6176c01f-1011-4e90-bdf9-30e74e64e4ce	0
3fef84a3-229e-4caf-9e05-c8634346242d	6176c01f-1011-4e90-bdf9-30e74e64e4ce	0
13c7b5c3-58f0-4dfd-9044-7cd7950eb566	c746aef5-1b5e-489e-8523-150c20e9bd17	0
6a3cddbe-1bc5-43e3-8775-3b52d1d3aae6	c746aef5-1b5e-489e-8523-150c20e9bd17	0
3fef84a3-229e-4caf-9e05-c8634346242d	c746aef5-1b5e-489e-8523-150c20e9bd17	0
13c7b5c3-58f0-4dfd-9044-7cd7950eb566	92845e68-b44d-4716-a1bb-c1918def2db6	0
6a3cddbe-1bc5-43e3-8775-3b52d1d3aae6	92845e68-b44d-4716-a1bb-c1918def2db6	0
3fef84a3-229e-4caf-9e05-c8634346242d	92845e68-b44d-4716-a1bb-c1918def2db6	0
dee61aea-0a86-48ee-94ae-3b83ee4dfaca	bb5c3b6c-ab71-4b95-9884-da8683064d08	0
23057c67-5739-45b8-98ad-20ecaad55f4f	bb5c3b6c-ab71-4b95-9884-da8683064d08	0
b8afb13e-8afb-450a-9c68-2ff9f1e7ca18	bb5c3b6c-ab71-4b95-9884-da8683064d08	0
dee61aea-0a86-48ee-94ae-3b83ee4dfaca	3fa41409-5c93-4ad6-9ebb-814892d5c8fa	0
23057c67-5739-45b8-98ad-20ecaad55f4f	3fa41409-5c93-4ad6-9ebb-814892d5c8fa	0
b8afb13e-8afb-450a-9c68-2ff9f1e7ca18	3fa41409-5c93-4ad6-9ebb-814892d5c8fa	0
dee61aea-0a86-48ee-94ae-3b83ee4dfaca	6259903a-76a8-4aee-9ea4-6522abd6a04c	0
23057c67-5739-45b8-98ad-20ecaad55f4f	6259903a-76a8-4aee-9ea4-6522abd6a04c	0
b8afb13e-8afb-450a-9c68-2ff9f1e7ca18	6259903a-76a8-4aee-9ea4-6522abd6a04c	0
6a014a0d-57a9-4605-8ca1-81096a7c9919	a50850a1-6521-45c7-ad7f-814107e303fa	0
cd19bee8-25f8-4ae1-a0a5-d1e64074b898	a50850a1-6521-45c7-ad7f-814107e303fa	0
e05ae9ae-4d2d-4f3e-b489-e6eb64631ec0	a50850a1-6521-45c7-ad7f-814107e303fa	0
\.


--
-- Data for Name: song; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.song (id_konten, id_artist, id_album, total_play, total_download) FROM stdin;
e97adb7e-271a-4aa6-af93-ddbc6b3ae218	d6500923-008f-408d-9bdf-048af7be8d35	11c7081d-dbe0-4f3d-aca9-451524224f2a	0	0
ceedd7d5-8c2f-4dd1-b6a6-054e9a274909	d6500923-008f-408d-9bdf-048af7be8d35	11c7081d-dbe0-4f3d-aca9-451524224f2a	0	0
14137944-a473-4f1b-a441-4bbe1eb0b4be	7aa5ed78-cd20-47ce-be01-99c17fc7d07c	d9bba892-603f-40e3-b7d3-29f38a74058d	0	0
a2938f11-9c87-465f-b299-eac3ff627695	7aa5ed78-cd20-47ce-be01-99c17fc7d07c	d9bba892-603f-40e3-b7d3-29f38a74058d	0	0
d62f77ad-38c4-48d1-9a54-024ee773de21	7aa5ed78-cd20-47ce-be01-99c17fc7d07c	876bc904-c991-4034-adf4-591d86aaee17	0	0
9687bae6-3a21-4af5-a453-cdb4a6d2e7e0	7aa5ed78-cd20-47ce-be01-99c17fc7d07c	f445e416-86b9-4402-ad22-b8f2efb238a0	0	0
b6340170-6bcd-42bf-92aa-de907d830e2d	7aa5ed78-cd20-47ce-be01-99c17fc7d07c	f445e416-86b9-4402-ad22-b8f2efb238a0	0	0
4b66b805-664b-4e89-b56a-3277052b0e42	7aa5ed78-cd20-47ce-be01-99c17fc7d07c	f445e416-86b9-4402-ad22-b8f2efb238a0	0	0
6fbb5af1-da5e-4a00-9276-a7ed6ed39c07	8dcc7029-81c9-4e4a-866a-0cb50876ddb7	9376c86b-c1e7-4d95-8e6f-af947f048da3	0	0
3b7afdd7-5ce2-415d-8c03-caad1b4fd847	7aa5ed78-cd20-47ce-be01-99c17fc7d07c	4ac7a352-1f98-4a42-903d-e0172825c848	0	0
252fbe7e-747f-4e2f-8f6c-e56d853f58df	7aa5ed78-cd20-47ce-be01-99c17fc7d07c	7e15696e-8ccf-42b9-a90c-2c0c3d2c7ac1	0	0
3bfc017e-f8bd-4644-afb5-cac66ceb94d4	7aa5ed78-cd20-47ce-be01-99c17fc7d07c	3b8d6e1b-0e5a-45d7-b350-f2441acc974c	0	0
478e829f-fbbb-41b0-a491-25ff7e3761e6	7aa5ed78-cd20-47ce-be01-99c17fc7d07c	0f0827e3-6a0a-4dd9-868c-414f0f8c2274	0	0
aa344736-46cd-43e0-8c2b-880b4d5d150f	7aa5ed78-cd20-47ce-be01-99c17fc7d07c	0f0827e3-6a0a-4dd9-868c-414f0f8c2274	0	0
133db2cb-d993-49d1-bfdf-471fcc30b70d	7aa5ed78-cd20-47ce-be01-99c17fc7d07c	f445e416-86b9-4402-ad22-b8f2efb238a0	0	0
198a2a74-2206-488c-a1e6-df5e30e495a6	8189b2d8-3607-4052-b28c-de06f742c9f7	f2eed0b4-1723-46b0-b83e-9a73b24f25ef	0	0
5c008091-a050-4a33-b63f-baa31b6c8d6b	a57d46e5-a621-4585-b214-0f1d82b62813	ffe3c0da-602b-4c10-9c79-615dbdfd9f15	0	0
eb650df0-77a4-4bda-aa07-12fb4e8ff13c	26881b70-ec1f-43ff-b16c-79475530345a	ac57c1a2-17f8-4228-a300-d391ada9d290	0	0
88eb17e4-32c5-49ca-a7b4-7ee7a3b6345f	8589aeaf-53cf-4259-8e5b-1683789c02b4	e948dc22-64b3-495d-b441-07c8f0fc514a	0	0
e6d1c5a4-f79e-441f-a736-00a87ba657cb	8589aeaf-53cf-4259-8e5b-1683789c02b4	e948dc22-64b3-495d-b441-07c8f0fc514a	0	0
c71ce89e-5d46-4c85-a9a8-955971068a79	58a936de-7189-4f9c-bc95-70a381ade7c1	c753c098-2058-407e-b193-1d63b8bfbad6	0	0
74e5f497-484d-4903-bcd2-f38b790e65a9	58a936de-7189-4f9c-bc95-70a381ade7c1	81c5cae3-7211-444a-a737-b954839beacb	0	0
1f37728a-9007-44f7-af39-8d6f06fd5a4b	46a40c58-19f0-43ef-8c38-f58af76b837b	ffc9f9c9-89c3-4a8c-a3b5-91f327569552	0	0
a622e217-6cbd-4cba-9feb-08ffe18037d2	46a40c58-19f0-43ef-8c38-f58af76b837b	0200872d-aac2-448b-8d6c-82e53cc3e14b	0	0
69f19f17-11a8-4789-b7ba-ecf4eb15507a	a183015c-d7ef-43b3-8a6f-8b9f3ed14611	378dd61f-c8cc-46ee-9c2a-698553b1262e	0	0
e9c49129-c3e1-478e-a3be-800db97bcc58	a183015c-d7ef-43b3-8a6f-8b9f3ed14611	22b707c2-b408-4e41-9d5d-10e2513174f2	0	0
cf7d9805-e109-4051-b3f0-bf3e99c8a8f3	a183015c-d7ef-43b3-8a6f-8b9f3ed14611	4e3b12b5-a23f-45bd-a0ce-a70b3290e897	0	0
7e0cde78-d278-4f2c-b5c2-1b9007c8f5b0	a183015c-d7ef-43b3-8a6f-8b9f3ed14611	378dd61f-c8cc-46ee-9c2a-698553b1262e	0	0
9028d889-63b8-4593-9a59-0dc835b4dd38	a183015c-d7ef-43b3-8a6f-8b9f3ed14611	b9b77e92-628d-488f-800f-6a7b1bf9a649	0	0
60f388ed-75a0-401f-8302-d9b1499e2186	a183015c-d7ef-43b3-8a6f-8b9f3ed14611	50dbd6ab-87c4-45cc-9f07-a40dbd173178	0	0
6200040f-aa24-4c3f-a4e5-8db3b4b9e5fb	a183015c-d7ef-43b3-8a6f-8b9f3ed14611	8bc5aa26-6350-4ee7-8b64-3c194b990cfe	0	0
ea0ea178-b18a-4487-a6dc-708a8305c21a	8dcc7029-81c9-4e4a-866a-0cb50876ddb7	a2b28fdb-b308-4fde-87ed-e4f4f041bc90	0	0
4d255112-e4e3-4b60-a48a-68602235082a	8dcc7029-81c9-4e4a-866a-0cb50876ddb7	a2b28fdb-b308-4fde-87ed-e4f4f041bc90	0	0
c01100f9-9ad7-4e7f-b266-9e2e11cecb40	a183015c-d7ef-43b3-8a6f-8b9f3ed14611	97085362-2d53-4739-ab5b-b00d6dc2ef8b	0	0
e874eddd-a1b8-49f3-96e2-2a8987c6b4e0	a183015c-d7ef-43b3-8a6f-8b9f3ed14611	ee684345-aa41-4b93-b80f-5dd9ad5ef7e8	0	0
31ccc3d1-aff5-4841-b0ea-babb0bc1194d	c0ff04db-37cb-43a0-8bd9-05ecf1e56360	e371f5d1-fc92-4216-87dc-c20fbc0f68ba	0	0
8dd0502b-c5f3-4264-9e1f-147a05fba84f	c0ff04db-37cb-43a0-8bd9-05ecf1e56360	573eae56-f4ee-41bf-829e-71daefe41627	0	0
384429c1-f48a-4485-98bc-41a94b0512fe	c0ff04db-37cb-43a0-8bd9-05ecf1e56360	6b6f6853-dc1d-4ab3-9083-d157acaadd90	0	0
d16d781c-0c0d-4ea3-872b-4377bcb9218d	c0ff04db-37cb-43a0-8bd9-05ecf1e56360	e8a1efb5-e531-4b36-8ca0-8887611a84cb	0	0
4bf0f3ae-320c-40d1-a3a5-0a0f6b5d4ea8	c0ff04db-37cb-43a0-8bd9-05ecf1e56360	e8a1efb5-e531-4b36-8ca0-8887611a84cb	0	0
f248dd11-7018-4e82-9dd7-70d12466527d	c0ff04db-37cb-43a0-8bd9-05ecf1e56360	77e54434-7506-4843-a3d0-3b5e7a7f6186	0	0
62f04e76-e8e5-40fd-89dd-95d4202469aa	c0ff04db-37cb-43a0-8bd9-05ecf1e56360	2c2e25ea-a59e-4182-a4b7-ca87a01834c8	0	0
e8bc0fc5-ebc5-4813-9b5a-9eca062b84ca	c0ff04db-37cb-43a0-8bd9-05ecf1e56360	6464f52c-9553-4279-9832-0713203d0453	0	0
56987fc2-2364-41de-9447-49d15ba6b9b6	c0ff04db-37cb-43a0-8bd9-05ecf1e56360	ae5f142c-0dda-4cfd-a788-8e2dd013f8d1	0	0
5bb9bb8c-3bd5-4567-aa5d-94780d9f0332	c0ff04db-37cb-43a0-8bd9-05ecf1e56360	573eae56-f4ee-41bf-829e-71daefe41627	0	0
57f18b8b-353b-4014-8140-d336f05712e8	c0ff04db-37cb-43a0-8bd9-05ecf1e56360	573eae56-f4ee-41bf-829e-71daefe41627	0	0
6da36a98-029e-45af-97a3-cfb973cf5935	fe1b72b7-bf41-429f-ba1b-49af6b2a589c	6f52f147-a5b3-48d9-be34-d3e3e9efee7e	0	0
45889e75-921f-4b34-a1bf-a9a98c34562b	fe1b72b7-bf41-429f-ba1b-49af6b2a589c	75ebd469-9473-466d-b7ee-1f5ff44cb99e	0	0
7a9d0c6f-ea43-48c4-815d-0863319b5e86	fe1b72b7-bf41-429f-ba1b-49af6b2a589c	47a30079-fa0d-47cf-8869-1d9c886becfc	0	0
7504353d-f2e8-4cea-9eb1-6bc7a5771688	fe1b72b7-bf41-429f-ba1b-49af6b2a589c	f60e137a-68fe-4fc7-ac7a-580068c4b220	0	0
d1fa443d-65e9-4760-9e81-78370e778637	fe1b72b7-bf41-429f-ba1b-49af6b2a589c	3775c22a-f90d-4259-8796-9636c7008e77	0	0
0a7c42ad-1d4b-4e2d-8e39-35c0051566a6	fe1b72b7-bf41-429f-ba1b-49af6b2a589c	18836698-fa5f-4d3e-ae8a-8cd0ea7ec85b	0	0
3ec5fb74-c25c-4466-8cca-f16233ec0ad5	7aa78e54-d913-47de-9316-6da9654a7b13	19022b4d-5f25-4757-b426-2ddada9e3cfb	0	0
49477680-f6bb-4deb-b8bd-3e0c9aaf7c69	7aa78e54-d913-47de-9316-6da9654a7b13	92d56ae0-1711-4432-98a4-bbe55c51e7ac	0	0
b16de06d-40ce-4390-aa46-9479fead37b1	7aa78e54-d913-47de-9316-6da9654a7b13	f40336f2-c01f-42ad-994c-b1f7d58311f3	0	0
5c1235fd-dd6c-47dc-982f-26a295220f86	7aa78e54-d913-47de-9316-6da9654a7b13	76f230c2-f664-4d90-9f85-07092fdc5d6d	0	0
094156dd-ee47-4545-a832-8ad75f0916f0	7aa78e54-d913-47de-9316-6da9654a7b13	c31276e5-8c95-438d-9b14-69aac7111d58	0	0
7e31b8c9-3c0b-4dba-9b5b-3718306786ee	7aa78e54-d913-47de-9316-6da9654a7b13	c31276e5-8c95-438d-9b14-69aac7111d58	0	0
faf63f1c-3c29-4d16-9121-4000f5262ce1	43f227bd-41b5-4252-8b62-88c5d032ab60	362dfbf5-4b4a-4f2c-b263-f378dab90f63	0	0
223708a6-26bd-493e-835d-71a4036cebba	43f227bd-41b5-4252-8b62-88c5d032ab60	941f5652-0731-4456-b26e-4bf05c1ff1a2	0	0
e93128ba-36f0-4b30-8c90-af7d8b18590c	43f227bd-41b5-4252-8b62-88c5d032ab60	5197a072-baa2-48db-88f2-e150c7c94ced	0	0
cff71123-0705-4e43-be0c-373bb757253e	bd34df7e-f9cf-4c7d-b4c5-78173c8cc5f1	c6bcc800-527c-46a8-b113-4503cc97c3be	0	0
2506ea7b-4eb8-4fb5-a679-933167bb97fc	bd34df7e-f9cf-4c7d-b4c5-78173c8cc5f1	b062bc38-e821-4803-8e91-e4b18e46a868	0	0
9a54301b-1035-43b1-9c87-c39be28c56bf	bd34df7e-f9cf-4c7d-b4c5-78173c8cc5f1	30d667ed-ccce-42a2-b25d-4414e58f37ae	0	0
a1d01722-5fb4-43f0-8168-ee598c56fde4	bd34df7e-f9cf-4c7d-b4c5-78173c8cc5f1	2c02b70e-1bb6-4231-8784-9b1eebb327ca	0	0
5d4a5674-e0b3-4359-817f-d54a84abef4d	bd34df7e-f9cf-4c7d-b4c5-78173c8cc5f1	3a2cf6c6-7028-40a2-8033-0afad2aefadb	0	0
a4a9dc0b-0828-4a4f-ba35-7d1306831883	bd34df7e-f9cf-4c7d-b4c5-78173c8cc5f1	a45c7d37-6baf-41d6-8e3b-a2f4d5f04f11	0	0
2dfcc81f-36ce-4042-a5f6-5d7fc35f883a	8dcc7029-81c9-4e4a-866a-0cb50876ddb7	18494fa6-caa8-4e79-80a3-f13879e17cc5	0	0
49798bac-b9c3-43b8-89d3-8eebc3dbbee2	8dcc7029-81c9-4e4a-866a-0cb50876ddb7	18494fa6-caa8-4e79-80a3-f13879e17cc5	0	0
995a0ca5-2f0a-4e04-a6a7-fc8ec0e6d4a4	8dcc7029-81c9-4e4a-866a-0cb50876ddb7	6f843399-612f-4181-9ded-f1f3cc5d4936	0	0
2c6816fd-d89d-411b-89de-8f7643b1211d	8dcc7029-81c9-4e4a-866a-0cb50876ddb7	85c13bc6-aae6-48e0-9149-70fa48ca4a8b	0	0
e0830ae2-b97e-4e92-beb3-74134e461f2e	8dcc7029-81c9-4e4a-866a-0cb50876ddb7	3876f18f-2bef-431d-9cba-13da56a0eeee	0	0
a19a7f00-abe4-4420-bffd-52c2f86fef4a	8dcc7029-81c9-4e4a-866a-0cb50876ddb7	4dd64cb2-9339-450b-8d55-d00cafebad0c	0	0
d5697ab3-770b-4cc4-b9c9-fd5b2310631b	8dcc7029-81c9-4e4a-866a-0cb50876ddb7	8bb46478-2f20-4444-9458-1335fd610110	0	0
4a5654a1-98ff-407f-834b-828430bba523	8dcc7029-81c9-4e4a-866a-0cb50876ddb7	8d290c1f-6618-45f6-b78b-736aeb9f5724	0	0
f766a501-ef24-4897-a5a6-9ee9333f5404	8dcc7029-81c9-4e4a-866a-0cb50876ddb7	4c2b470e-60c1-491e-a48f-53c5ae878de3	0	0
01b63790-e215-4096-9d5f-c4c8fa56bea7	8dcc7029-81c9-4e4a-866a-0cb50876ddb7	4c2b470e-60c1-491e-a48f-53c5ae878de3	0	0
5701af45-c50b-4df8-b3b1-48afa23379e6	8dcc7029-81c9-4e4a-866a-0cb50876ddb7	3287fabe-eb67-4ecf-a042-c5e306b3d045	0	0
c42c14ab-0217-4814-bc59-d9267916e458	613263d6-10a0-459e-9d6f-16745edc623b	0ce4e6a4-283d-4948-bfb2-997c80ccbf2d	0	0
f07328e1-261c-41e2-bbd0-4ba3632a605d	613263d6-10a0-459e-9d6f-16745edc623b	00bba711-30cb-4c21-88a6-e8241cf58416	0	0
70de8fd7-2fb3-4150-91c7-f425eff615b1	613263d6-10a0-459e-9d6f-16745edc623b	fb12a1a2-0d36-4903-9d10-2d857c3afb64	0	0
19809b9b-074a-409a-a781-e3da647032f9	6a24ffc6-ca8d-4ffb-bb07-9856795a341b	3f95b0df-94d3-4dd2-bfda-e9f1b97982fd	0	0
1eb12ac6-fe21-4f7a-aef3-452dc79c7049	6a24ffc6-ca8d-4ffb-bb07-9856795a341b	39396aa4-c09c-4ba8-b40c-948d8e12656a	0	0
c53f1924-09cf-4e27-9e4b-25d69d522d15	6a24ffc6-ca8d-4ffb-bb07-9856795a341b	7c6c7135-6f22-479d-80f5-4ceb20c1482f	0	0
a8909502-0b24-4db0-9bcc-9f712f046d82	6a24ffc6-ca8d-4ffb-bb07-9856795a341b	7c6c7135-6f22-479d-80f5-4ceb20c1482f	0	0
4355b399-97b7-4d86-8502-ada1c3023886	6a24ffc6-ca8d-4ffb-bb07-9856795a341b	08fae816-d41d-46da-8968-700e2649973b	0	0
774a527d-6943-433d-a662-8e3e51b2dd9d	6a24ffc6-ca8d-4ffb-bb07-9856795a341b	afae4468-8844-4d5c-90c1-2ade93383400	0	0
b58aaf97-b952-4b85-8a15-9f9269c9ef62	6a24ffc6-ca8d-4ffb-bb07-9856795a341b	6d34db02-715f-46aa-ac69-14846d8fb03a	0	0
2766a29c-a225-4932-8177-4c53a34e2295	6a24ffc6-ca8d-4ffb-bb07-9856795a341b	6d34db02-715f-46aa-ac69-14846d8fb03a	0	0
6176c01f-1011-4e90-bdf9-30e74e64e4ce	6a24ffc6-ca8d-4ffb-bb07-9856795a341b	afae4468-8844-4d5c-90c1-2ade93383400	0	0
c746aef5-1b5e-489e-8523-150c20e9bd17	6a24ffc6-ca8d-4ffb-bb07-9856795a341b	d6af27f6-66ad-4370-af78-cb5f8dc1534b	0	0
92845e68-b44d-4716-a1bb-c1918def2db6	6a24ffc6-ca8d-4ffb-bb07-9856795a341b	0186629f-a665-4455-b089-e036fb29b976	0	0
bb5c3b6c-ab71-4b95-9884-da8683064d08	89bcb69b-3dd7-4d79-b494-e8502ea6c979	cc4634af-0a40-4235-a005-96d55eef05a2	0	0
3fa41409-5c93-4ad6-9ebb-814892d5c8fa	89bcb69b-3dd7-4d79-b494-e8502ea6c979	cc4634af-0a40-4235-a005-96d55eef05a2	0	0
6259903a-76a8-4aee-9ea4-6522abd6a04c	89bcb69b-3dd7-4d79-b494-e8502ea6c979	129a82bb-225d-4cf8-9b99-932c8fde57f5	0	0
a50850a1-6521-45c7-ad7f-814107e303fa	c0ff04db-37cb-43a0-8bd9-05ecf1e56360	b0143b86-471a-4edf-aecd-8b7fb9712132	0	0
\.


--
-- Data for Name: songwriter; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.songwriter (id, email_akun, id_pemilik_hak_cipta) FROM stdin;
176e5d0d-6258-461b-8182-e4b06028e2da	akmu@company.yg	7888c152-a1ad-4d2d-81b3-473db420a49a
ec694fe7-2bf3-4ee4-aade-3bdac50689a7	jenniekim@mail.com	78463091-6cdd-45cc-b466-41191df66009
66425124-462c-4fa4-b9d5-2e6d3a07848e	lisa@mail.com	f252675b-df04-4b1e-91c9-a91d7d84b3b9
92886320-7854-4809-97ba-61dc46b0a73e	rose@mail.com	c04b423c-6a8e-46ae-84e2-d8c2c8b2e1bb
8d7a1bf2-c897-4f04-af7d-7eb7abc52f5e	jisoo@mail.com	74dd2972-1b53-4ff6-b1bf-cf89c0079660
15b49d2d-a60a-45e8-8823-5a956cae02b1	junk@mail.com	c04f5957-c758-43ac-aa53-037d56d7e0da
43f61be3-727e-4968-9fcf-9c4c56ec537a	jisanghong@mail.com	5fd4b3c7-7f04-424d-be9e-126a5e20529d
ccfce5f4-6247-4b7b-9bf3-6513a3606c3b	leesooman@mail.com	cd19bee8-25f8-4ae1-a0a5-d1e64074b898
871dded7-d6f1-4a91-a548-cf2fda7169f7	taeyeon@mail.com	e46dc1de-d25e-4920-a778-ef58cc365a15
70289dc5-df33-42d3-9cb3-559560c7ed26	bangsihyuk@mail.com	9e491377-f340-4983-b150-9c07a4e68286
aa642cc8-e7cd-40d4-a185-9acca6b3503b	taylorswift@mail.com	6a3cddbe-1bc5-43e3-8775-3b52d1d3aae6
9cd24079-963a-4fbb-8773-475627ccc21c	niki@mail.com	23057c67-5739-45b8-98ad-20ecaad55f4f
434183ae-bd71-4f4a-bc82-1bc67cb91b37	marmut@company.id	bad99c02-e4da-45e4-880c-9572cae80980
3d4b1fcb-fb79-4cf4-9372-384e474ad9c8	adit@mail.com	e5f64c40-7d03-4385-becf-0ce90a53eefc
\.


--
-- Data for Name: songwriter_write_song; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.songwriter_write_song (id_songwriter, id_song) FROM stdin;
176e5d0d-6258-461b-8182-e4b06028e2da	e97adb7e-271a-4aa6-af93-ddbc6b3ae218
176e5d0d-6258-461b-8182-e4b06028e2da	ceedd7d5-8c2f-4dd1-b6a6-054e9a274909
ec694fe7-2bf3-4ee4-aade-3bdac50689a7	14137944-a473-4f1b-a441-4bbe1eb0b4be
66425124-462c-4fa4-b9d5-2e6d3a07848e	14137944-a473-4f1b-a441-4bbe1eb0b4be
92886320-7854-4809-97ba-61dc46b0a73e	14137944-a473-4f1b-a441-4bbe1eb0b4be
8d7a1bf2-c897-4f04-af7d-7eb7abc52f5e	14137944-a473-4f1b-a441-4bbe1eb0b4be
ec694fe7-2bf3-4ee4-aade-3bdac50689a7	a2938f11-9c87-465f-b299-eac3ff627695
66425124-462c-4fa4-b9d5-2e6d3a07848e	a2938f11-9c87-465f-b299-eac3ff627695
92886320-7854-4809-97ba-61dc46b0a73e	a2938f11-9c87-465f-b299-eac3ff627695
8d7a1bf2-c897-4f04-af7d-7eb7abc52f5e	a2938f11-9c87-465f-b299-eac3ff627695
ec694fe7-2bf3-4ee4-aade-3bdac50689a7	d62f77ad-38c4-48d1-9a54-024ee773de21
66425124-462c-4fa4-b9d5-2e6d3a07848e	d62f77ad-38c4-48d1-9a54-024ee773de21
92886320-7854-4809-97ba-61dc46b0a73e	d62f77ad-38c4-48d1-9a54-024ee773de21
8d7a1bf2-c897-4f04-af7d-7eb7abc52f5e	d62f77ad-38c4-48d1-9a54-024ee773de21
ec694fe7-2bf3-4ee4-aade-3bdac50689a7	9687bae6-3a21-4af5-a453-cdb4a6d2e7e0
66425124-462c-4fa4-b9d5-2e6d3a07848e	9687bae6-3a21-4af5-a453-cdb4a6d2e7e0
92886320-7854-4809-97ba-61dc46b0a73e	9687bae6-3a21-4af5-a453-cdb4a6d2e7e0
8d7a1bf2-c897-4f04-af7d-7eb7abc52f5e	9687bae6-3a21-4af5-a453-cdb4a6d2e7e0
ec694fe7-2bf3-4ee4-aade-3bdac50689a7	b6340170-6bcd-42bf-92aa-de907d830e2d
66425124-462c-4fa4-b9d5-2e6d3a07848e	b6340170-6bcd-42bf-92aa-de907d830e2d
92886320-7854-4809-97ba-61dc46b0a73e	b6340170-6bcd-42bf-92aa-de907d830e2d
8d7a1bf2-c897-4f04-af7d-7eb7abc52f5e	b6340170-6bcd-42bf-92aa-de907d830e2d
ec694fe7-2bf3-4ee4-aade-3bdac50689a7	4b66b805-664b-4e89-b56a-3277052b0e42
66425124-462c-4fa4-b9d5-2e6d3a07848e	4b66b805-664b-4e89-b56a-3277052b0e42
92886320-7854-4809-97ba-61dc46b0a73e	4b66b805-664b-4e89-b56a-3277052b0e42
8d7a1bf2-c897-4f04-af7d-7eb7abc52f5e	4b66b805-664b-4e89-b56a-3277052b0e42
ec694fe7-2bf3-4ee4-aade-3bdac50689a7	3b7afdd7-5ce2-415d-8c03-caad1b4fd847
66425124-462c-4fa4-b9d5-2e6d3a07848e	3b7afdd7-5ce2-415d-8c03-caad1b4fd847
92886320-7854-4809-97ba-61dc46b0a73e	3b7afdd7-5ce2-415d-8c03-caad1b4fd847
8d7a1bf2-c897-4f04-af7d-7eb7abc52f5e	3b7afdd7-5ce2-415d-8c03-caad1b4fd847
ec694fe7-2bf3-4ee4-aade-3bdac50689a7	252fbe7e-747f-4e2f-8f6c-e56d853f58df
66425124-462c-4fa4-b9d5-2e6d3a07848e	252fbe7e-747f-4e2f-8f6c-e56d853f58df
92886320-7854-4809-97ba-61dc46b0a73e	252fbe7e-747f-4e2f-8f6c-e56d853f58df
8d7a1bf2-c897-4f04-af7d-7eb7abc52f5e	252fbe7e-747f-4e2f-8f6c-e56d853f58df
ec694fe7-2bf3-4ee4-aade-3bdac50689a7	3bfc017e-f8bd-4644-afb5-cac66ceb94d4
66425124-462c-4fa4-b9d5-2e6d3a07848e	3bfc017e-f8bd-4644-afb5-cac66ceb94d4
92886320-7854-4809-97ba-61dc46b0a73e	3bfc017e-f8bd-4644-afb5-cac66ceb94d4
8d7a1bf2-c897-4f04-af7d-7eb7abc52f5e	3bfc017e-f8bd-4644-afb5-cac66ceb94d4
ec694fe7-2bf3-4ee4-aade-3bdac50689a7	478e829f-fbbb-41b0-a491-25ff7e3761e6
66425124-462c-4fa4-b9d5-2e6d3a07848e	478e829f-fbbb-41b0-a491-25ff7e3761e6
92886320-7854-4809-97ba-61dc46b0a73e	478e829f-fbbb-41b0-a491-25ff7e3761e6
8d7a1bf2-c897-4f04-af7d-7eb7abc52f5e	478e829f-fbbb-41b0-a491-25ff7e3761e6
ec694fe7-2bf3-4ee4-aade-3bdac50689a7	aa344736-46cd-43e0-8c2b-880b4d5d150f
66425124-462c-4fa4-b9d5-2e6d3a07848e	aa344736-46cd-43e0-8c2b-880b4d5d150f
92886320-7854-4809-97ba-61dc46b0a73e	aa344736-46cd-43e0-8c2b-880b4d5d150f
8d7a1bf2-c897-4f04-af7d-7eb7abc52f5e	aa344736-46cd-43e0-8c2b-880b4d5d150f
ec694fe7-2bf3-4ee4-aade-3bdac50689a7	133db2cb-d993-49d1-bfdf-471fcc30b70d
66425124-462c-4fa4-b9d5-2e6d3a07848e	133db2cb-d993-49d1-bfdf-471fcc30b70d
92886320-7854-4809-97ba-61dc46b0a73e	133db2cb-d993-49d1-bfdf-471fcc30b70d
8d7a1bf2-c897-4f04-af7d-7eb7abc52f5e	133db2cb-d993-49d1-bfdf-471fcc30b70d
8d7a1bf2-c897-4f04-af7d-7eb7abc52f5e	198a2a74-2206-488c-a1e6-df5e30e495a6
ec694fe7-2bf3-4ee4-aade-3bdac50689a7	5c008091-a050-4a33-b63f-baa31b6c8d6b
92886320-7854-4809-97ba-61dc46b0a73e	eb650df0-77a4-4bda-aa07-12fb4e8ff13c
66425124-462c-4fa4-b9d5-2e6d3a07848e	88eb17e4-32c5-49ca-a7b4-7ee7a3b6345f
66425124-462c-4fa4-b9d5-2e6d3a07848e	e6d1c5a4-f79e-441f-a736-00a87ba657cb
15b49d2d-a60a-45e8-8823-5a956cae02b1	c71ce89e-5d46-4c85-a9a8-955971068a79
15b49d2d-a60a-45e8-8823-5a956cae02b1	74e5f497-484d-4903-bcd2-f38b790e65a9
43f61be3-727e-4968-9fcf-9c4c56ec537a	1f37728a-9007-44f7-af39-8d6f06fd5a4b
43f61be3-727e-4968-9fcf-9c4c56ec537a	a622e217-6cbd-4cba-9feb-08ffe18037d2
15b49d2d-a60a-45e8-8823-5a956cae02b1	69f19f17-11a8-4789-b7ba-ecf4eb15507a
43f61be3-727e-4968-9fcf-9c4c56ec537a	69f19f17-11a8-4789-b7ba-ecf4eb15507a
15b49d2d-a60a-45e8-8823-5a956cae02b1	e9c49129-c3e1-478e-a3be-800db97bcc58
43f61be3-727e-4968-9fcf-9c4c56ec537a	e9c49129-c3e1-478e-a3be-800db97bcc58
15b49d2d-a60a-45e8-8823-5a956cae02b1	cf7d9805-e109-4051-b3f0-bf3e99c8a8f3
43f61be3-727e-4968-9fcf-9c4c56ec537a	cf7d9805-e109-4051-b3f0-bf3e99c8a8f3
43f61be3-727e-4968-9fcf-9c4c56ec537a	7e0cde78-d278-4f2c-b5c2-1b9007c8f5b0
15b49d2d-a60a-45e8-8823-5a956cae02b1	9028d889-63b8-4593-9a59-0dc835b4dd38
43f61be3-727e-4968-9fcf-9c4c56ec537a	9028d889-63b8-4593-9a59-0dc835b4dd38
43f61be3-727e-4968-9fcf-9c4c56ec537a	60f388ed-75a0-401f-8302-d9b1499e2186
15b49d2d-a60a-45e8-8823-5a956cae02b1	6200040f-aa24-4c3f-a4e5-8db3b4b9e5fb
43f61be3-727e-4968-9fcf-9c4c56ec537a	6200040f-aa24-4c3f-a4e5-8db3b4b9e5fb
15b49d2d-a60a-45e8-8823-5a956cae02b1	c01100f9-9ad7-4e7f-b266-9e2e11cecb40
15b49d2d-a60a-45e8-8823-5a956cae02b1	e874eddd-a1b8-49f3-96e2-2a8987c6b4e0
43f61be3-727e-4968-9fcf-9c4c56ec537a	e874eddd-a1b8-49f3-96e2-2a8987c6b4e0
ccfce5f4-6247-4b7b-9bf3-6513a3606c3b	31ccc3d1-aff5-4841-b0ea-babb0bc1194d
ccfce5f4-6247-4b7b-9bf3-6513a3606c3b	8dd0502b-c5f3-4264-9e1f-147a05fba84f
ccfce5f4-6247-4b7b-9bf3-6513a3606c3b	384429c1-f48a-4485-98bc-41a94b0512fe
ccfce5f4-6247-4b7b-9bf3-6513a3606c3b	d16d781c-0c0d-4ea3-872b-4377bcb9218d
ccfce5f4-6247-4b7b-9bf3-6513a3606c3b	4bf0f3ae-320c-40d1-a3a5-0a0f6b5d4ea8
ccfce5f4-6247-4b7b-9bf3-6513a3606c3b	f248dd11-7018-4e82-9dd7-70d12466527d
ccfce5f4-6247-4b7b-9bf3-6513a3606c3b	62f04e76-e8e5-40fd-89dd-95d4202469aa
ccfce5f4-6247-4b7b-9bf3-6513a3606c3b	e8bc0fc5-ebc5-4813-9b5a-9eca062b84ca
ccfce5f4-6247-4b7b-9bf3-6513a3606c3b	56987fc2-2364-41de-9447-49d15ba6b9b6
ccfce5f4-6247-4b7b-9bf3-6513a3606c3b	5bb9bb8c-3bd5-4567-aa5d-94780d9f0332
ccfce5f4-6247-4b7b-9bf3-6513a3606c3b	57f18b8b-353b-4014-8140-d336f05712e8
ccfce5f4-6247-4b7b-9bf3-6513a3606c3b	6da36a98-029e-45af-97a3-cfb973cf5935
ccfce5f4-6247-4b7b-9bf3-6513a3606c3b	45889e75-921f-4b34-a1bf-a9a98c34562b
ccfce5f4-6247-4b7b-9bf3-6513a3606c3b	7a9d0c6f-ea43-48c4-815d-0863319b5e86
ccfce5f4-6247-4b7b-9bf3-6513a3606c3b	7504353d-f2e8-4cea-9eb1-6bc7a5771688
ccfce5f4-6247-4b7b-9bf3-6513a3606c3b	d1fa443d-65e9-4760-9e81-78370e778637
ccfce5f4-6247-4b7b-9bf3-6513a3606c3b	0a7c42ad-1d4b-4e2d-8e39-35c0051566a6
ccfce5f4-6247-4b7b-9bf3-6513a3606c3b	3ec5fb74-c25c-4466-8cca-f16233ec0ad5
ccfce5f4-6247-4b7b-9bf3-6513a3606c3b	49477680-f6bb-4deb-b8bd-3e0c9aaf7c69
ccfce5f4-6247-4b7b-9bf3-6513a3606c3b	b16de06d-40ce-4390-aa46-9479fead37b1
ccfce5f4-6247-4b7b-9bf3-6513a3606c3b	5c1235fd-dd6c-47dc-982f-26a295220f86
ccfce5f4-6247-4b7b-9bf3-6513a3606c3b	094156dd-ee47-4545-a832-8ad75f0916f0
ccfce5f4-6247-4b7b-9bf3-6513a3606c3b	7e31b8c9-3c0b-4dba-9b5b-3718306786ee
ccfce5f4-6247-4b7b-9bf3-6513a3606c3b	faf63f1c-3c29-4d16-9121-4000f5262ce1
ccfce5f4-6247-4b7b-9bf3-6513a3606c3b	223708a6-26bd-493e-835d-71a4036cebba
871dded7-d6f1-4a91-a548-cf2fda7169f7	223708a6-26bd-493e-835d-71a4036cebba
ccfce5f4-6247-4b7b-9bf3-6513a3606c3b	e93128ba-36f0-4b30-8c90-af7d8b18590c
871dded7-d6f1-4a91-a548-cf2fda7169f7	e93128ba-36f0-4b30-8c90-af7d8b18590c
ccfce5f4-6247-4b7b-9bf3-6513a3606c3b	cff71123-0705-4e43-be0c-373bb757253e
ccfce5f4-6247-4b7b-9bf3-6513a3606c3b	2506ea7b-4eb8-4fb5-a679-933167bb97fc
ccfce5f4-6247-4b7b-9bf3-6513a3606c3b	9a54301b-1035-43b1-9c87-c39be28c56bf
ccfce5f4-6247-4b7b-9bf3-6513a3606c3b	a1d01722-5fb4-43f0-8168-ee598c56fde4
ccfce5f4-6247-4b7b-9bf3-6513a3606c3b	5d4a5674-e0b3-4359-817f-d54a84abef4d
ccfce5f4-6247-4b7b-9bf3-6513a3606c3b	a4a9dc0b-0828-4a4f-ba35-7d1306831883
70289dc5-df33-42d3-9cb3-559560c7ed26	2dfcc81f-36ce-4042-a5f6-5d7fc35f883a
70289dc5-df33-42d3-9cb3-559560c7ed26	49798bac-b9c3-43b8-89d3-8eebc3dbbee2
70289dc5-df33-42d3-9cb3-559560c7ed26	995a0ca5-2f0a-4e04-a6a7-fc8ec0e6d4a4
70289dc5-df33-42d3-9cb3-559560c7ed26	6fbb5af1-da5e-4a00-9276-a7ed6ed39c07
70289dc5-df33-42d3-9cb3-559560c7ed26	ea0ea178-b18a-4487-a6dc-708a8305c21a
70289dc5-df33-42d3-9cb3-559560c7ed26	4d255112-e4e3-4b60-a48a-68602235082a
70289dc5-df33-42d3-9cb3-559560c7ed26	2c6816fd-d89d-411b-89de-8f7643b1211d
70289dc5-df33-42d3-9cb3-559560c7ed26	e0830ae2-b97e-4e92-beb3-74134e461f2e
70289dc5-df33-42d3-9cb3-559560c7ed26	a19a7f00-abe4-4420-bffd-52c2f86fef4a
70289dc5-df33-42d3-9cb3-559560c7ed26	d5697ab3-770b-4cc4-b9c9-fd5b2310631b
70289dc5-df33-42d3-9cb3-559560c7ed26	4a5654a1-98ff-407f-834b-828430bba523
70289dc5-df33-42d3-9cb3-559560c7ed26	f766a501-ef24-4897-a5a6-9ee9333f5404
70289dc5-df33-42d3-9cb3-559560c7ed26	01b63790-e215-4096-9d5f-c4c8fa56bea7
70289dc5-df33-42d3-9cb3-559560c7ed26	5701af45-c50b-4df8-b3b1-48afa23379e6
70289dc5-df33-42d3-9cb3-559560c7ed26	c42c14ab-0217-4814-bc59-d9267916e458
70289dc5-df33-42d3-9cb3-559560c7ed26	f07328e1-261c-41e2-bbd0-4ba3632a605d
70289dc5-df33-42d3-9cb3-559560c7ed26	70de8fd7-2fb3-4150-91c7-f425eff615b1
aa642cc8-e7cd-40d4-a185-9acca6b3503b	19809b9b-074a-409a-a781-e3da647032f9
aa642cc8-e7cd-40d4-a185-9acca6b3503b	1eb12ac6-fe21-4f7a-aef3-452dc79c7049
aa642cc8-e7cd-40d4-a185-9acca6b3503b	c53f1924-09cf-4e27-9e4b-25d69d522d15
aa642cc8-e7cd-40d4-a185-9acca6b3503b	a8909502-0b24-4db0-9bcc-9f712f046d82
aa642cc8-e7cd-40d4-a185-9acca6b3503b	4355b399-97b7-4d86-8502-ada1c3023886
aa642cc8-e7cd-40d4-a185-9acca6b3503b	774a527d-6943-433d-a662-8e3e51b2dd9d
aa642cc8-e7cd-40d4-a185-9acca6b3503b	b58aaf97-b952-4b85-8a15-9f9269c9ef62
aa642cc8-e7cd-40d4-a185-9acca6b3503b	2766a29c-a225-4932-8177-4c53a34e2295
aa642cc8-e7cd-40d4-a185-9acca6b3503b	6176c01f-1011-4e90-bdf9-30e74e64e4ce
aa642cc8-e7cd-40d4-a185-9acca6b3503b	c746aef5-1b5e-489e-8523-150c20e9bd17
aa642cc8-e7cd-40d4-a185-9acca6b3503b	92845e68-b44d-4716-a1bb-c1918def2db6
9cd24079-963a-4fbb-8773-475627ccc21c	bb5c3b6c-ab71-4b95-9884-da8683064d08
9cd24079-963a-4fbb-8773-475627ccc21c	3fa41409-5c93-4ad6-9ebb-814892d5c8fa
9cd24079-963a-4fbb-8773-475627ccc21c	6259903a-76a8-4aee-9ea4-6522abd6a04c
ccfce5f4-6247-4b7b-9bf3-6513a3606c3b	a50850a1-6521-45c7-ad7f-814107e303fa
\.


--
-- Data for Name: transaction; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.transaction (id, jenis_paket, email, timestamp_dimulai, timestamp_berakhir, metode_bayar, nominal) FROM stdin;
\.


--
-- Data for Name: user_playlist; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.user_playlist (email_pembuat, id_user_playlist, judul, deskripsi, jumlah_lagu, tanggal_dibuat, id_playlist, total_durasi) FROM stdin;
marmut@company.id	1af21ac5-3794-4ee1-a4c1-044d0b53e09b	This Is: TAYLOR SWIFT	All Taylor Swift songs are here	11	2024-07-08	be74799d-cd59-466e-9c56-aa28bf154604	2772
marmut@company.id	32d63608-fd94-4504-8bd4-2f0d8ede4c28	This Is: GIRLS GENERATION	All Girls Generation songs are here	11	2024-07-08	aaeb8952-edbf-41ee-b749-b56c953f44fe	2471
marmut@company.id	1c8b92c4-2b14-4933-81d8-a8a649fe5a67	This Is: BLACKPINK	All Blackpink songs are here	12	2024-07-08	5d9b6f64-c107-4a8c-8e1b-a5f4e0fd3b42	2349
marmut@company.id	2dfd5fa9-aa6e-4bda-8217-6f9559b908e9	This Is: NIKI	All Niki songs are here	3	2024-07-08	f1c4ed41-013f-432c-a535-46ec82a678ec	737
marmut@company.id	c55d47ff-c463-4e58-a2f5-0cc359f37c47	This Is: 2PM	All 2pm songs are here	2	2024-07-08	d6805391-b498-4223-b5ac-e5942686e04d	426
marmut@company.id	d08bd989-e3fa-412a-b11b-7d45a4ba8a06	This Is: RED VELVET	All Red Velvet songs are here	6	2024-07-08	59fcd520-736d-4fec-96bc-6708f87e8e87	1221
marmut@company.id	638795c6-53c8-4087-8f93-c02e679d11df	This Is: JISOO	All Jisoo songs are here	1	2024-07-08	f56ede6b-889f-4819-a106-6369176d1b8a	174
marmut@company.id	c86a5d9f-035c-43b7-ba35-8dd046406ba3	This Is: Jennie	All Jennie songs are here	1	2024-07-08	4eb31218-206b-47a9-b51e-5c90437aee63	169
marmut@company.id	a898c7b2-99f3-4699-b957-466795abe9b1	This Is: ROSE	All Rose songs are here	1	2024-07-08	c3af0e1a-213f-4002-8879-e346096767bd	168
marmut@company.id	1b273da4-3bc8-41db-9447-1d1b73130798	This Is: AKMU	All Akmu songs are here	2	2024-07-08	ab7368d9-ab2c-481e-af82-7df96fa0eed2	369
marmut@company.id	4bd1ce1b-ad7b-4f87-b490-6884e5efea27	This Is: NCT	All NCT songs are here	6	2024-07-08	1fd0c5ad-42df-4ac7-86f5-60049631414b	1224
marmut@company.id	4ebf386f-c106-48d8-bdd1-afdd72a1458a	This Is: LISA	All Lisa songs are here	2	2024-07-08	13f68a8c-9e46-4143-8fe9-782354947035	368
marmut@company.id	c7e2863e-fe03-4102-adec-b19edb53bce5	This Is: DAY6	All Day6 songs are here	2	2024-07-08	58b99944-1e11-4c97-8177-60bab4ffe947	512
marmut@company.id	12a6e793-2250-4dfa-90ce-31c1b32f7845	This Is: TAEYEON	All Taeyeon songs are here	3	2024-07-08	2fffeffe-b6f6-41d7-a86a-3a8b19920602	619
marmut@company.id	597baf18-87bb-4ecf-a385-351d489a9a02	This Is: TWICE	All Twice songs are here	9	2024-07-08	34321f32-b65f-43fa-9042-4ca0f48d5b09	1876
marmut@company.id	54bee62c-b787-4ab8-83cf-125c94c5c866	This Is: AESPA	All Aespa songs are here	6	2024-07-08	bfefa396-0772-4c69-913e-d7dc05aa2f19	1221
marmut@company.id	7693d138-2a4b-4491-a775-9b05bed3b499	This Is: BTS	All BTS songs are here	14	2024-07-08	b097de9e-b5c5-41a5-a885-6487ea76aaef	3044
marmut@company.id	0dd8f9ad-b091-47f9-adfa-ba4ba8dbf5db	This Is: NEWJEANS	All NewJeans songs are here	3	2024-07-08	d0dadc6c-30b7-4fa1-a1da-547d00d93b40	551
\.


--
-- Data for Name: messages; Type: TABLE DATA; Schema: realtime; Owner: supabase_realtime_admin
--

COPY realtime.messages (id, topic, extension, inserted_at, updated_at) FROM stdin;
\.


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.schema_migrations (version, inserted_at) FROM stdin;
20211116024918	2024-04-25 06:28:27
20211116045059	2024-04-25 06:28:27
20211116050929	2024-04-25 06:28:27
20211116051442	2024-04-25 06:28:27
20211116212300	2024-04-25 06:28:27
20211116213355	2024-04-25 06:28:27
20211116213934	2024-04-25 06:28:27
20211116214523	2024-04-25 06:28:27
20211122062447	2024-04-25 06:28:27
20211124070109	2024-04-25 06:28:27
20211202204204	2024-04-25 06:28:27
20211202204605	2024-04-25 06:28:27
20211210212804	2024-04-25 06:28:27
20211228014915	2024-04-25 06:28:27
20220107221237	2024-04-25 06:28:27
20220228202821	2024-04-25 06:28:27
20220312004840	2024-04-25 06:28:27
20220603231003	2024-04-25 06:28:27
20220603232444	2024-04-25 06:28:27
20220615214548	2024-04-25 06:28:27
20220712093339	2024-04-25 06:28:27
20220908172859	2024-04-25 06:28:27
20220916233421	2024-04-25 06:28:27
20230119133233	2024-04-25 06:28:27
20230128025114	2024-04-25 06:28:27
20230128025212	2024-04-25 06:28:27
20230227211149	2024-04-25 06:28:27
20230228184745	2024-04-25 06:28:27
20230308225145	2024-04-25 06:28:27
20230328144023	2024-04-25 06:28:27
20231018144023	2024-04-25 06:28:27
20231204144023	2024-04-25 06:28:27
20231204144024	2024-04-25 06:28:27
20231204144025	2024-04-25 06:28:27
20240108234812	2024-04-25 06:28:27
20240109165339	2024-04-25 06:28:27
20240227174441	2024-04-25 06:28:27
20240311171622	2024-04-25 06:28:27
20240321100241	2024-04-25 06:28:27
20240401105812	2024-04-25 06:28:27
20240418121054	2024-04-25 06:28:27
20240523004032	2024-06-06 09:53:28
\.


--
-- Data for Name: subscription; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.subscription (id, subscription_id, entity, filters, claims, created_at) FROM stdin;
\.


--
-- Data for Name: buckets; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.buckets (id, name, owner, created_at, updated_at, public, avif_autodetection, file_size_limit, allowed_mime_types, owner_id) FROM stdin;
\.


--
-- Data for Name: migrations; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.migrations (id, name, hash, executed_at) FROM stdin;
0	create-migrations-table	e18db593bcde2aca2a408c4d1100f6abba2195df	2024-04-22 15:24:02.569269
1	initialmigration	6ab16121fbaa08bbd11b712d05f358f9b555d777	2024-04-22 15:24:02.624636
2	storage-schema	5c7968fd083fcea04050c1b7f6253c9771b99011	2024-04-22 15:24:02.635853
3	pathtoken-column	2cb1b0004b817b29d5b0a971af16bafeede4b70d	2024-04-22 15:24:02.711661
4	add-migrations-rls	427c5b63fe1c5937495d9c635c263ee7a5905058	2024-04-22 15:24:02.746689
5	add-size-functions	79e081a1455b63666c1294a440f8ad4b1e6a7f84	2024-04-22 15:24:02.800342
6	change-column-name-in-get-size	f93f62afdf6613ee5e7e815b30d02dc990201044	2024-04-22 15:24:02.812034
7	add-rls-to-buckets	e7e7f86adbc51049f341dfe8d30256c1abca17aa	2024-04-22 15:24:02.828177
8	add-public-to-buckets	fd670db39ed65f9d08b01db09d6202503ca2bab3	2024-04-22 15:24:02.884835
9	fix-search-function	3a0af29f42e35a4d101c259ed955b67e1bee6825	2024-04-22 15:24:02.94014
10	search-files-search-function	68dc14822daad0ffac3746a502234f486182ef6e	2024-04-22 15:24:02.95325
11	add-trigger-to-auto-update-updated_at-column	7425bdb14366d1739fa8a18c83100636d74dcaa2	2024-04-22 15:24:03.00845
12	add-automatic-avif-detection-flag	8e92e1266eb29518b6a4c5313ab8f29dd0d08df9	2024-04-22 15:24:03.020346
13	add-bucket-custom-limits	cce962054138135cd9a8c4bcd531598684b25e7d	2024-04-22 15:24:03.03465
14	use-bytes-for-max-size	941c41b346f9802b411f06f30e972ad4744dad27	2024-04-22 15:24:03.047063
15	add-can-insert-object-function	934146bc38ead475f4ef4b555c524ee5d66799e5	2024-04-22 15:24:03.125528
16	add-version	76debf38d3fd07dcfc747ca49096457d95b1221b	2024-04-22 15:24:03.137915
17	drop-owner-foreign-key	f1cbb288f1b7a4c1eb8c38504b80ae2a0153d101	2024-04-22 15:24:03.150266
18	add_owner_id_column_deprecate_owner	e7a511b379110b08e2f214be852c35414749fe66	2024-04-22 15:24:03.205612
19	alter-default-value-objects-id	02e5e22a78626187e00d173dc45f58fa66a4f043	2024-04-22 15:24:03.260884
20	list-objects-with-delimiter	cd694ae708e51ba82bf012bba00caf4f3b6393b7	2024-04-22 15:24:03.316892
21	s3-multipart-uploads	8c804d4a566c40cd1e4cc5b3725a664a9303657f	2024-04-22 15:24:03.381829
22	s3-multipart-uploads-big-ints	9737dc258d2397953c9953d9b86920b8be0cdb73	2024-04-22 15:24:03.470976
23	optimize-search-function	9d7e604cddc4b56a5422dc68c9313f4a1b6f132c	2024-04-22 15:24:03.507147
\.


--
-- Data for Name: objects; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.objects (id, bucket_id, name, owner, created_at, updated_at, last_accessed_at, metadata, version, owner_id) FROM stdin;
\.


--
-- Data for Name: s3_multipart_uploads; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.s3_multipart_uploads (id, in_progress_size, upload_signature, bucket_id, key, version, owner_id, created_at) FROM stdin;
\.


--
-- Data for Name: s3_multipart_uploads_parts; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.s3_multipart_uploads_parts (id, upload_id, size, part_number, bucket_id, key, etag, owner_id, version, created_at) FROM stdin;
\.


--
-- Data for Name: secrets; Type: TABLE DATA; Schema: vault; Owner: supabase_admin
--

COPY vault.secrets (id, name, description, secret, key_id, nonce, created_at, updated_at) FROM stdin;
\.


--
-- Name: refresh_tokens_id_seq; Type: SEQUENCE SET; Schema: auth; Owner: supabase_auth_admin
--

SELECT pg_catalog.setval('auth.refresh_tokens_id_seq', 1, false);


--
-- Name: key_key_id_seq; Type: SEQUENCE SET; Schema: pgsodium; Owner: supabase_admin
--

SELECT pg_catalog.setval('pgsodium.key_key_id_seq', 1, false);


--
-- Name: auth_group_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_group_id_seq', 1, false);


--
-- Name: auth_group_permissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_group_permissions_id_seq', 1, false);


--
-- Name: auth_permission_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_permission_id_seq', 28, true);


--
-- Name: auth_user_groups_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_user_groups_id_seq', 1, false);


--
-- Name: auth_user_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_user_id_seq', 1, false);


--
-- Name: auth_user_user_permissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.auth_user_user_permissions_id_seq', 1, false);


--
-- Name: django_admin_log_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.django_admin_log_id_seq', 1, false);


--
-- Name: django_content_type_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.django_content_type_id_seq', 7, true);


--
-- Name: django_migrations_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.django_migrations_id_seq', 20, true);


--
-- Name: messages_id_seq; Type: SEQUENCE SET; Schema: realtime; Owner: supabase_realtime_admin
--

SELECT pg_catalog.setval('realtime.messages_id_seq', 1, false);


--
-- Name: subscription_id_seq; Type: SEQUENCE SET; Schema: realtime; Owner: supabase_admin
--

SELECT pg_catalog.setval('realtime.subscription_id_seq', 1, false);


--
-- Name: mfa_amr_claims amr_id_pk; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT amr_id_pk PRIMARY KEY (id);


--
-- Name: audit_log_entries audit_log_entries_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.audit_log_entries
    ADD CONSTRAINT audit_log_entries_pkey PRIMARY KEY (id);


--
-- Name: flow_state flow_state_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.flow_state
    ADD CONSTRAINT flow_state_pkey PRIMARY KEY (id);


--
-- Name: identities identities_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_pkey PRIMARY KEY (id);


--
-- Name: identities identities_provider_id_provider_unique; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_provider_id_provider_unique UNIQUE (provider_id, provider);


--
-- Name: instances instances_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.instances
    ADD CONSTRAINT instances_pkey PRIMARY KEY (id);


--
-- Name: mfa_amr_claims mfa_amr_claims_session_id_authentication_method_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT mfa_amr_claims_session_id_authentication_method_pkey UNIQUE (session_id, authentication_method);


--
-- Name: mfa_challenges mfa_challenges_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_challenges
    ADD CONSTRAINT mfa_challenges_pkey PRIMARY KEY (id);


--
-- Name: mfa_factors mfa_factors_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_factors
    ADD CONSTRAINT mfa_factors_pkey PRIMARY KEY (id);


--
-- Name: one_time_tokens one_time_tokens_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.one_time_tokens
    ADD CONSTRAINT one_time_tokens_pkey PRIMARY KEY (id);


--
-- Name: refresh_tokens refresh_tokens_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_pkey PRIMARY KEY (id);


--
-- Name: refresh_tokens refresh_tokens_token_unique; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_token_unique UNIQUE (token);


--
-- Name: saml_providers saml_providers_entity_id_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_entity_id_key UNIQUE (entity_id);


--
-- Name: saml_providers saml_providers_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_pkey PRIMARY KEY (id);


--
-- Name: saml_relay_states saml_relay_states_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_pkey PRIMARY KEY (id);


--
-- Name: schema_migrations schema_migrations_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.schema_migrations
    ADD CONSTRAINT schema_migrations_pkey PRIMARY KEY (version);


--
-- Name: sessions sessions_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sessions
    ADD CONSTRAINT sessions_pkey PRIMARY KEY (id);


--
-- Name: sso_domains sso_domains_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_domains
    ADD CONSTRAINT sso_domains_pkey PRIMARY KEY (id);


--
-- Name: sso_providers sso_providers_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_providers
    ADD CONSTRAINT sso_providers_pkey PRIMARY KEY (id);


--
-- Name: users users_phone_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.users
    ADD CONSTRAINT users_phone_key UNIQUE (phone);


--
-- Name: users users_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: akun akun_pkey; Type: CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.akun
    ADD CONSTRAINT akun_pkey PRIMARY KEY (email);


--
-- Name: akun_play_song akun_play_song_pkey; Type: CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.akun_play_song
    ADD CONSTRAINT akun_play_song_pkey PRIMARY KEY (email_pemain, id_song, waktu);


--
-- Name: akun_play_user_playlist akun_play_user_playlist_pkey; Type: CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.akun_play_user_playlist
    ADD CONSTRAINT akun_play_user_playlist_pkey PRIMARY KEY (email_pemain, id_user_playlist, email_pembuat, waktu);


--
-- Name: album album_pkey; Type: CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.album
    ADD CONSTRAINT album_pkey PRIMARY KEY (id);


--
-- Name: artist artist_pkey; Type: CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.artist
    ADD CONSTRAINT artist_pkey PRIMARY KEY (id);


--
-- Name: chart chart_pkey; Type: CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.chart
    ADD CONSTRAINT chart_pkey PRIMARY KEY (tipe);


--
-- Name: downloaded_song downloaded_song_pkey; Type: CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.downloaded_song
    ADD CONSTRAINT downloaded_song_pkey PRIMARY KEY (id_song, email_downloader);


--
-- Name: episode episode_pkey; Type: CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.episode
    ADD CONSTRAINT episode_pkey PRIMARY KEY (id_episode);


--
-- Name: konten konten_pkey; Type: CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.konten
    ADD CONSTRAINT konten_pkey PRIMARY KEY (id);


--
-- Name: label label_pkey; Type: CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.label
    ADD CONSTRAINT label_pkey PRIMARY KEY (id);


--
-- Name: nonpremium nonpremium_pkey; Type: CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.nonpremium
    ADD CONSTRAINT nonpremium_pkey PRIMARY KEY (email);


--
-- Name: paket paket_pkey; Type: CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.paket
    ADD CONSTRAINT paket_pkey PRIMARY KEY (jenis);


--
-- Name: pemilik_hak_cipta pemilik_hak_cipta_pkey; Type: CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.pemilik_hak_cipta
    ADD CONSTRAINT pemilik_hak_cipta_pkey PRIMARY KEY (id);


--
-- Name: genre pk_genre; Type: CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.genre
    ADD CONSTRAINT pk_genre PRIMARY KEY (id_konten, genre);


--
-- Name: transaction pk_transaction; Type: CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.transaction
    ADD CONSTRAINT pk_transaction PRIMARY KEY (id, jenis_paket, email);


--
-- Name: playlist playlist_pkey; Type: CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.playlist
    ADD CONSTRAINT playlist_pkey PRIMARY KEY (id);


--
-- Name: playlist_song playlist_song_pkey; Type: CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.playlist_song
    ADD CONSTRAINT playlist_song_pkey PRIMARY KEY (id_playlist, id_song);


--
-- Name: podcast podcast_pkey; Type: CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.podcast
    ADD CONSTRAINT podcast_pkey PRIMARY KEY (id_konten);


--
-- Name: podcaster podcaster_pkey; Type: CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.podcaster
    ADD CONSTRAINT podcaster_pkey PRIMARY KEY (email);


--
-- Name: premium premium_pkey; Type: CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.premium
    ADD CONSTRAINT premium_pkey PRIMARY KEY (email);


--
-- Name: royalti royalti_pkey; Type: CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.royalti
    ADD CONSTRAINT royalti_pkey PRIMARY KEY (id_pemilik_hak_cipta, id_song);


--
-- Name: song song_pkey; Type: CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.song
    ADD CONSTRAINT song_pkey PRIMARY KEY (id_konten);


--
-- Name: songwriter songwriter_pkey; Type: CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.songwriter
    ADD CONSTRAINT songwriter_pkey PRIMARY KEY (id);


--
-- Name: songwriter_write_song songwriter_write_song_pkey; Type: CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.songwriter_write_song
    ADD CONSTRAINT songwriter_write_song_pkey PRIMARY KEY (id_songwriter, id_song);


--
-- Name: user_playlist user_playlist_pkey; Type: CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.user_playlist
    ADD CONSTRAINT user_playlist_pkey PRIMARY KEY (email_pembuat, id_user_playlist);


--
-- Name: akun akun_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.akun
    ADD CONSTRAINT akun_pkey PRIMARY KEY (email);


--
-- Name: akun_play_song akun_play_song_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.akun_play_song
    ADD CONSTRAINT akun_play_song_pkey PRIMARY KEY (email_pemain, id_song, waktu);


--
-- Name: akun_play_user_playlist akun_play_user_playlist_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.akun_play_user_playlist
    ADD CONSTRAINT akun_play_user_playlist_pkey PRIMARY KEY (email_pemain, id_user_playlist, email_pembuat, waktu);


--
-- Name: album album_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.album
    ADD CONSTRAINT album_pkey PRIMARY KEY (id);


--
-- Name: artist artist_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.artist
    ADD CONSTRAINT artist_pkey PRIMARY KEY (id);


--
-- Name: auth_group auth_group_name_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group
    ADD CONSTRAINT auth_group_name_key UNIQUE (name);


--
-- Name: auth_group_permissions auth_group_permissions_group_id_permission_id_0cd325b0_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_group_id_permission_id_0cd325b0_uniq UNIQUE (group_id, permission_id);


--
-- Name: auth_group_permissions auth_group_permissions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_pkey PRIMARY KEY (id);


--
-- Name: auth_group auth_group_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group
    ADD CONSTRAINT auth_group_pkey PRIMARY KEY (id);


--
-- Name: auth_permission auth_permission_content_type_id_codename_01ab375a_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_content_type_id_codename_01ab375a_uniq UNIQUE (content_type_id, codename);


--
-- Name: auth_permission auth_permission_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_pkey PRIMARY KEY (id);


--
-- Name: auth_user_groups auth_user_groups_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_pkey PRIMARY KEY (id);


--
-- Name: auth_user_groups auth_user_groups_user_id_group_id_94350c0c_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_user_id_group_id_94350c0c_uniq UNIQUE (user_id, group_id);


--
-- Name: auth_user auth_user_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user
    ADD CONSTRAINT auth_user_pkey PRIMARY KEY (id);


--
-- Name: auth_user_user_permissions auth_user_user_permissions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permissions_pkey PRIMARY KEY (id);


--
-- Name: auth_user_user_permissions auth_user_user_permissions_user_id_permission_id_14a6b632_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permissions_user_id_permission_id_14a6b632_uniq UNIQUE (user_id, permission_id);


--
-- Name: auth_user auth_user_username_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user
    ADD CONSTRAINT auth_user_username_key UNIQUE (username);


--
-- Name: chart chart_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.chart
    ADD CONSTRAINT chart_pkey PRIMARY KEY (tipe);


--
-- Name: django_admin_log django_admin_log_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_pkey PRIMARY KEY (id);


--
-- Name: django_content_type django_content_type_app_label_model_76bd3d3b_uniq; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_content_type
    ADD CONSTRAINT django_content_type_app_label_model_76bd3d3b_uniq UNIQUE (app_label, model);


--
-- Name: django_content_type django_content_type_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_content_type
    ADD CONSTRAINT django_content_type_pkey PRIMARY KEY (id);


--
-- Name: django_migrations django_migrations_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_migrations
    ADD CONSTRAINT django_migrations_pkey PRIMARY KEY (id);


--
-- Name: django_session django_session_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_session
    ADD CONSTRAINT django_session_pkey PRIMARY KEY (session_key);


--
-- Name: downloaded_song downloaded_song_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.downloaded_song
    ADD CONSTRAINT downloaded_song_pkey PRIMARY KEY (id_song, email_downloader);


--
-- Name: episode episode_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.episode
    ADD CONSTRAINT episode_pkey PRIMARY KEY (id_episode);


--
-- Name: konten konten_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.konten
    ADD CONSTRAINT konten_pkey PRIMARY KEY (id);


--
-- Name: label label_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.label
    ADD CONSTRAINT label_pkey PRIMARY KEY (id);


--
-- Name: nonpremium nonpremium_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nonpremium
    ADD CONSTRAINT nonpremium_pkey PRIMARY KEY (email);


--
-- Name: paket paket_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.paket
    ADD CONSTRAINT paket_pkey PRIMARY KEY (jenis);


--
-- Name: pemilik_hak_cipta pemilik_hak_cipta_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pemilik_hak_cipta
    ADD CONSTRAINT pemilik_hak_cipta_pkey PRIMARY KEY (id);


--
-- Name: genre pk_genre; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.genre
    ADD CONSTRAINT pk_genre PRIMARY KEY (id_konten, genre);


--
-- Name: transaction pk_transaction; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.transaction
    ADD CONSTRAINT pk_transaction PRIMARY KEY (id, jenis_paket, email);


--
-- Name: playlist playlist_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.playlist
    ADD CONSTRAINT playlist_pkey PRIMARY KEY (id);


--
-- Name: playlist_song playlist_song_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.playlist_song
    ADD CONSTRAINT playlist_song_pkey PRIMARY KEY (id_playlist, id_song);


--
-- Name: podcast podcast_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.podcast
    ADD CONSTRAINT podcast_pkey PRIMARY KEY (id_konten);


--
-- Name: podcaster podcaster_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.podcaster
    ADD CONSTRAINT podcaster_pkey PRIMARY KEY (email);


--
-- Name: premium premium_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.premium
    ADD CONSTRAINT premium_pkey PRIMARY KEY (email);


--
-- Name: royalti royalti_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.royalti
    ADD CONSTRAINT royalti_pkey PRIMARY KEY (id_pemilik_hak_cipta, id_song);


--
-- Name: song song_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.song
    ADD CONSTRAINT song_pkey PRIMARY KEY (id_konten);


--
-- Name: songwriter songwriter_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.songwriter
    ADD CONSTRAINT songwriter_pkey PRIMARY KEY (id);


--
-- Name: songwriter_write_song songwriter_write_song_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.songwriter_write_song
    ADD CONSTRAINT songwriter_write_song_pkey PRIMARY KEY (id_songwriter, id_song);


--
-- Name: user_playlist user_playlist_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_playlist
    ADD CONSTRAINT user_playlist_pkey PRIMARY KEY (email_pembuat, id_user_playlist);


--
-- Name: messages messages_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER TABLE ONLY realtime.messages
    ADD CONSTRAINT messages_pkey PRIMARY KEY (id);


--
-- Name: subscription pk_subscription; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.subscription
    ADD CONSTRAINT pk_subscription PRIMARY KEY (id);


--
-- Name: schema_migrations schema_migrations_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.schema_migrations
    ADD CONSTRAINT schema_migrations_pkey PRIMARY KEY (version);


--
-- Name: buckets buckets_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.buckets
    ADD CONSTRAINT buckets_pkey PRIMARY KEY (id);


--
-- Name: migrations migrations_name_key; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.migrations
    ADD CONSTRAINT migrations_name_key UNIQUE (name);


--
-- Name: migrations migrations_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.migrations
    ADD CONSTRAINT migrations_pkey PRIMARY KEY (id);


--
-- Name: objects objects_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.objects
    ADD CONSTRAINT objects_pkey PRIMARY KEY (id);


--
-- Name: s3_multipart_uploads_parts s3_multipart_uploads_parts_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads_parts
    ADD CONSTRAINT s3_multipart_uploads_parts_pkey PRIMARY KEY (id);


--
-- Name: s3_multipart_uploads s3_multipart_uploads_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads
    ADD CONSTRAINT s3_multipart_uploads_pkey PRIMARY KEY (id);


--
-- Name: audit_logs_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX audit_logs_instance_id_idx ON auth.audit_log_entries USING btree (instance_id);


--
-- Name: confirmation_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX confirmation_token_idx ON auth.users USING btree (confirmation_token) WHERE ((confirmation_token)::text !~ '^[0-9 ]*$'::text);


--
-- Name: email_change_token_current_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX email_change_token_current_idx ON auth.users USING btree (email_change_token_current) WHERE ((email_change_token_current)::text !~ '^[0-9 ]*$'::text);


--
-- Name: email_change_token_new_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX email_change_token_new_idx ON auth.users USING btree (email_change_token_new) WHERE ((email_change_token_new)::text !~ '^[0-9 ]*$'::text);


--
-- Name: factor_id_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX factor_id_created_at_idx ON auth.mfa_factors USING btree (user_id, created_at);


--
-- Name: flow_state_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX flow_state_created_at_idx ON auth.flow_state USING btree (created_at DESC);


--
-- Name: identities_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX identities_email_idx ON auth.identities USING btree (email text_pattern_ops);


--
-- Name: INDEX identities_email_idx; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON INDEX auth.identities_email_idx IS 'Auth: Ensures indexed queries on the email column';


--
-- Name: identities_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX identities_user_id_idx ON auth.identities USING btree (user_id);


--
-- Name: idx_auth_code; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX idx_auth_code ON auth.flow_state USING btree (auth_code);


--
-- Name: idx_user_id_auth_method; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX idx_user_id_auth_method ON auth.flow_state USING btree (user_id, authentication_method);


--
-- Name: mfa_challenge_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX mfa_challenge_created_at_idx ON auth.mfa_challenges USING btree (created_at DESC);


--
-- Name: mfa_factors_user_friendly_name_unique; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX mfa_factors_user_friendly_name_unique ON auth.mfa_factors USING btree (friendly_name, user_id) WHERE (TRIM(BOTH FROM friendly_name) <> ''::text);


--
-- Name: mfa_factors_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX mfa_factors_user_id_idx ON auth.mfa_factors USING btree (user_id);


--
-- Name: one_time_tokens_relates_to_hash_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX one_time_tokens_relates_to_hash_idx ON auth.one_time_tokens USING hash (relates_to);


--
-- Name: one_time_tokens_token_hash_hash_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX one_time_tokens_token_hash_hash_idx ON auth.one_time_tokens USING hash (token_hash);


--
-- Name: one_time_tokens_user_id_token_type_key; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX one_time_tokens_user_id_token_type_key ON auth.one_time_tokens USING btree (user_id, token_type);


--
-- Name: reauthentication_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX reauthentication_token_idx ON auth.users USING btree (reauthentication_token) WHERE ((reauthentication_token)::text !~ '^[0-9 ]*$'::text);


--
-- Name: recovery_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX recovery_token_idx ON auth.users USING btree (recovery_token) WHERE ((recovery_token)::text !~ '^[0-9 ]*$'::text);


--
-- Name: refresh_tokens_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_instance_id_idx ON auth.refresh_tokens USING btree (instance_id);


--
-- Name: refresh_tokens_instance_id_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_instance_id_user_id_idx ON auth.refresh_tokens USING btree (instance_id, user_id);


--
-- Name: refresh_tokens_parent_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_parent_idx ON auth.refresh_tokens USING btree (parent);


--
-- Name: refresh_tokens_session_id_revoked_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_session_id_revoked_idx ON auth.refresh_tokens USING btree (session_id, revoked);


--
-- Name: refresh_tokens_updated_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_updated_at_idx ON auth.refresh_tokens USING btree (updated_at DESC);


--
-- Name: saml_providers_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_providers_sso_provider_id_idx ON auth.saml_providers USING btree (sso_provider_id);


--
-- Name: saml_relay_states_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_created_at_idx ON auth.saml_relay_states USING btree (created_at DESC);


--
-- Name: saml_relay_states_for_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_for_email_idx ON auth.saml_relay_states USING btree (for_email);


--
-- Name: saml_relay_states_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_sso_provider_id_idx ON auth.saml_relay_states USING btree (sso_provider_id);


--
-- Name: sessions_not_after_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sessions_not_after_idx ON auth.sessions USING btree (not_after DESC);


--
-- Name: sessions_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sessions_user_id_idx ON auth.sessions USING btree (user_id);


--
-- Name: sso_domains_domain_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX sso_domains_domain_idx ON auth.sso_domains USING btree (lower(domain));


--
-- Name: sso_domains_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sso_domains_sso_provider_id_idx ON auth.sso_domains USING btree (sso_provider_id);


--
-- Name: sso_providers_resource_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX sso_providers_resource_id_idx ON auth.sso_providers USING btree (lower(resource_id));


--
-- Name: user_id_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX user_id_created_at_idx ON auth.sessions USING btree (user_id, created_at);


--
-- Name: users_email_partial_key; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX users_email_partial_key ON auth.users USING btree (email) WHERE (is_sso_user = false);


--
-- Name: INDEX users_email_partial_key; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON INDEX auth.users_email_partial_key IS 'Auth: A partial unique index that applies only when is_sso_user is false';


--
-- Name: users_instance_id_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_instance_id_email_idx ON auth.users USING btree (instance_id, lower((email)::text));


--
-- Name: users_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_instance_id_idx ON auth.users USING btree (instance_id);


--
-- Name: users_is_anonymous_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_is_anonymous_idx ON auth.users USING btree (is_anonymous);


--
-- Name: auth_group_name_a6ea08ec_like; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_group_name_a6ea08ec_like ON public.auth_group USING btree (name varchar_pattern_ops);


--
-- Name: auth_group_permissions_group_id_b120cbf9; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_group_permissions_group_id_b120cbf9 ON public.auth_group_permissions USING btree (group_id);


--
-- Name: auth_group_permissions_permission_id_84c5c92e; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_group_permissions_permission_id_84c5c92e ON public.auth_group_permissions USING btree (permission_id);


--
-- Name: auth_permission_content_type_id_2f476e4b; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_permission_content_type_id_2f476e4b ON public.auth_permission USING btree (content_type_id);


--
-- Name: auth_user_groups_group_id_97559544; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_user_groups_group_id_97559544 ON public.auth_user_groups USING btree (group_id);


--
-- Name: auth_user_groups_user_id_6a12ed8b; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_user_groups_user_id_6a12ed8b ON public.auth_user_groups USING btree (user_id);


--
-- Name: auth_user_user_permissions_permission_id_1fbb5f2c; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_user_user_permissions_permission_id_1fbb5f2c ON public.auth_user_user_permissions USING btree (permission_id);


--
-- Name: auth_user_user_permissions_user_id_a95ead1b; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_user_user_permissions_user_id_a95ead1b ON public.auth_user_user_permissions USING btree (user_id);


--
-- Name: auth_user_username_6821ab7c_like; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX auth_user_username_6821ab7c_like ON public.auth_user USING btree (username varchar_pattern_ops);


--
-- Name: django_admin_log_content_type_id_c4bce8eb; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_admin_log_content_type_id_c4bce8eb ON public.django_admin_log USING btree (content_type_id);


--
-- Name: django_admin_log_user_id_c564eba6; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_admin_log_user_id_c564eba6 ON public.django_admin_log USING btree (user_id);


--
-- Name: django_session_expire_date_a5c62663; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_session_expire_date_a5c62663 ON public.django_session USING btree (expire_date);


--
-- Name: django_session_session_key_c0390e0f_like; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX django_session_session_key_c0390e0f_like ON public.django_session USING btree (session_key varchar_pattern_ops);


--
-- Name: ix_realtime_subscription_entity; Type: INDEX; Schema: realtime; Owner: supabase_admin
--

CREATE INDEX ix_realtime_subscription_entity ON realtime.subscription USING hash (entity);


--
-- Name: messages_topic_index; Type: INDEX; Schema: realtime; Owner: supabase_realtime_admin
--

CREATE INDEX messages_topic_index ON realtime.messages USING btree (topic);


--
-- Name: subscription_subscription_id_entity_filters_key; Type: INDEX; Schema: realtime; Owner: supabase_admin
--

CREATE UNIQUE INDEX subscription_subscription_id_entity_filters_key ON realtime.subscription USING btree (subscription_id, entity, filters);


--
-- Name: bname; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE UNIQUE INDEX bname ON storage.buckets USING btree (name);


--
-- Name: bucketid_objname; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE UNIQUE INDEX bucketid_objname ON storage.objects USING btree (bucket_id, name);


--
-- Name: idx_multipart_uploads_list; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX idx_multipart_uploads_list ON storage.s3_multipart_uploads USING btree (bucket_id, key, created_at);


--
-- Name: idx_objects_bucket_id_name; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX idx_objects_bucket_id_name ON storage.objects USING btree (bucket_id, name COLLATE "C");


--
-- Name: name_prefix_search; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX name_prefix_search ON storage.objects USING btree (name text_pattern_ops);


--
-- Name: konten konten_after_insert_update; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER konten_after_insert_update BEFORE INSERT OR UPDATE ON public.konten FOR EACH ROW EXECUTE FUNCTION public.update_year();


--
-- Name: song trigger_update_album_details; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER trigger_update_album_details AFTER INSERT OR DELETE OR UPDATE ON public.song FOR EACH ROW EXECUTE FUNCTION public.update_album_details();


--
-- Name: playlist_song trigger_update_total_durasi; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER trigger_update_total_durasi AFTER INSERT OR DELETE ON public.playlist_song FOR EACH ROW EXECUTE FUNCTION public.update_total_durasi_playlist();


--
-- Name: episode update_podcast_duration_after_insert_or_delete; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update_podcast_duration_after_insert_or_delete AFTER INSERT OR DELETE ON public.episode FOR EACH ROW EXECUTE FUNCTION public.update_podcast_duration();


--
-- Name: episode update_podcast_duration_after_update; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update_podcast_duration_after_update AFTER UPDATE ON public.episode FOR EACH ROW WHEN (((old.durasi IS DISTINCT FROM new.durasi) OR (old.id_konten_podcast IS DISTINCT FROM new.id_konten_podcast))) EXECUTE FUNCTION public.update_podcast_duration();


--
-- Name: subscription tr_check_filters; Type: TRIGGER; Schema: realtime; Owner: supabase_admin
--

CREATE TRIGGER tr_check_filters BEFORE INSERT OR UPDATE ON realtime.subscription FOR EACH ROW EXECUTE FUNCTION realtime.subscription_check_filters();


--
-- Name: objects update_objects_updated_at; Type: TRIGGER; Schema: storage; Owner: supabase_storage_admin
--

CREATE TRIGGER update_objects_updated_at BEFORE UPDATE ON storage.objects FOR EACH ROW EXECUTE FUNCTION storage.update_updated_at_column();


--
-- Name: identities identities_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: mfa_amr_claims mfa_amr_claims_session_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT mfa_amr_claims_session_id_fkey FOREIGN KEY (session_id) REFERENCES auth.sessions(id) ON DELETE CASCADE;


--
-- Name: mfa_challenges mfa_challenges_auth_factor_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_challenges
    ADD CONSTRAINT mfa_challenges_auth_factor_id_fkey FOREIGN KEY (factor_id) REFERENCES auth.mfa_factors(id) ON DELETE CASCADE;


--
-- Name: mfa_factors mfa_factors_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_factors
    ADD CONSTRAINT mfa_factors_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: one_time_tokens one_time_tokens_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.one_time_tokens
    ADD CONSTRAINT one_time_tokens_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: refresh_tokens refresh_tokens_session_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_session_id_fkey FOREIGN KEY (session_id) REFERENCES auth.sessions(id) ON DELETE CASCADE;


--
-- Name: saml_providers saml_providers_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- Name: saml_relay_states saml_relay_states_flow_state_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_flow_state_id_fkey FOREIGN KEY (flow_state_id) REFERENCES auth.flow_state(id) ON DELETE CASCADE;


--
-- Name: saml_relay_states saml_relay_states_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- Name: sessions sessions_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sessions
    ADD CONSTRAINT sessions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: sso_domains sso_domains_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_domains
    ADD CONSTRAINT sso_domains_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- Name: akun_play_song akun_play_song_email_pemain_fkey; Type: FK CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.akun_play_song
    ADD CONSTRAINT akun_play_song_email_pemain_fkey FOREIGN KEY (email_pemain) REFERENCES marmut.akun(email);


--
-- Name: akun_play_song akun_play_song_id_song_fkey; Type: FK CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.akun_play_song
    ADD CONSTRAINT akun_play_song_id_song_fkey FOREIGN KEY (id_song) REFERENCES marmut.song(id_konten);


--
-- Name: akun_play_user_playlist akun_play_user_playlist_email_pemain_fkey; Type: FK CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.akun_play_user_playlist
    ADD CONSTRAINT akun_play_user_playlist_email_pemain_fkey FOREIGN KEY (email_pemain) REFERENCES marmut.akun(email);


--
-- Name: akun_play_user_playlist akun_play_user_playlist_id_user_playlist_email_pembuat_fkey; Type: FK CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.akun_play_user_playlist
    ADD CONSTRAINT akun_play_user_playlist_id_user_playlist_email_pembuat_fkey FOREIGN KEY (id_user_playlist, email_pembuat) REFERENCES marmut.user_playlist(id_user_playlist, email_pembuat);


--
-- Name: album album_id_label_fkey; Type: FK CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.album
    ADD CONSTRAINT album_id_label_fkey FOREIGN KEY (id_label) REFERENCES marmut.label(id);


--
-- Name: artist artist_email_akun_fkey; Type: FK CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.artist
    ADD CONSTRAINT artist_email_akun_fkey FOREIGN KEY (email_akun) REFERENCES marmut.akun(email);


--
-- Name: artist artist_id_pemilik_hak_cipta_fkey; Type: FK CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.artist
    ADD CONSTRAINT artist_id_pemilik_hak_cipta_fkey FOREIGN KEY (id_pemilik_hak_cipta) REFERENCES marmut.pemilik_hak_cipta(id);


--
-- Name: chart chart_id_playlist_fkey; Type: FK CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.chart
    ADD CONSTRAINT chart_id_playlist_fkey FOREIGN KEY (id_playlist) REFERENCES marmut.playlist(id);


--
-- Name: downloaded_song downloaded_song_email_downloader_fkey; Type: FK CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.downloaded_song
    ADD CONSTRAINT downloaded_song_email_downloader_fkey FOREIGN KEY (email_downloader) REFERENCES marmut.premium(email);


--
-- Name: downloaded_song downloaded_song_id_song_fkey; Type: FK CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.downloaded_song
    ADD CONSTRAINT downloaded_song_id_song_fkey FOREIGN KEY (id_song) REFERENCES marmut.song(id_konten);


--
-- Name: episode episode_id_konten_podcast_fkey; Type: FK CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.episode
    ADD CONSTRAINT episode_id_konten_podcast_fkey FOREIGN KEY (id_konten_podcast) REFERENCES marmut.podcast(id_konten);


--
-- Name: genre genre_id_konten_fkey; Type: FK CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.genre
    ADD CONSTRAINT genre_id_konten_fkey FOREIGN KEY (id_konten) REFERENCES marmut.konten(id);


--
-- Name: label label_id_pemilik_hak_cipta_fkey; Type: FK CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.label
    ADD CONSTRAINT label_id_pemilik_hak_cipta_fkey FOREIGN KEY (id_pemilik_hak_cipta) REFERENCES marmut.pemilik_hak_cipta(id);


--
-- Name: nonpremium nonpremium_email_fkey; Type: FK CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.nonpremium
    ADD CONSTRAINT nonpremium_email_fkey FOREIGN KEY (email) REFERENCES marmut.akun(email);


--
-- Name: playlist_song playlist_song_id_playlist_fkey; Type: FK CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.playlist_song
    ADD CONSTRAINT playlist_song_id_playlist_fkey FOREIGN KEY (id_playlist) REFERENCES marmut.playlist(id);


--
-- Name: playlist_song playlist_song_id_song_fkey; Type: FK CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.playlist_song
    ADD CONSTRAINT playlist_song_id_song_fkey FOREIGN KEY (id_song) REFERENCES marmut.song(id_konten);


--
-- Name: podcast podcast_email_podcaster_fkey; Type: FK CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.podcast
    ADD CONSTRAINT podcast_email_podcaster_fkey FOREIGN KEY (email_podcaster) REFERENCES marmut.podcaster(email);


--
-- Name: podcaster podcaster_email_fkey; Type: FK CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.podcaster
    ADD CONSTRAINT podcaster_email_fkey FOREIGN KEY (email) REFERENCES marmut.akun(email);


--
-- Name: premium premium_email_fkey; Type: FK CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.premium
    ADD CONSTRAINT premium_email_fkey FOREIGN KEY (email) REFERENCES marmut.akun(email);


--
-- Name: royalti royalti_id_pemilik_hak_cipta_fkey; Type: FK CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.royalti
    ADD CONSTRAINT royalti_id_pemilik_hak_cipta_fkey FOREIGN KEY (id_pemilik_hak_cipta) REFERENCES marmut.pemilik_hak_cipta(id);


--
-- Name: royalti royalti_id_song_fkey; Type: FK CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.royalti
    ADD CONSTRAINT royalti_id_song_fkey FOREIGN KEY (id_song) REFERENCES marmut.song(id_konten);


--
-- Name: song song_id_album_fkey; Type: FK CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.song
    ADD CONSTRAINT song_id_album_fkey FOREIGN KEY (id_album) REFERENCES marmut.album(id);


--
-- Name: song song_id_artist_fkey; Type: FK CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.song
    ADD CONSTRAINT song_id_artist_fkey FOREIGN KEY (id_artist) REFERENCES marmut.artist(id);


--
-- Name: song song_id_konten_fkey; Type: FK CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.song
    ADD CONSTRAINT song_id_konten_fkey FOREIGN KEY (id_konten) REFERENCES marmut.konten(id);


--
-- Name: songwriter songwriter_email_akun_fkey; Type: FK CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.songwriter
    ADD CONSTRAINT songwriter_email_akun_fkey FOREIGN KEY (email_akun) REFERENCES marmut.akun(email);


--
-- Name: songwriter songwriter_id_pemilik_hak_cipta_fkey; Type: FK CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.songwriter
    ADD CONSTRAINT songwriter_id_pemilik_hak_cipta_fkey FOREIGN KEY (id_pemilik_hak_cipta) REFERENCES marmut.pemilik_hak_cipta(id);


--
-- Name: songwriter_write_song songwriter_write_song_id_song_fkey; Type: FK CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.songwriter_write_song
    ADD CONSTRAINT songwriter_write_song_id_song_fkey FOREIGN KEY (id_song) REFERENCES marmut.song(id_konten);


--
-- Name: songwriter_write_song songwriter_write_song_id_songwriter_fkey; Type: FK CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.songwriter_write_song
    ADD CONSTRAINT songwriter_write_song_id_songwriter_fkey FOREIGN KEY (id_songwriter) REFERENCES marmut.songwriter(id);


--
-- Name: transaction transaction_email_fkey; Type: FK CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.transaction
    ADD CONSTRAINT transaction_email_fkey FOREIGN KEY (email) REFERENCES marmut.akun(email);


--
-- Name: transaction transaction_jenis_paket_fkey; Type: FK CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.transaction
    ADD CONSTRAINT transaction_jenis_paket_fkey FOREIGN KEY (jenis_paket) REFERENCES marmut.paket(jenis);


--
-- Name: user_playlist user_playlist_email_pembuat_fkey; Type: FK CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.user_playlist
    ADD CONSTRAINT user_playlist_email_pembuat_fkey FOREIGN KEY (email_pembuat) REFERENCES marmut.akun(email);


--
-- Name: user_playlist user_playlist_id_playlist_fkey; Type: FK CONSTRAINT; Schema: marmut; Owner: postgres
--

ALTER TABLE ONLY marmut.user_playlist
    ADD CONSTRAINT user_playlist_id_playlist_fkey FOREIGN KEY (id_playlist) REFERENCES marmut.playlist(id);


--
-- Name: akun_play_song akun_play_song_email_pemain_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.akun_play_song
    ADD CONSTRAINT akun_play_song_email_pemain_fkey FOREIGN KEY (email_pemain) REFERENCES public.akun(email);


--
-- Name: akun_play_song akun_play_song_id_song_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.akun_play_song
    ADD CONSTRAINT akun_play_song_id_song_fkey FOREIGN KEY (id_song) REFERENCES public.song(id_konten);


--
-- Name: akun_play_user_playlist akun_play_user_playlist_email_pemain_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.akun_play_user_playlist
    ADD CONSTRAINT akun_play_user_playlist_email_pemain_fkey FOREIGN KEY (email_pemain) REFERENCES public.akun(email);


--
-- Name: akun_play_user_playlist akun_play_user_playlist_id_user_playlist_email_pembuat_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.akun_play_user_playlist
    ADD CONSTRAINT akun_play_user_playlist_id_user_playlist_email_pembuat_fkey FOREIGN KEY (id_user_playlist, email_pembuat) REFERENCES public.user_playlist(id_user_playlist, email_pembuat);


--
-- Name: album album_id_label_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.album
    ADD CONSTRAINT album_id_label_fkey FOREIGN KEY (id_label) REFERENCES public.label(id);


--
-- Name: artist artist_email_akun_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.artist
    ADD CONSTRAINT artist_email_akun_fkey FOREIGN KEY (email_akun) REFERENCES public.akun(email);


--
-- Name: artist artist_id_pemilik_hak_cipta_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.artist
    ADD CONSTRAINT artist_id_pemilik_hak_cipta_fkey FOREIGN KEY (id_pemilik_hak_cipta) REFERENCES public.pemilik_hak_cipta(id);


--
-- Name: auth_group_permissions auth_group_permissio_permission_id_84c5c92e_fk_auth_perm; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissio_permission_id_84c5c92e_fk_auth_perm FOREIGN KEY (permission_id) REFERENCES public.auth_permission(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_group_permissions auth_group_permissions_group_id_b120cbf9_fk_auth_group_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_group_id_b120cbf9_fk_auth_group_id FOREIGN KEY (group_id) REFERENCES public.auth_group(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_permission auth_permission_content_type_id_2f476e4b_fk_django_co; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_content_type_id_2f476e4b_fk_django_co FOREIGN KEY (content_type_id) REFERENCES public.django_content_type(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_user_groups auth_user_groups_group_id_97559544_fk_auth_group_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_group_id_97559544_fk_auth_group_id FOREIGN KEY (group_id) REFERENCES public.auth_group(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_user_groups auth_user_groups_user_id_6a12ed8b_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_user_id_6a12ed8b_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_user_user_permissions auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm FOREIGN KEY (permission_id) REFERENCES public.auth_permission(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_user_user_permissions auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: chart chart_id_playlist_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.chart
    ADD CONSTRAINT chart_id_playlist_fkey FOREIGN KEY (id_playlist) REFERENCES public.playlist(id);


--
-- Name: django_admin_log django_admin_log_content_type_id_c4bce8eb_fk_django_co; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_content_type_id_c4bce8eb_fk_django_co FOREIGN KEY (content_type_id) REFERENCES public.django_content_type(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: django_admin_log django_admin_log_user_id_c564eba6_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_user_id_c564eba6_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: downloaded_song downloaded_song_email_downloader_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.downloaded_song
    ADD CONSTRAINT downloaded_song_email_downloader_fkey FOREIGN KEY (email_downloader) REFERENCES public.premium(email);


--
-- Name: downloaded_song downloaded_song_id_song_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.downloaded_song
    ADD CONSTRAINT downloaded_song_id_song_fkey FOREIGN KEY (id_song) REFERENCES public.song(id_konten);


--
-- Name: episode episode_id_konten_podcast_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.episode
    ADD CONSTRAINT episode_id_konten_podcast_fkey FOREIGN KEY (id_konten_podcast) REFERENCES public.podcast(id_konten);


--
-- Name: genre genre_id_konten_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.genre
    ADD CONSTRAINT genre_id_konten_fkey FOREIGN KEY (id_konten) REFERENCES public.konten(id);


--
-- Name: label label_id_pemilik_hak_cipta_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.label
    ADD CONSTRAINT label_id_pemilik_hak_cipta_fkey FOREIGN KEY (id_pemilik_hak_cipta) REFERENCES public.pemilik_hak_cipta(id);


--
-- Name: nonpremium nonpremium_email_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.nonpremium
    ADD CONSTRAINT nonpremium_email_fkey FOREIGN KEY (email) REFERENCES public.akun(email);


--
-- Name: playlist_song playlist_song_id_playlist_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.playlist_song
    ADD CONSTRAINT playlist_song_id_playlist_fkey FOREIGN KEY (id_playlist) REFERENCES public.playlist(id);


--
-- Name: playlist_song playlist_song_id_song_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.playlist_song
    ADD CONSTRAINT playlist_song_id_song_fkey FOREIGN KEY (id_song) REFERENCES public.song(id_konten);


--
-- Name: podcast podcast_email_podcaster_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.podcast
    ADD CONSTRAINT podcast_email_podcaster_fkey FOREIGN KEY (email_podcaster) REFERENCES public.podcaster(email);


--
-- Name: podcaster podcaster_email_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.podcaster
    ADD CONSTRAINT podcaster_email_fkey FOREIGN KEY (email) REFERENCES public.akun(email);


--
-- Name: premium premium_email_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.premium
    ADD CONSTRAINT premium_email_fkey FOREIGN KEY (email) REFERENCES public.akun(email);


--
-- Name: royalti royalti_id_pemilik_hak_cipta_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.royalti
    ADD CONSTRAINT royalti_id_pemilik_hak_cipta_fkey FOREIGN KEY (id_pemilik_hak_cipta) REFERENCES public.pemilik_hak_cipta(id);


--
-- Name: royalti royalti_id_song_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.royalti
    ADD CONSTRAINT royalti_id_song_fkey FOREIGN KEY (id_song) REFERENCES public.song(id_konten);


--
-- Name: song song_id_artist_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.song
    ADD CONSTRAINT song_id_artist_fkey FOREIGN KEY (id_artist) REFERENCES public.artist(id);


--
-- Name: song song_id_konten_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.song
    ADD CONSTRAINT song_id_konten_fkey FOREIGN KEY (id_konten) REFERENCES public.konten(id);


--
-- Name: songwriter songwriter_email_akun_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.songwriter
    ADD CONSTRAINT songwriter_email_akun_fkey FOREIGN KEY (email_akun) REFERENCES public.akun(email);


--
-- Name: songwriter songwriter_id_pemilik_hak_cipta_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.songwriter
    ADD CONSTRAINT songwriter_id_pemilik_hak_cipta_fkey FOREIGN KEY (id_pemilik_hak_cipta) REFERENCES public.pemilik_hak_cipta(id);


--
-- Name: songwriter_write_song songwriter_write_song_id_song_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.songwriter_write_song
    ADD CONSTRAINT songwriter_write_song_id_song_fkey FOREIGN KEY (id_song) REFERENCES public.song(id_konten);


--
-- Name: songwriter_write_song songwriter_write_song_id_songwriter_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.songwriter_write_song
    ADD CONSTRAINT songwriter_write_song_id_songwriter_fkey FOREIGN KEY (id_songwriter) REFERENCES public.songwriter(id);


--
-- Name: transaction transaction_email_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.transaction
    ADD CONSTRAINT transaction_email_fkey FOREIGN KEY (email) REFERENCES public.akun(email);


--
-- Name: transaction transaction_jenis_paket_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.transaction
    ADD CONSTRAINT transaction_jenis_paket_fkey FOREIGN KEY (jenis_paket) REFERENCES public.paket(jenis);


--
-- Name: user_playlist user_playlist_email_pembuat_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_playlist
    ADD CONSTRAINT user_playlist_email_pembuat_fkey FOREIGN KEY (email_pembuat) REFERENCES public.akun(email);


--
-- Name: user_playlist user_playlist_id_playlist_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_playlist
    ADD CONSTRAINT user_playlist_id_playlist_fkey FOREIGN KEY (id_playlist) REFERENCES public.playlist(id);


--
-- Name: objects objects_bucketId_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.objects
    ADD CONSTRAINT "objects_bucketId_fkey" FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- Name: s3_multipart_uploads s3_multipart_uploads_bucket_id_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads
    ADD CONSTRAINT s3_multipart_uploads_bucket_id_fkey FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- Name: s3_multipart_uploads_parts s3_multipart_uploads_parts_bucket_id_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads_parts
    ADD CONSTRAINT s3_multipart_uploads_parts_bucket_id_fkey FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- Name: s3_multipart_uploads_parts s3_multipart_uploads_parts_upload_id_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads_parts
    ADD CONSTRAINT s3_multipart_uploads_parts_upload_id_fkey FOREIGN KEY (upload_id) REFERENCES storage.s3_multipart_uploads(id) ON DELETE CASCADE;


--
-- Name: audit_log_entries; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.audit_log_entries ENABLE ROW LEVEL SECURITY;

--
-- Name: flow_state; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.flow_state ENABLE ROW LEVEL SECURITY;

--
-- Name: identities; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.identities ENABLE ROW LEVEL SECURITY;

--
-- Name: instances; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.instances ENABLE ROW LEVEL SECURITY;

--
-- Name: mfa_amr_claims; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.mfa_amr_claims ENABLE ROW LEVEL SECURITY;

--
-- Name: mfa_challenges; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.mfa_challenges ENABLE ROW LEVEL SECURITY;

--
-- Name: mfa_factors; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.mfa_factors ENABLE ROW LEVEL SECURITY;

--
-- Name: one_time_tokens; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.one_time_tokens ENABLE ROW LEVEL SECURITY;

--
-- Name: refresh_tokens; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.refresh_tokens ENABLE ROW LEVEL SECURITY;

--
-- Name: saml_providers; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.saml_providers ENABLE ROW LEVEL SECURITY;

--
-- Name: saml_relay_states; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.saml_relay_states ENABLE ROW LEVEL SECURITY;

--
-- Name: schema_migrations; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.schema_migrations ENABLE ROW LEVEL SECURITY;

--
-- Name: sessions; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.sessions ENABLE ROW LEVEL SECURITY;

--
-- Name: sso_domains; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.sso_domains ENABLE ROW LEVEL SECURITY;

--
-- Name: sso_providers; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.sso_providers ENABLE ROW LEVEL SECURITY;

--
-- Name: users; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.users ENABLE ROW LEVEL SECURITY;

--
-- Name: messages; Type: ROW SECURITY; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER TABLE realtime.messages ENABLE ROW LEVEL SECURITY;

--
-- Name: buckets; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.buckets ENABLE ROW LEVEL SECURITY;

--
-- Name: migrations; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.migrations ENABLE ROW LEVEL SECURITY;

--
-- Name: objects; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.objects ENABLE ROW LEVEL SECURITY;

--
-- Name: s3_multipart_uploads; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.s3_multipart_uploads ENABLE ROW LEVEL SECURITY;

--
-- Name: s3_multipart_uploads_parts; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.s3_multipart_uploads_parts ENABLE ROW LEVEL SECURITY;

--
-- Name: supabase_realtime; Type: PUBLICATION; Schema: -; Owner: postgres
--

CREATE PUBLICATION supabase_realtime WITH (publish = 'insert, update, delete, truncate');


ALTER PUBLICATION supabase_realtime OWNER TO postgres;

--
-- Name: SCHEMA auth; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA auth TO anon;
GRANT USAGE ON SCHEMA auth TO authenticated;
GRANT USAGE ON SCHEMA auth TO service_role;
GRANT ALL ON SCHEMA auth TO supabase_auth_admin;
GRANT ALL ON SCHEMA auth TO dashboard_user;
GRANT ALL ON SCHEMA auth TO postgres;


--
-- Name: SCHEMA extensions; Type: ACL; Schema: -; Owner: postgres
--

GRANT USAGE ON SCHEMA extensions TO anon;
GRANT USAGE ON SCHEMA extensions TO authenticated;
GRANT USAGE ON SCHEMA extensions TO service_role;
GRANT ALL ON SCHEMA extensions TO dashboard_user;


--
-- Name: SCHEMA public; Type: ACL; Schema: -; Owner: pg_database_owner
--

GRANT USAGE ON SCHEMA public TO postgres;
GRANT USAGE ON SCHEMA public TO anon;
GRANT USAGE ON SCHEMA public TO authenticated;
GRANT USAGE ON SCHEMA public TO service_role;


--
-- Name: SCHEMA realtime; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA realtime TO postgres;
GRANT USAGE ON SCHEMA realtime TO anon;
GRANT USAGE ON SCHEMA realtime TO authenticated;
GRANT USAGE ON SCHEMA realtime TO service_role;
GRANT ALL ON SCHEMA realtime TO supabase_realtime_admin;


--
-- Name: SCHEMA storage; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT ALL ON SCHEMA storage TO postgres;
GRANT USAGE ON SCHEMA storage TO anon;
GRANT USAGE ON SCHEMA storage TO authenticated;
GRANT USAGE ON SCHEMA storage TO service_role;
GRANT ALL ON SCHEMA storage TO supabase_storage_admin;
GRANT ALL ON SCHEMA storage TO dashboard_user;


--
-- Name: FUNCTION email(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.email() TO dashboard_user;


--
-- Name: FUNCTION jwt(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.jwt() TO postgres;
GRANT ALL ON FUNCTION auth.jwt() TO dashboard_user;


--
-- Name: FUNCTION role(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.role() TO dashboard_user;


--
-- Name: FUNCTION uid(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.uid() TO dashboard_user;


--
-- Name: FUNCTION algorithm_sign(signables text, secret text, algorithm text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.algorithm_sign(signables text, secret text, algorithm text) FROM postgres;
GRANT ALL ON FUNCTION extensions.algorithm_sign(signables text, secret text, algorithm text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.algorithm_sign(signables text, secret text, algorithm text) TO dashboard_user;


--
-- Name: FUNCTION armor(bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.armor(bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.armor(bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.armor(bytea) TO dashboard_user;


--
-- Name: FUNCTION armor(bytea, text[], text[]); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.armor(bytea, text[], text[]) FROM postgres;
GRANT ALL ON FUNCTION extensions.armor(bytea, text[], text[]) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.armor(bytea, text[], text[]) TO dashboard_user;


--
-- Name: FUNCTION crypt(text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.crypt(text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.crypt(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.crypt(text, text) TO dashboard_user;


--
-- Name: FUNCTION dearmor(text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.dearmor(text) FROM postgres;
GRANT ALL ON FUNCTION extensions.dearmor(text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.dearmor(text) TO dashboard_user;


--
-- Name: FUNCTION decrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.decrypt(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.decrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.decrypt(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION decrypt_iv(bytea, bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.decrypt_iv(bytea, bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.decrypt_iv(bytea, bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.decrypt_iv(bytea, bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION digest(bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.digest(bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.digest(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.digest(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION digest(text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.digest(text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.digest(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.digest(text, text) TO dashboard_user;


--
-- Name: FUNCTION encrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.encrypt(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.encrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.encrypt(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION encrypt_iv(bytea, bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.encrypt_iv(bytea, bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.encrypt_iv(bytea, bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.encrypt_iv(bytea, bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION gen_random_bytes(integer); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.gen_random_bytes(integer) FROM postgres;
GRANT ALL ON FUNCTION extensions.gen_random_bytes(integer) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_random_bytes(integer) TO dashboard_user;


--
-- Name: FUNCTION gen_random_uuid(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.gen_random_uuid() FROM postgres;
GRANT ALL ON FUNCTION extensions.gen_random_uuid() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_random_uuid() TO dashboard_user;


--
-- Name: FUNCTION gen_salt(text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.gen_salt(text) FROM postgres;
GRANT ALL ON FUNCTION extensions.gen_salt(text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_salt(text) TO dashboard_user;


--
-- Name: FUNCTION gen_salt(text, integer); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.gen_salt(text, integer) FROM postgres;
GRANT ALL ON FUNCTION extensions.gen_salt(text, integer) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_salt(text, integer) TO dashboard_user;


--
-- Name: FUNCTION grant_pg_cron_access(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.grant_pg_cron_access() FROM postgres;
GRANT ALL ON FUNCTION extensions.grant_pg_cron_access() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.grant_pg_cron_access() TO dashboard_user;


--
-- Name: FUNCTION grant_pg_graphql_access(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.grant_pg_graphql_access() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION grant_pg_net_access(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.grant_pg_net_access() FROM postgres;
GRANT ALL ON FUNCTION extensions.grant_pg_net_access() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.grant_pg_net_access() TO dashboard_user;


--
-- Name: FUNCTION hmac(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.hmac(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.hmac(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.hmac(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION hmac(text, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.hmac(text, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.hmac(text, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.hmac(text, text, text) TO dashboard_user;


--
-- Name: FUNCTION pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision) FROM postgres;
GRANT ALL ON FUNCTION extensions.pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision) TO dashboard_user;


--
-- Name: FUNCTION pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone) FROM postgres;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone) TO dashboard_user;


--
-- Name: FUNCTION pg_stat_statements_reset(userid oid, dbid oid, queryid bigint); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pg_stat_statements_reset(userid oid, dbid oid, queryid bigint) FROM postgres;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_reset(userid oid, dbid oid, queryid bigint) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_reset(userid oid, dbid oid, queryid bigint) TO dashboard_user;


--
-- Name: FUNCTION pgp_armor_headers(text, OUT key text, OUT value text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_armor_headers(text, OUT key text, OUT value text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_armor_headers(text, OUT key text, OUT value text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_armor_headers(text, OUT key text, OUT value text) TO dashboard_user;


--
-- Name: FUNCTION pgp_key_id(bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_key_id(bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_key_id(bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_key_id(bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt(text, bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt(text, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt_bytea(bytea, bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt_bytea(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt(bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt(bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt_bytea(bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt_bytea(bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt(text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt(text, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt_bytea(bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt_bytea(bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgrst_ddl_watch(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgrst_ddl_watch() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pgrst_drop_watch(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgrst_drop_watch() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION set_graphql_placeholder(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.set_graphql_placeholder() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION sign(payload json, secret text, algorithm text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.sign(payload json, secret text, algorithm text) FROM postgres;
GRANT ALL ON FUNCTION extensions.sign(payload json, secret text, algorithm text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.sign(payload json, secret text, algorithm text) TO dashboard_user;


--
-- Name: FUNCTION try_cast_double(inp text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.try_cast_double(inp text) FROM postgres;
GRANT ALL ON FUNCTION extensions.try_cast_double(inp text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.try_cast_double(inp text) TO dashboard_user;


--
-- Name: FUNCTION url_decode(data text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.url_decode(data text) FROM postgres;
GRANT ALL ON FUNCTION extensions.url_decode(data text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.url_decode(data text) TO dashboard_user;


--
-- Name: FUNCTION url_encode(data bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.url_encode(data bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.url_encode(data bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.url_encode(data bytea) TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v1(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v1() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1() TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v1mc(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v1mc() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1mc() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1mc() TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v3(namespace uuid, name text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v3(namespace uuid, name text) FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v3(namespace uuid, name text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v3(namespace uuid, name text) TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v4(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v4() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v4() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v4() TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v5(namespace uuid, name text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v5(namespace uuid, name text) FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v5(namespace uuid, name text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v5(namespace uuid, name text) TO dashboard_user;


--
-- Name: FUNCTION uuid_nil(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_nil() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_nil() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_nil() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_dns(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_ns_dns() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_ns_dns() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_dns() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_oid(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_ns_oid() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_ns_oid() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_oid() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_url(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_ns_url() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_ns_url() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_url() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_x500(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_ns_x500() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_ns_x500() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_x500() TO dashboard_user;


--
-- Name: FUNCTION verify(token text, secret text, algorithm text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.verify(token text, secret text, algorithm text) FROM postgres;
GRANT ALL ON FUNCTION extensions.verify(token text, secret text, algorithm text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.verify(token text, secret text, algorithm text) TO dashboard_user;


--
-- Name: FUNCTION comment_directive(comment_ text); Type: ACL; Schema: graphql; Owner: supabase_admin
--

GRANT ALL ON FUNCTION graphql.comment_directive(comment_ text) TO postgres;
GRANT ALL ON FUNCTION graphql.comment_directive(comment_ text) TO anon;
GRANT ALL ON FUNCTION graphql.comment_directive(comment_ text) TO authenticated;
GRANT ALL ON FUNCTION graphql.comment_directive(comment_ text) TO service_role;


--
-- Name: FUNCTION exception(message text); Type: ACL; Schema: graphql; Owner: supabase_admin
--

GRANT ALL ON FUNCTION graphql.exception(message text) TO postgres;
GRANT ALL ON FUNCTION graphql.exception(message text) TO anon;
GRANT ALL ON FUNCTION graphql.exception(message text) TO authenticated;
GRANT ALL ON FUNCTION graphql.exception(message text) TO service_role;


--
-- Name: FUNCTION get_schema_version(); Type: ACL; Schema: graphql; Owner: supabase_admin
--

GRANT ALL ON FUNCTION graphql.get_schema_version() TO postgres;
GRANT ALL ON FUNCTION graphql.get_schema_version() TO anon;
GRANT ALL ON FUNCTION graphql.get_schema_version() TO authenticated;
GRANT ALL ON FUNCTION graphql.get_schema_version() TO service_role;


--
-- Name: FUNCTION increment_schema_version(); Type: ACL; Schema: graphql; Owner: supabase_admin
--

GRANT ALL ON FUNCTION graphql.increment_schema_version() TO postgres;
GRANT ALL ON FUNCTION graphql.increment_schema_version() TO anon;
GRANT ALL ON FUNCTION graphql.increment_schema_version() TO authenticated;
GRANT ALL ON FUNCTION graphql.increment_schema_version() TO service_role;


--
-- Name: FUNCTION graphql("operationName" text, query text, variables jsonb, extensions jsonb); Type: ACL; Schema: graphql_public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO postgres;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO anon;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO authenticated;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO service_role;


--
-- Name: FUNCTION lo_export(oid, text); Type: ACL; Schema: pg_catalog; Owner: supabase_admin
--

REVOKE ALL ON FUNCTION pg_catalog.lo_export(oid, text) FROM postgres;
GRANT ALL ON FUNCTION pg_catalog.lo_export(oid, text) TO supabase_admin;


--
-- Name: FUNCTION lo_import(text); Type: ACL; Schema: pg_catalog; Owner: supabase_admin
--

REVOKE ALL ON FUNCTION pg_catalog.lo_import(text) FROM postgres;
GRANT ALL ON FUNCTION pg_catalog.lo_import(text) TO supabase_admin;


--
-- Name: FUNCTION lo_import(text, oid); Type: ACL; Schema: pg_catalog; Owner: supabase_admin
--

REVOKE ALL ON FUNCTION pg_catalog.lo_import(text, oid) FROM postgres;
GRANT ALL ON FUNCTION pg_catalog.lo_import(text, oid) TO supabase_admin;


--
-- Name: FUNCTION get_auth(p_usename text); Type: ACL; Schema: pgbouncer; Owner: postgres
--

REVOKE ALL ON FUNCTION pgbouncer.get_auth(p_usename text) FROM PUBLIC;
GRANT ALL ON FUNCTION pgbouncer.get_auth(p_usename text) TO pgbouncer;


--
-- Name: FUNCTION crypto_aead_det_decrypt(message bytea, additional bytea, key_uuid uuid, nonce bytea); Type: ACL; Schema: pgsodium; Owner: pgsodium_keymaker
--

GRANT ALL ON FUNCTION pgsodium.crypto_aead_det_decrypt(message bytea, additional bytea, key_uuid uuid, nonce bytea) TO service_role;


--
-- Name: FUNCTION crypto_aead_det_encrypt(message bytea, additional bytea, key_uuid uuid, nonce bytea); Type: ACL; Schema: pgsodium; Owner: pgsodium_keymaker
--

GRANT ALL ON FUNCTION pgsodium.crypto_aead_det_encrypt(message bytea, additional bytea, key_uuid uuid, nonce bytea) TO service_role;


--
-- Name: FUNCTION crypto_aead_det_keygen(); Type: ACL; Schema: pgsodium; Owner: supabase_admin
--

GRANT ALL ON FUNCTION pgsodium.crypto_aead_det_keygen() TO service_role;


--
-- Name: FUNCTION check_duplicate_downloaded_song(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.check_duplicate_downloaded_song() TO anon;
GRANT ALL ON FUNCTION public.check_duplicate_downloaded_song() TO authenticated;
GRANT ALL ON FUNCTION public.check_duplicate_downloaded_song() TO service_role;


--
-- Name: FUNCTION update_album_details(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.update_album_details() TO anon;
GRANT ALL ON FUNCTION public.update_album_details() TO authenticated;
GRANT ALL ON FUNCTION public.update_album_details() TO service_role;


--
-- Name: FUNCTION update_podcast_duration(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.update_podcast_duration() TO anon;
GRANT ALL ON FUNCTION public.update_podcast_duration() TO authenticated;
GRANT ALL ON FUNCTION public.update_podcast_duration() TO service_role;


--
-- Name: FUNCTION update_total_download(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.update_total_download() TO anon;
GRANT ALL ON FUNCTION public.update_total_download() TO authenticated;
GRANT ALL ON FUNCTION public.update_total_download() TO service_role;


--
-- Name: FUNCTION update_total_durasi_playlist(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.update_total_durasi_playlist() TO anon;
GRANT ALL ON FUNCTION public.update_total_durasi_playlist() TO authenticated;
GRANT ALL ON FUNCTION public.update_total_durasi_playlist() TO service_role;


--
-- Name: FUNCTION update_year(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.update_year() TO anon;
GRANT ALL ON FUNCTION public.update_year() TO authenticated;
GRANT ALL ON FUNCTION public.update_year() TO service_role;


--
-- Name: FUNCTION apply_rls(wal jsonb, max_record_bytes integer); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO postgres;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO anon;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO authenticated;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO service_role;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO supabase_realtime_admin;


--
-- Name: FUNCTION build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO postgres;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO anon;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO authenticated;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO service_role;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO supabase_realtime_admin;


--
-- Name: FUNCTION "cast"(val text, type_ regtype); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO postgres;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO dashboard_user;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO anon;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO authenticated;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO service_role;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO supabase_realtime_admin;


--
-- Name: FUNCTION check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO postgres;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO anon;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO authenticated;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO service_role;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO supabase_realtime_admin;


--
-- Name: FUNCTION is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO postgres;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO anon;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO authenticated;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO service_role;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO supabase_realtime_admin;


--
-- Name: FUNCTION list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO postgres;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO anon;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO authenticated;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO service_role;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO supabase_realtime_admin;


--
-- Name: FUNCTION quote_wal2json(entity regclass); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO postgres;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO anon;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO authenticated;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO service_role;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO supabase_realtime_admin;


--
-- Name: FUNCTION subscription_check_filters(); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO postgres;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO dashboard_user;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO anon;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO authenticated;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO service_role;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO supabase_realtime_admin;


--
-- Name: FUNCTION to_regrole(role_name text); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO postgres;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO anon;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO authenticated;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO service_role;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO supabase_realtime_admin;


--
-- Name: FUNCTION topic(); Type: ACL; Schema: realtime; Owner: supabase_realtime_admin
--

GRANT ALL ON FUNCTION realtime.topic() TO postgres;
GRANT ALL ON FUNCTION realtime.topic() TO dashboard_user;


--
-- Name: TABLE audit_log_entries; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.audit_log_entries TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.audit_log_entries TO postgres;
GRANT SELECT ON TABLE auth.audit_log_entries TO postgres WITH GRANT OPTION;


--
-- Name: TABLE flow_state; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.flow_state TO postgres;
GRANT SELECT ON TABLE auth.flow_state TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.flow_state TO dashboard_user;


--
-- Name: TABLE identities; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.identities TO postgres;
GRANT SELECT ON TABLE auth.identities TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.identities TO dashboard_user;


--
-- Name: TABLE instances; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.instances TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.instances TO postgres;
GRANT SELECT ON TABLE auth.instances TO postgres WITH GRANT OPTION;


--
-- Name: TABLE mfa_amr_claims; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.mfa_amr_claims TO postgres;
GRANT SELECT ON TABLE auth.mfa_amr_claims TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.mfa_amr_claims TO dashboard_user;


--
-- Name: TABLE mfa_challenges; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.mfa_challenges TO postgres;
GRANT SELECT ON TABLE auth.mfa_challenges TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.mfa_challenges TO dashboard_user;


--
-- Name: TABLE mfa_factors; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.mfa_factors TO postgres;
GRANT SELECT ON TABLE auth.mfa_factors TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.mfa_factors TO dashboard_user;


--
-- Name: TABLE one_time_tokens; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.one_time_tokens TO postgres;
GRANT SELECT ON TABLE auth.one_time_tokens TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.one_time_tokens TO dashboard_user;


--
-- Name: TABLE refresh_tokens; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.refresh_tokens TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.refresh_tokens TO postgres;
GRANT SELECT ON TABLE auth.refresh_tokens TO postgres WITH GRANT OPTION;


--
-- Name: SEQUENCE refresh_tokens_id_seq; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON SEQUENCE auth.refresh_tokens_id_seq TO dashboard_user;
GRANT ALL ON SEQUENCE auth.refresh_tokens_id_seq TO postgres;


--
-- Name: TABLE saml_providers; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.saml_providers TO postgres;
GRANT SELECT ON TABLE auth.saml_providers TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.saml_providers TO dashboard_user;


--
-- Name: TABLE saml_relay_states; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.saml_relay_states TO postgres;
GRANT SELECT ON TABLE auth.saml_relay_states TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.saml_relay_states TO dashboard_user;


--
-- Name: TABLE schema_migrations; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.schema_migrations TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.schema_migrations TO postgres;
GRANT SELECT ON TABLE auth.schema_migrations TO postgres WITH GRANT OPTION;


--
-- Name: TABLE sessions; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.sessions TO postgres;
GRANT SELECT ON TABLE auth.sessions TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.sessions TO dashboard_user;


--
-- Name: TABLE sso_domains; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.sso_domains TO postgres;
GRANT SELECT ON TABLE auth.sso_domains TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.sso_domains TO dashboard_user;


--
-- Name: TABLE sso_providers; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.sso_providers TO postgres;
GRANT SELECT ON TABLE auth.sso_providers TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.sso_providers TO dashboard_user;


--
-- Name: TABLE users; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.users TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.users TO postgres;
GRANT SELECT ON TABLE auth.users TO postgres WITH GRANT OPTION;


--
-- Name: TABLE pg_stat_statements; Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON TABLE extensions.pg_stat_statements FROM postgres;
GRANT ALL ON TABLE extensions.pg_stat_statements TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE extensions.pg_stat_statements TO dashboard_user;


--
-- Name: TABLE pg_stat_statements_info; Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON TABLE extensions.pg_stat_statements_info FROM postgres;
GRANT ALL ON TABLE extensions.pg_stat_statements_info TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE extensions.pg_stat_statements_info TO dashboard_user;


--
-- Name: SEQUENCE seq_schema_version; Type: ACL; Schema: graphql; Owner: supabase_admin
--

GRANT ALL ON SEQUENCE graphql.seq_schema_version TO postgres;
GRANT ALL ON SEQUENCE graphql.seq_schema_version TO anon;
GRANT ALL ON SEQUENCE graphql.seq_schema_version TO authenticated;
GRANT ALL ON SEQUENCE graphql.seq_schema_version TO service_role;


--
-- Name: TABLE decrypted_key; Type: ACL; Schema: pgsodium; Owner: supabase_admin
--

GRANT ALL ON TABLE pgsodium.decrypted_key TO pgsodium_keyholder;


--
-- Name: TABLE masking_rule; Type: ACL; Schema: pgsodium; Owner: supabase_admin
--

GRANT ALL ON TABLE pgsodium.masking_rule TO pgsodium_keyholder;


--
-- Name: TABLE mask_columns; Type: ACL; Schema: pgsodium; Owner: supabase_admin
--

GRANT ALL ON TABLE pgsodium.mask_columns TO pgsodium_keyholder;


--
-- Name: TABLE akun; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.akun TO anon;
GRANT ALL ON TABLE public.akun TO authenticated;
GRANT ALL ON TABLE public.akun TO service_role;


--
-- Name: TABLE akun_play_song; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.akun_play_song TO anon;
GRANT ALL ON TABLE public.akun_play_song TO authenticated;
GRANT ALL ON TABLE public.akun_play_song TO service_role;


--
-- Name: TABLE akun_play_user_playlist; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.akun_play_user_playlist TO anon;
GRANT ALL ON TABLE public.akun_play_user_playlist TO authenticated;
GRANT ALL ON TABLE public.akun_play_user_playlist TO service_role;


--
-- Name: TABLE album; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.album TO anon;
GRANT ALL ON TABLE public.album TO authenticated;
GRANT ALL ON TABLE public.album TO service_role;


--
-- Name: TABLE artist; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.artist TO anon;
GRANT ALL ON TABLE public.artist TO authenticated;
GRANT ALL ON TABLE public.artist TO service_role;


--
-- Name: TABLE auth_group; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.auth_group TO anon;
GRANT ALL ON TABLE public.auth_group TO authenticated;
GRANT ALL ON TABLE public.auth_group TO service_role;


--
-- Name: SEQUENCE auth_group_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.auth_group_id_seq TO anon;
GRANT ALL ON SEQUENCE public.auth_group_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.auth_group_id_seq TO service_role;


--
-- Name: TABLE auth_group_permissions; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.auth_group_permissions TO anon;
GRANT ALL ON TABLE public.auth_group_permissions TO authenticated;
GRANT ALL ON TABLE public.auth_group_permissions TO service_role;


--
-- Name: SEQUENCE auth_group_permissions_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.auth_group_permissions_id_seq TO anon;
GRANT ALL ON SEQUENCE public.auth_group_permissions_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.auth_group_permissions_id_seq TO service_role;


--
-- Name: TABLE auth_permission; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.auth_permission TO anon;
GRANT ALL ON TABLE public.auth_permission TO authenticated;
GRANT ALL ON TABLE public.auth_permission TO service_role;


--
-- Name: SEQUENCE auth_permission_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.auth_permission_id_seq TO anon;
GRANT ALL ON SEQUENCE public.auth_permission_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.auth_permission_id_seq TO service_role;


--
-- Name: TABLE auth_user; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.auth_user TO anon;
GRANT ALL ON TABLE public.auth_user TO authenticated;
GRANT ALL ON TABLE public.auth_user TO service_role;


--
-- Name: TABLE auth_user_groups; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.auth_user_groups TO anon;
GRANT ALL ON TABLE public.auth_user_groups TO authenticated;
GRANT ALL ON TABLE public.auth_user_groups TO service_role;


--
-- Name: SEQUENCE auth_user_groups_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.auth_user_groups_id_seq TO anon;
GRANT ALL ON SEQUENCE public.auth_user_groups_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.auth_user_groups_id_seq TO service_role;


--
-- Name: SEQUENCE auth_user_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.auth_user_id_seq TO anon;
GRANT ALL ON SEQUENCE public.auth_user_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.auth_user_id_seq TO service_role;


--
-- Name: TABLE auth_user_user_permissions; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.auth_user_user_permissions TO anon;
GRANT ALL ON TABLE public.auth_user_user_permissions TO authenticated;
GRANT ALL ON TABLE public.auth_user_user_permissions TO service_role;


--
-- Name: SEQUENCE auth_user_user_permissions_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.auth_user_user_permissions_id_seq TO anon;
GRANT ALL ON SEQUENCE public.auth_user_user_permissions_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.auth_user_user_permissions_id_seq TO service_role;


--
-- Name: TABLE chart; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.chart TO anon;
GRANT ALL ON TABLE public.chart TO authenticated;
GRANT ALL ON TABLE public.chart TO service_role;


--
-- Name: TABLE django_admin_log; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.django_admin_log TO anon;
GRANT ALL ON TABLE public.django_admin_log TO authenticated;
GRANT ALL ON TABLE public.django_admin_log TO service_role;


--
-- Name: SEQUENCE django_admin_log_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.django_admin_log_id_seq TO anon;
GRANT ALL ON SEQUENCE public.django_admin_log_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.django_admin_log_id_seq TO service_role;


--
-- Name: TABLE django_content_type; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.django_content_type TO anon;
GRANT ALL ON TABLE public.django_content_type TO authenticated;
GRANT ALL ON TABLE public.django_content_type TO service_role;


--
-- Name: SEQUENCE django_content_type_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.django_content_type_id_seq TO anon;
GRANT ALL ON SEQUENCE public.django_content_type_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.django_content_type_id_seq TO service_role;


--
-- Name: TABLE django_migrations; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.django_migrations TO anon;
GRANT ALL ON TABLE public.django_migrations TO authenticated;
GRANT ALL ON TABLE public.django_migrations TO service_role;


--
-- Name: SEQUENCE django_migrations_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.django_migrations_id_seq TO anon;
GRANT ALL ON SEQUENCE public.django_migrations_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.django_migrations_id_seq TO service_role;


--
-- Name: TABLE django_session; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.django_session TO anon;
GRANT ALL ON TABLE public.django_session TO authenticated;
GRANT ALL ON TABLE public.django_session TO service_role;


--
-- Name: TABLE downloaded_song; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.downloaded_song TO anon;
GRANT ALL ON TABLE public.downloaded_song TO authenticated;
GRANT ALL ON TABLE public.downloaded_song TO service_role;


--
-- Name: TABLE episode; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.episode TO anon;
GRANT ALL ON TABLE public.episode TO authenticated;
GRANT ALL ON TABLE public.episode TO service_role;


--
-- Name: TABLE genre; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.genre TO anon;
GRANT ALL ON TABLE public.genre TO authenticated;
GRANT ALL ON TABLE public.genre TO service_role;


--
-- Name: TABLE konten; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.konten TO anon;
GRANT ALL ON TABLE public.konten TO authenticated;
GRANT ALL ON TABLE public.konten TO service_role;


--
-- Name: TABLE label; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.label TO anon;
GRANT ALL ON TABLE public.label TO authenticated;
GRANT ALL ON TABLE public.label TO service_role;


--
-- Name: TABLE nonpremium; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.nonpremium TO anon;
GRANT ALL ON TABLE public.nonpremium TO authenticated;
GRANT ALL ON TABLE public.nonpremium TO service_role;


--
-- Name: TABLE paket; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.paket TO anon;
GRANT ALL ON TABLE public.paket TO authenticated;
GRANT ALL ON TABLE public.paket TO service_role;


--
-- Name: TABLE pemilik_hak_cipta; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.pemilik_hak_cipta TO anon;
GRANT ALL ON TABLE public.pemilik_hak_cipta TO authenticated;
GRANT ALL ON TABLE public.pemilik_hak_cipta TO service_role;


--
-- Name: TABLE playlist; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.playlist TO anon;
GRANT ALL ON TABLE public.playlist TO authenticated;
GRANT ALL ON TABLE public.playlist TO service_role;


--
-- Name: TABLE playlist_song; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.playlist_song TO anon;
GRANT ALL ON TABLE public.playlist_song TO authenticated;
GRANT ALL ON TABLE public.playlist_song TO service_role;


--
-- Name: TABLE podcast; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.podcast TO anon;
GRANT ALL ON TABLE public.podcast TO authenticated;
GRANT ALL ON TABLE public.podcast TO service_role;


--
-- Name: TABLE podcaster; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.podcaster TO anon;
GRANT ALL ON TABLE public.podcaster TO authenticated;
GRANT ALL ON TABLE public.podcaster TO service_role;


--
-- Name: TABLE premium; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.premium TO anon;
GRANT ALL ON TABLE public.premium TO authenticated;
GRANT ALL ON TABLE public.premium TO service_role;


--
-- Name: TABLE royalti; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.royalti TO anon;
GRANT ALL ON TABLE public.royalti TO authenticated;
GRANT ALL ON TABLE public.royalti TO service_role;


--
-- Name: TABLE song; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.song TO anon;
GRANT ALL ON TABLE public.song TO authenticated;
GRANT ALL ON TABLE public.song TO service_role;


--
-- Name: TABLE songwriter; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.songwriter TO anon;
GRANT ALL ON TABLE public.songwriter TO authenticated;
GRANT ALL ON TABLE public.songwriter TO service_role;


--
-- Name: TABLE songwriter_write_song; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.songwriter_write_song TO anon;
GRANT ALL ON TABLE public.songwriter_write_song TO authenticated;
GRANT ALL ON TABLE public.songwriter_write_song TO service_role;


--
-- Name: TABLE transaction; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.transaction TO anon;
GRANT ALL ON TABLE public.transaction TO authenticated;
GRANT ALL ON TABLE public.transaction TO service_role;


--
-- Name: TABLE user_playlist; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.user_playlist TO anon;
GRANT ALL ON TABLE public.user_playlist TO authenticated;
GRANT ALL ON TABLE public.user_playlist TO service_role;


--
-- Name: TABLE messages; Type: ACL; Schema: realtime; Owner: supabase_realtime_admin
--

GRANT ALL ON TABLE realtime.messages TO postgres;
GRANT ALL ON TABLE realtime.messages TO dashboard_user;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.messages TO anon;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.messages TO authenticated;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.messages TO service_role;


--
-- Name: SEQUENCE messages_id_seq; Type: ACL; Schema: realtime; Owner: supabase_realtime_admin
--

GRANT ALL ON SEQUENCE realtime.messages_id_seq TO postgres;
GRANT ALL ON SEQUENCE realtime.messages_id_seq TO dashboard_user;
GRANT USAGE ON SEQUENCE realtime.messages_id_seq TO anon;
GRANT USAGE ON SEQUENCE realtime.messages_id_seq TO authenticated;
GRANT USAGE ON SEQUENCE realtime.messages_id_seq TO service_role;


--
-- Name: TABLE schema_migrations; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.schema_migrations TO postgres;
GRANT ALL ON TABLE realtime.schema_migrations TO dashboard_user;
GRANT SELECT ON TABLE realtime.schema_migrations TO anon;
GRANT SELECT ON TABLE realtime.schema_migrations TO authenticated;
GRANT SELECT ON TABLE realtime.schema_migrations TO service_role;
GRANT ALL ON TABLE realtime.schema_migrations TO supabase_realtime_admin;


--
-- Name: TABLE subscription; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.subscription TO postgres;
GRANT ALL ON TABLE realtime.subscription TO dashboard_user;
GRANT SELECT ON TABLE realtime.subscription TO anon;
GRANT SELECT ON TABLE realtime.subscription TO authenticated;
GRANT SELECT ON TABLE realtime.subscription TO service_role;
GRANT ALL ON TABLE realtime.subscription TO supabase_realtime_admin;


--
-- Name: SEQUENCE subscription_id_seq; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON SEQUENCE realtime.subscription_id_seq TO postgres;
GRANT ALL ON SEQUENCE realtime.subscription_id_seq TO dashboard_user;
GRANT USAGE ON SEQUENCE realtime.subscription_id_seq TO anon;
GRANT USAGE ON SEQUENCE realtime.subscription_id_seq TO authenticated;
GRANT USAGE ON SEQUENCE realtime.subscription_id_seq TO service_role;
GRANT ALL ON SEQUENCE realtime.subscription_id_seq TO supabase_realtime_admin;


--
-- Name: TABLE buckets; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.buckets TO anon;
GRANT ALL ON TABLE storage.buckets TO authenticated;
GRANT ALL ON TABLE storage.buckets TO service_role;
GRANT ALL ON TABLE storage.buckets TO postgres;


--
-- Name: TABLE migrations; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.migrations TO anon;
GRANT ALL ON TABLE storage.migrations TO authenticated;
GRANT ALL ON TABLE storage.migrations TO service_role;
GRANT ALL ON TABLE storage.migrations TO postgres;


--
-- Name: TABLE objects; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.objects TO anon;
GRANT ALL ON TABLE storage.objects TO authenticated;
GRANT ALL ON TABLE storage.objects TO service_role;
GRANT ALL ON TABLE storage.objects TO postgres;


--
-- Name: TABLE s3_multipart_uploads; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.s3_multipart_uploads TO service_role;
GRANT SELECT ON TABLE storage.s3_multipart_uploads TO authenticated;
GRANT SELECT ON TABLE storage.s3_multipart_uploads TO anon;


--
-- Name: TABLE s3_multipart_uploads_parts; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.s3_multipart_uploads_parts TO service_role;
GRANT SELECT ON TABLE storage.s3_multipart_uploads_parts TO authenticated;
GRANT SELECT ON TABLE storage.s3_multipart_uploads_parts TO anon;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON SEQUENCES  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON FUNCTIONS  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON TABLES  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT ALL ON SEQUENCES  TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT ALL ON FUNCTIONS  TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT ALL ON TABLES  TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: pgsodium; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium GRANT ALL ON SEQUENCES  TO pgsodium_keyholder;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: pgsodium; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium GRANT ALL ON TABLES  TO pgsodium_keyholder;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: pgsodium_masks; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium_masks GRANT ALL ON SEQUENCES  TO pgsodium_keyiduser;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: pgsodium_masks; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium_masks GRANT ALL ON FUNCTIONS  TO pgsodium_keyiduser;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: pgsodium_masks; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium_masks GRANT ALL ON TABLES  TO pgsodium_keyiduser;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON SEQUENCES  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON FUNCTIONS  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON TABLES  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO service_role;


--
-- Name: issue_graphql_placeholder; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_graphql_placeholder ON sql_drop
         WHEN TAG IN ('DROP EXTENSION')
   EXECUTE FUNCTION extensions.set_graphql_placeholder();


ALTER EVENT TRIGGER issue_graphql_placeholder OWNER TO supabase_admin;

--
-- Name: issue_pg_cron_access; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_pg_cron_access ON ddl_command_end
         WHEN TAG IN ('CREATE EXTENSION')
   EXECUTE FUNCTION extensions.grant_pg_cron_access();


ALTER EVENT TRIGGER issue_pg_cron_access OWNER TO supabase_admin;

--
-- Name: issue_pg_graphql_access; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_pg_graphql_access ON ddl_command_end
         WHEN TAG IN ('CREATE FUNCTION')
   EXECUTE FUNCTION extensions.grant_pg_graphql_access();


ALTER EVENT TRIGGER issue_pg_graphql_access OWNER TO supabase_admin;

--
-- Name: issue_pg_net_access; Type: EVENT TRIGGER; Schema: -; Owner: postgres
--

CREATE EVENT TRIGGER issue_pg_net_access ON ddl_command_end
         WHEN TAG IN ('CREATE EXTENSION')
   EXECUTE FUNCTION extensions.grant_pg_net_access();


ALTER EVENT TRIGGER issue_pg_net_access OWNER TO postgres;

--
-- Name: pgrst_ddl_watch; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER pgrst_ddl_watch ON ddl_command_end
   EXECUTE FUNCTION extensions.pgrst_ddl_watch();


ALTER EVENT TRIGGER pgrst_ddl_watch OWNER TO supabase_admin;

--
-- Name: pgrst_drop_watch; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER pgrst_drop_watch ON sql_drop
   EXECUTE FUNCTION extensions.pgrst_drop_watch();


ALTER EVENT TRIGGER pgrst_drop_watch OWNER TO supabase_admin;

--
-- PostgreSQL database dump complete
--

--
-- PostgreSQL database cluster dump complete
--

